<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>promise-async-await</title>
      <link href="/2020/06/20/promise-async-await/"/>
      <url>/2020/06/20/promise-async-await/</url>
      
        <content type="html"><![CDATA[<p>笔者刚接触<code>async/await</code>时，就被其暂停执行的特性吸引了，心想在没有原生API支持的情况下，await居然能挂起当前方法，实现暂停执行，我感到十分好奇。好奇心驱使我一层一层剥开有关JS异步编程的一切。阅读完本文，读者应该能够了解：</p><ol><li><code>Promise</code>的实现原理</li><li><code>async/await</code>的实现原理</li><li><code>Generator</code>的实现原理</li></ol><h1 id="Promise实现"><a href="#Promise实现" class="headerlink" title="Promise实现"></a>Promise实现</h1><p>在成文过程中，笔者查阅了很多讲解Promise实现的文章，但感觉大多文章都很难称得上条理清晰，有的上来就放大段Promise规范翻译，有的在Promise基础使用上浪费篇幅，又或者把一个简单的东西长篇大论，过度讲解，我推荐头铁的同学直接拉到本章小结看最终实现，结合着注释直接啃代码也能理解十之八九</p><p>回归正题，文章开头我们先点一下Promise为我们解决了什么问题：在传统的异步编程中，如果异步之间存在依赖关系，我们就需要通过层层嵌套回调来满足这种依赖，如果嵌套层数过多，可读性和可维护性都变得很差，产生所谓“回调地狱”，而Promise将回调嵌套改为链式调用，增加可读性和可维护性。下面我们就来一步步实现一个Promise：</p><h2 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1. 观察者模式"></a>1. 观察者模式</h2><p>我们先来看一个最简单的Promise使用：</p><pre><code>const p1 = new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {        resolve(&#39;result&#39;)    },    1000);}) p1.then(res =&gt; console.log(res), err =&gt; console.log(err))</code></pre><p>观察这个例子，我们分析Promise的调用流程：</p><ul><li><code>Promise</code>的构造方法接收一个<code>executor()</code>，在<code>new Promise()</code>时就立刻执行这个executor回调</li><li><code>executor()</code>内部的异步任务被放入宏/微任务队列，等待执行</li><li><code>then()</code>被执行，收集成功/失败回调，放入成功/失败队列</li><li><code>executor()</code>的异步任务被执行，触发<code>resolve/reject</code>，从成功/失败队列中取出回调依次执行</li></ul><p>其实熟悉设计模式的同学，很容易就能意识到这是个<strong>观察者模式</strong>，这种<code>收集依赖 -&gt; 触发通知 -&gt; 取出依赖执行</code> 的方式，被广泛运用于观察者模式的实现，在Promise里，执行顺序是<code>then收集依赖 -&gt; 异步触发resolve -&gt; resolve执行依赖</code>。依此，我们可以勾勒出Promise的大致形状：</p><pre><code>class MyPromise {  // 构造方法接收一个回调  constructor(executor) {    this._resolveQueue = []    // then收集的执行成功的回调队列    this._rejectQueue = []     // then收集的执行失败的回调队列    // 由于resolve/reject是在executor内部被调用, 因此需要使用箭头函数固定this指向, 否则找不到this._resolveQueue    let _resolve = (val) =&gt; {      // 从成功队列里取出回调依次执行      while(this._resolveQueue.length) {        const callback = this._resolveQueue.shift()        callback(val)      }    }    // 实现同resolve    let _reject = (val) =&gt; {      while(this._rejectQueue.length) {        const callback = this._rejectQueue.shift()        callback(val)      }    }    // new Promise()时立即执行executor,并传入resolve和reject    executor(_resolve, _reject)  }  // then方法,接收一个成功的回调和一个失败的回调，并push进对应队列  then(resolveFn, rejectFn) {    this._resolveQueue.push(resolveFn)    this._rejectQueue.push(rejectFn)  }}</code></pre><p>写完代码我们可以测试一下:</p><pre><code>const p1 = new MyPromise((resolve, reject) =&gt; {  setTimeout(() =&gt; {    resolve(&#39;result&#39;)  }, 1000);})p1.then(res =&gt; console.log(res))//一秒后输出result</code></pre><p>我们运用观察者模式简单的实现了一下<code>then</code>和<code>resolve</code>，使我们能够在then方法的回调里取得异步操作的返回值，但我们这个Promise离最终实现还有很长的距离，下面我们来一步步补充这个Promise：</p><h2 id="2-Promise-A-规范"><a href="#2-Promise-A-规范" class="headerlink" title="2. Promise A+规范"></a>2. Promise A+规范</h2><p>上面我们已经简单地实现了一个超低配版Promise，但我们会看到很多文章和我们写的不一样，他们的Promise实现中还引入了各种状态控制，这是由于ES6的Promise实现需要遵循<a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promise/A+规范</a>，是规范对Promise的状态控制做了要求。Promise/A+的规范比较长，这里只总结两条核心规则：</p><blockquote><ol><li>Promise本质是一个状态机，且状态只能为以下三种：<code>Pending（等待态）</code>、<code>Fulfilled（执行态）</code>、<code>Rejected（拒绝态）</code>，状态的变更是单向的，只能从Pending -&gt; Fulfilled 或 Pending -&gt; Rejected，状态变更不可逆</li><li><code>then方法</code>接收两个可选参数，分别对应状态改变时触发的回调。then方法返回一个promise。then 方法可以被同一个 promise 调用多次。</li></ol></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/2/26/161d2454e68ff07b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>根据规范，我们补充一下Promise的代码：</p><pre><code>//Promise/A+规范的三种状态const PENDING = &#39;pending&#39;const FULFILLED = &#39;fulfilled&#39;const REJECTED = &#39;rejected&#39;class MyPromise {  // 构造方法接收一个回调  constructor(executor) {    this._status = PENDING     // Promise状态    this._resolveQueue = []    // 成功队列, resolve时触发    this._rejectQueue = []     // 失败队列, reject时触发    // 由于resolve/reject是在executor内部被调用, 因此需要使用箭头函数固定this指向, 否则找不到this._resolveQueue    let _resolve = (val) =&gt; {      if(this._status !== PENDING) return   // 对应规范中的&quot;状态只能由pending到fulfilled或rejected&quot;      this._status = FULFILLED              // 变更状态      // 这里之所以使用一个队列来储存回调,是为了实现规范要求的 &quot;then 方法可以被同一个 promise 调用多次&quot;      // 如果使用一个变量而非队列来储存回调,那么即使多次p1.then()也只会执行一次回调      while(this._resolveQueue.length) {            const callback = this._resolveQueue.shift()        callback(val)      }    }    // 实现同resolve    let _reject = (val) =&gt; {      if(this._status !== PENDING) return   // 对应规范中的&quot;状态只能由pending到fulfilled或rejected&quot;      this._status = REJECTED               // 变更状态      while(this._rejectQueue.length) {        const callback = this._rejectQueue.shift()        callback(val)      }    }    // new Promise()时立即执行executor,并传入resolve和reject    executor(_resolve, _reject)  }  // then方法,接收一个成功的回调和一个失败的回调  then(resolveFn, rejectFn) {    this._resolveQueue.push(resolveFn)    this._rejectQueue.push(rejectFn)  }}</code></pre><h2 id="3-then的链式调用"><a href="#3-then的链式调用" class="headerlink" title="3. then的链式调用"></a>3. then的链式调用</h2><p>补充完规范，我们接着来实现链式调用，这是Promise实现的重点和难点，我们先来看一下then是如何链式调用的：</p><pre><code>const p1 = new Promise((resolve, reject) =&gt; {  resolve(1)})p1  .then(res =&gt; {    console.log(res)    //then回调中可以return一个Promise    return new Promise((resolve, reject) =&gt; {      setTimeout(() =&gt; {        resolve(2)      }, 1000);    })  })  .then(res =&gt; {    console.log(res)    //then回调中也可以return一个值    return 3  })  .then(res =&gt; {    console.log(res)  })</code></pre><p>输出</p><pre><code>123</code></pre><p>我们思考一下如何实现这种链式调用：</p><ol><li>显然<code>.then()</code>需要返回一个Promise，这样才能找到then方法，所以我们会把then方法的返回值包装成Promise。</li><li><code>.then()</code>的回调需要拿到上一个<code>.then()</code>的返回值</li><li><code>.then()</code>的回调需要顺序执行，以上面这段代码为例，虽然中间return了一个Promise，但执行顺序仍要保证是1-&gt;2-&gt;3。我们要等待当前Promise状态变更后，再执行下一个then收集的回调，这就要求我们对then的返回值分类讨论</li></ol><pre><code>// then方法then(resolveFn, rejectFn) {  //return一个新的promise  return new MyPromise((resolve, reject) =&gt; {    //把resolveFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论    const fulfilledFn = value =&gt; {      try {        //执行第一个(当前的)Promise的成功回调,并获取返回值        let x = resolveFn(value)        //分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve        //这里resolve之后，就能被下一个.then()的回调获取到返回值，从而实现链式调用        x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)      } catch (error) {        reject(error)      }    }    //把后续then收集的依赖都push进当前Promise的成功回调队列中(_rejectQueue), 这是为了保证顺序调用    this._resolveQueue.push(fulfilledFn)    //reject同理    const rejectedFn  = error =&gt; {      try {        let x = rejectFn(error)        x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)      } catch (error) {        reject(error)      }    }    this._rejectQueue.push(rejectedFn)  })}</code></pre><p>然后我们就能测试一下链式调用：</p><pre><code>const p1 = new MyPromise((resolve, reject) =&gt; {  setTimeout(() =&gt; {    resolve(1)  }, 500);})p1  .then(res =&gt; {    console.log(res)    return 2  })  .then(res =&gt; {    console.log(res)    return 3  })  .then(res =&gt; {    console.log(res)  })//输出 1 2 3</code></pre><h2 id="4-值穿透-amp-状态已变更的情况"><a href="#4-值穿透-amp-状态已变更的情况" class="headerlink" title="4.值穿透 &amp; 状态已变更的情况"></a>4.值穿透 &amp; 状态已变更的情况</h2><p>我们已经初步完成了链式调用，但是对于 then() 方法，我们还要两个细节需要处理一下</p><ol><li><strong>值穿透</strong>：根据规范，如果 then() 接收的参数不是function，那么我们应该忽略它。如果没有忽略，当then()回调不为function时将会抛出异常，导致链式调用中断</li><li><strong>处理状态为resolve/reject的情况</strong>：其实我们上边 then() 的写法是对应状态为<code>padding</code>的情况，但是有些时候，resolve/reject 在 then() 之前就被执行（比如<code>Promise.resolve().then()</code>），如果这个时候还把then()回调push进resolve/reject的执行队列里，那么回调将不会被执行，因此对于状态已经变为<code>fulfilled</code>或<code>rejected</code>的情况，我们直接执行then回调：</li></ol><pre><code>// then方法,接收一个成功的回调和一个失败的回调  then(resolveFn, rejectFn) {    // 根据规范，如果then的参数不是function，则我们需要忽略它, 让链式调用继续往下执行    typeof resolveFn !== &#39;function&#39; ? resolveFn = value =&gt; value : null    typeof rejectFn !== &#39;function&#39; ? rejectFn = reason =&gt; {      throw new Error(reason instanceof Error? reason.message:reason);    } : null    // return一个新的promise    return new MyPromise((resolve, reject) =&gt; {      // 把resolveFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论      const fulfilledFn = value =&gt; {        try {          // 执行第一个(当前的)Promise的成功回调,并获取返回值          let x = resolveFn(value)          // 分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve          x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)        } catch (error) {          reject(error)        }      }      // reject同理      const rejectedFn  = error =&gt; {        try {          let x = rejectFn(error)          x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)        } catch (error) {          reject(error)        }      }      switch (this._status) {        // 当状态为pending时,把then回调push进resolve/reject执行队列,等待执行        case PENDING:          this._resolveQueue.push(fulfilledFn)          this._rejectQueue.push(rejectedFn)          break;        // 当状态已经变为resolve/reject时,直接执行then回调        case FULFILLED:          fulfilledFn(this._value)    // this._value是上一个then回调return的值(见完整版代码)          break;        case REJECTED:          rejectedFn(this._value)          break;      }    })  }</code></pre><h2 id="5-兼容同步任务"><a href="#5-兼容同步任务" class="headerlink" title="5.兼容同步任务"></a>5.兼容同步任务</h2><p>完成了then的链式调用以后，我们再处理一个前边的细节，然后放出完整代码。上文我们说过，Promise的执行顺序是<code>new Promise -&gt; then()收集回调 -&gt; resolve/reject执行回调</code>，这一顺序是建立在<strong>executor是异步任务</strong>的前提上的，如果executor是一个同步任务，那么顺序就会变成<code>new Promise -&gt; resolve/reject执行回调 -&gt; then()收集回调</code>，resolve的执行跑到then之前去了，为了兼容这种情况，我们给<code>resolve/reject</code>执行回调的操作包一个setTimeout，让它异步执行。</p><blockquote><p>这里插一句，有关这个setTimeout，其实还有一番学问。虽然规范没有要求回调应该被放进宏任务队列还是微任务队列，但其实Promise的默认实现是放进了微任务队列，我们的实现（包括大多数Promise手动实现和polyfill的转化）都是使用setTimeout放入了宏任务队列（当然我们也可以用MutationObserver模拟微任务）</p></blockquote><pre><code>//Promise/A+规定的三种状态const PENDING = &#39;pending&#39;const FULFILLED = &#39;fulfilled&#39;const REJECTED = &#39;rejected&#39;class MyPromise {  // 构造方法接收一个回调  constructor(executor) {    this._status = PENDING     // Promise状态    this._value = undefined    // 储存then回调return的值    this._resolveQueue = []    // 成功队列, resolve时触发    this._rejectQueue = []     // 失败队列, reject时触发    // 由于resolve/reject是在executor内部被调用, 因此需要使用箭头函数固定this指向, 否则找不到this._resolveQueue    let _resolve = (val) =&gt; {      //把resolve执行回调的操作封装成一个函数,放进setTimeout里,以兼容executor是同步代码的情况      const run = () =&gt; {        if(this._status !== PENDING) return   // 对应规范中的&quot;状态只能由pending到fulfilled或rejected&quot;        this._status = FULFILLED              // 变更状态        this._value = val                     // 储存当前value        // 这里之所以使用一个队列来储存回调,是为了实现规范要求的 &quot;then 方法可以被同一个 promise 调用多次&quot;        // 如果使用一个变量而非队列来储存回调,那么即使多次p1.then()也只会执行一次回调        while(this._resolveQueue.length) {              const callback = this._resolveQueue.shift()          callback(val)        }      }      setTimeout(run)    }    // 实现同resolve    let _reject = (val) =&gt; {      const run = () =&gt; {        if(this._status !== PENDING) return   // 对应规范中的&quot;状态只能由pending到fulfilled或rejected&quot;        this._status = REJECTED               // 变更状态        this._value = val                     // 储存当前value        while(this._rejectQueue.length) {          const callback = this._rejectQueue.shift()          callback(val)        }      }      setTimeout(run)    }    // new Promise()时立即执行executor,并传入resolve和reject    executor(_resolve, _reject)  }  // then方法,接收一个成功的回调和一个失败的回调  then(resolveFn, rejectFn) {    // 根据规范，如果then的参数不是function，则我们需要忽略它, 让链式调用继续往下执行    typeof resolveFn !== &#39;function&#39; ? resolveFn = value =&gt; value : null    typeof rejectFn !== &#39;function&#39; ? rejectFn = reason =&gt; {      throw new Error(reason instanceof Error? reason.message:reason);    } : null    // return一个新的promise    return new MyPromise((resolve, reject) =&gt; {      // 把resolveFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论      const fulfilledFn = value =&gt; {        try {          // 执行第一个(当前的)Promise的成功回调,并获取返回值          let x = resolveFn(value)          // 分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve          x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)        } catch (error) {          reject(error)        }      }      // reject同理      const rejectedFn  = error =&gt; {        try {          let x = rejectFn(error)          x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)        } catch (error) {          reject(error)        }      }      switch (this._status) {        // 当状态为pending时,把then回调push进resolve/reject执行队列,等待执行        case PENDING:          this._resolveQueue.push(fulfilledFn)          this._rejectQueue.push(rejectedFn)          break;        // 当状态已经变为resolve/reject时,直接执行then回调        case FULFILLED:          fulfilledFn(this._value)    // this._value是上一个then回调return的值(见完整版代码)          break;        case REJECTED:          rejectedFn(this._value)          break;      }    })  }}</code></pre><p>然后我们可以测试一下这个Promise：</p><pre><code>const p1 = new MyPromise((resolve, reject) =&gt; {  resolve(1)          //同步executor测试})p1  .then(res =&gt; {    console.log(res)    return 2          //链式调用测试  })  .then()             //值穿透测试  .then(res =&gt; {    console.log(res)    return new MyPromise((resolve, reject) =&gt; {      resolve(3)      //返回Promise测试    })  })  .then(res =&gt; {    console.log(res)    throw new Error(&#39;reject测试&#39;)   //reject测试  })  .then(() =&gt; {}, err =&gt; {    console.log(err)  })// 输出 // 1 // 2 // 3 // Error: reject测试</code></pre><p>到这里，我们已经实现了Promise的主要功能<code>(｀∀´)Ψ</code>剩下的几个方法都非常简单，我们顺手收拾掉：</p><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><blockquote><p><code>catch()方法</code>返回一个Promise，并且处理拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。</p></blockquote><pre><code>//catch方法其实就是执行一下then的第二个回调catch(rejectFn) {  return this.then(undefined, rejectFn)}</code></pre><h2 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h2><blockquote><p><code>finally()方法</code>返回一个Promise。在promise结束时，无论结果是fulfilled或者是rejected，都会执行指定的回调函数。在finally之后，还可以继续then。并且会将值原封不动的传递给后面的then</p></blockquote><pre><code>//finally方法finally(callback) {  return this.then(    value =&gt; MyPromise.resolve(callback()).then(() =&gt; value),             // MyPromise.resolve执行回调,并在then中return结果传递给后面的Promise    reason =&gt; MyPromise.resolve(callback()).then(() =&gt; { throw reason })  // reject同理  )}</code></pre><p>PS. 有同学问我<code>MyPromise.resolve(callback())</code>的意义，这里补充解释一下：这个写法其实涉及到一个<code>finally()</code>的使用细节，<strong>finally()如果return了一个reject状态的Promise，将会改变当前Promise的状态</strong>，这个<code>MyPromise.resolve</code>就用于改变Promise状态，在finally()没有返回reject态Promise或throw错误的情况下，去掉<code>MyPromise.resolve</code>也是一样的（欢迎大家向我提问，勘误的过程中也能很好地加深自己对Promise的理解，大家可以在各个交流群里直接@我）</p><blockquote><p>参考资料：<a href="https://www.jianshu.com/p/f0b94daf9bf7" target="_blank" rel="noopener">对 Promise.prototype.finally() 的粗浅理解</a></p></blockquote><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><blockquote><p><code>Promise.resolve(value)</code>方法返回一个以给定值解析后的Promise 对象。如果该值为promise，返回这个promise；如果这个值是thenable（即带有”then” 方法)），返回的promise会“跟随”这个thenable的对象，采用它的最终状态；否则返回的promise将以此值完成。此函数将类promise对象的多层嵌套展平。</p></blockquote><pre><code>//静态的resolve方法static resolve(value) {  if(value instanceof MyPromise) return value // 根据规范, 如果参数是Promise实例, 直接return这个实例  return new MyPromise(resolve =&gt; resolve(value))}</code></pre><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><blockquote><p><code>Promise.reject()</code>方法返回一个带有拒绝原因的Promise对象。</p></blockquote><pre><code>//静态的reject方法static reject(reason) {  return new MyPromise((resolve, reject) =&gt; reject(reason))}</code></pre><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><blockquote><p><code>Promise.all(iterable)</code>方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。</p></blockquote><pre><code>//静态的all方法static all(promiseArr) {  let index = 0  let result = []  return new MyPromise((resolve, reject) =&gt; {    promiseArr.forEach((p, i) =&gt; {      //Promise.resolve(p)用于处理传入值不为Promise的情况      MyPromise.resolve(p).then(        val =&gt; {          index++          result[i] = val          //所有then执行后, resolve结果          if(index === promiseArr.length) {            resolve(result)          }        },        err =&gt; {          //有一个Promise被reject时，MyPromise的状态变为reject          reject(err)        }      )    })  })}</code></pre><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><blockquote><p><code>Promise.race(iterable)</code>方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。</p></blockquote><pre><code>static race(promiseArr) {  return new MyPromise((resolve, reject) =&gt; {    //同时执行Promise,如果有一个Promise的状态发生改变,就变更新MyPromise的状态    for (let p of promiseArr) {      MyPromise.resolve(p).then(  //Promise.resolve(p)用于处理传入值不为Promise的情况        value =&gt; {          resolve(value)        //注意这个resolve是上边new MyPromise的        },        err =&gt; {          reject(err)        }      )    }  })}</code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre><code>//Promise/A+规定的三种状态const PENDING = &#39;pending&#39;const FULFILLED = &#39;fulfilled&#39;const REJECTED = &#39;rejected&#39;class MyPromise {  // 构造方法接收一个回调  constructor(executor) {    this._status = PENDING     // Promise状态    this._value = undefined    // 储存then回调return的值    this._resolveQueue = []    // 成功队列, resolve时触发    this._rejectQueue = []     // 失败队列, reject时触发    // 由于resolve/reject是在executor内部被调用, 因此需要使用箭头函数固定this指向, 否则找不到this._resolveQueue    let _resolve = (val) =&gt; {      //把resolve执行回调的操作封装成一个函数,放进setTimeout里,以兼容executor是同步代码的情况      const run = () =&gt; {        if(this._status !== PENDING) return   // 对应规范中的&quot;状态只能由pending到fulfilled或rejected&quot;        this._status = FULFILLED              // 变更状态        this._value = val                     // 储存当前value        // 这里之所以使用一个队列来储存回调,是为了实现规范要求的 &quot;then 方法可以被同一个 promise 调用多次&quot;        // 如果使用一个变量而非队列来储存回调,那么即使多次p1.then()也只会执行一次回调        while(this._resolveQueue.length) {              const callback = this._resolveQueue.shift()          callback(val)        }      }      setTimeout(run)    }    // 实现同resolve    let _reject = (val) =&gt; {      const run = () =&gt; {        if(this._status !== PENDING) return   // 对应规范中的&quot;状态只能由pending到fulfilled或rejected&quot;        this._status = REJECTED               // 变更状态        this._value = val                     // 储存当前value        while(this._rejectQueue.length) {          const callback = this._rejectQueue.shift()          callback(val)        }      }      setTimeout(run)    }    // new Promise()时立即执行executor,并传入resolve和reject    executor(_resolve, _reject)  }  // then方法,接收一个成功的回调和一个失败的回调  then(resolveFn, rejectFn) {    // 根据规范，如果then的参数不是function，则我们需要忽略它, 让链式调用继续往下执行    typeof resolveFn !== &#39;function&#39; ? resolveFn = value =&gt; value : null    typeof rejectFn !== &#39;function&#39; ? rejectFn = reason =&gt; {      throw new Error(reason instanceof Error? reason.message:reason);    } : null    // return一个新的promise    return new MyPromise((resolve, reject) =&gt; {      // 把resolveFn重新包装一下,再push进resolve执行队列,这是为了能够获取回调的返回值进行分类讨论      const fulfilledFn = value =&gt; {        try {          // 执行第一个(当前的)Promise的成功回调,并获取返回值          let x = resolveFn(value)          // 分类讨论返回值,如果是Promise,那么等待Promise状态变更,否则直接resolve          x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)        } catch (error) {          reject(error)        }      }      // reject同理      const rejectedFn  = error =&gt; {        try {          let x = rejectFn(error)          x instanceof MyPromise ? x.then(resolve, reject) : resolve(x)        } catch (error) {          reject(error)        }      }      switch (this._status) {        // 当状态为pending时,把then回调push进resolve/reject执行队列,等待执行        case PENDING:          this._resolveQueue.push(fulfilledFn)          this._rejectQueue.push(rejectedFn)          break;        // 当状态已经变为resolve/reject时,直接执行then回调        case FULFILLED:          fulfilledFn(this._value)    // this._value是上一个then回调return的值(见完整版代码)          break;        case REJECTED:          rejectedFn(this._value)          break;      }    })  }  //catch方法其实就是执行一下then的第二个回调  catch(rejectFn) {    return this.then(undefined, rejectFn)  }  //finally方法  finally(callback) {    return this.then(      value =&gt; MyPromise.resolve(callback()).then(() =&gt; value),             //执行回调,并returnvalue传递给后面的then      reason =&gt; MyPromise.resolve(callback()).then(() =&gt; { throw reason })  //reject同理    )  }  //静态的resolve方法  static resolve(value) {    if(value instanceof MyPromise) return value //根据规范, 如果参数是Promise实例, 直接return这个实例    return new MyPromise(resolve =&gt; resolve(value))  }  //静态的reject方法  static reject(reason) {    return new MyPromise((resolve, reject) =&gt; reject(reason))  }  //静态的all方法  static all(promiseArr) {    let index = 0    let result = []    return new MyPromise((resolve, reject) =&gt; {      promiseArr.forEach((p, i) =&gt; {        //Promise.resolve(p)用于处理传入值不为Promise的情况        MyPromise.resolve(p).then(          val =&gt; {            index++            result[i] = val            if(index === promiseArr.length) {              resolve(result)            }          },          err =&gt; {            reject(err)          }        )      })    })  }  //静态的race方法  static race(promiseArr) {    return new MyPromise((resolve, reject) =&gt; {      //同时执行Promise,如果有一个Promise的状态发生改变,就变更新MyPromise的状态      for (let p of promiseArr) {        MyPromise.resolve(p).then(  //Promise.resolve(p)用于处理传入值不为Promise的情况          value =&gt; {            resolve(value)        //注意这个resolve是上边new MyPromise的          },          err =&gt; {            reject(err)          }        )      }    })  }}</code></pre><p>洋洋洒洒150多行的代码，到这里，我们终于可以给Promise的实现做一个结尾了。我们从一个最简单的Promise使用实例开始，通过对调用流程的分析，根据观察者模式实现了Promise的大致骨架，然后依据Promise/A+规范填充代码，重点实现了then 的链式调用，最后完成了Promise的静态/实例方法。其实Promise实现在整体上并没有太复杂的思想，但我们日常使用的时候往往忽略了很多Promise细节，因而很难写出一个符合规范的Promise实现，源码的实现过程，其实也是对Promise使用细节重新学习的过程。</p><h1 id="async-await实现"><a href="#async-await实现" class="headerlink" title="async/await实现"></a>async/await实现</h1><p>虽然前边花了这么多篇幅讲Promise的实现，不过探索<code>async/await</code>暂停执行的机制才是我们的初衷，下面我们就来进入这一块的内容。同样地，开头我们点一下async/await的使用意义。 在多个回调依赖的场景中，尽管Promise通过链式调用取代了回调嵌套，但过多的链式调用可读性仍然不佳，流程控制也不方便，ES7 提出的async 函数，终于让 JS 对于异步操作有了终极解决方案，简洁优美地解决了以上两个问题。</p><blockquote><p>设想一个这样的场景，异步任务a-&gt;b-&gt;c之间存在依赖关系，如果我们通过then链式调用来处理这些关系，可读性并不是很好，如果我们想控制其中某个过程，比如在某些条件下，b不往下执行到c，那么也不是很方便控制</p></blockquote><pre><code>Promise.resolve(a)  .then(b =&gt; {    // do something  })  .then(c =&gt; {    // do something  })</code></pre><blockquote><p>但是如果通过async/await来实现这个场景，可读性和流程控制都会方便不少。</p></blockquote><pre><code>async () =&gt; {  const a = await Promise.resolve(a);  const b = await Promise.resolve(b);  const c = await Promise.resolve(c);}</code></pre><p>那么我们要如何实现一个async/await呢，首先我们要知道，<strong>async/await实际上是对Generator（生成器）的封装</strong>，是一个语法糖。由于Generator出现不久就被async/await取代了，很多同学对Generator比较陌生，因此我们先来看看Generator的用法：</p><blockquote><p>ES6 新引入了 Generator 函数，可以通过 yield 关键字，把函数的执行流挂起，通过next()方法可以切换到下一个状态，为改变执行流程提供了可能，从而为异步编程提供解决方案。</p></blockquote><pre><code>function* myGenerator() {  yield &#39;1&#39;  yield &#39;2&#39;  return &#39;3&#39;}const gen = myGenerator();  // 获取迭代器gen.next()  //{value: &quot;1&quot;, done: false}gen.next()  //{value: &quot;2&quot;, done: false}gen.next()  //{value: &quot;3&quot;, done: true}</code></pre><p>也可以通过给<code>next()</code>传参, 让yield具有返回值</p><pre><code>function* myGenerator() {  console.log(yield &#39;1&#39;)  //test1  console.log(yield &#39;2&#39;)  //test2  console.log(yield &#39;3&#39;)  //test3}// 获取迭代器const gen = myGenerator();gen.next()gen.next(&#39;test1&#39;)gen.next(&#39;test2&#39;)gen.next(&#39;test3&#39;)</code></pre><p>我们看到Generator的用法，应该️会感到很熟悉，<code>*/yield</code>和<code>async/await</code>看起来其实已经很相似了，它们都提供了暂停执行的功能，但二者又有三点不同：</p><ul><li><code>async/await</code>自带执行器，不需要手动调用next()就能自动执行下一步</li><li><code>async</code>函数返回值是Promise对象，而Generator返回的是生成器对象</li><li><code>await</code>能够返回Promise的resolve/reject的值</li></ul><p><strong>我们对async/await的实现，其实也就是对应以上三点封装Generator</strong></p><h2 id="1-自动执行"><a href="#1-自动执行" class="headerlink" title="1.自动执行"></a>1.自动执行</h2><p>我们先来看一下，对于这样一个Generator，手动执行是怎样一个流程</p><pre><code>function* myGenerator() {  yield Promise.resolve(1);  yield Promise.resolve(2);  yield Promise.resolve(3);}// 手动执行迭代器const gen = myGenerator()gen.next().value.then(val =&gt; {  console.log(val)  gen.next().value.then(val =&gt; {    console.log(val)    gen.next().value.then(val =&gt; {      console.log(val)    })  })})//输出1 2 3</code></pre><p>我们也可以通过给<code>gen.next()</code>传值的方式，让yield能返回resolve的值</p><pre><code>function* myGenerator() {  console.log(yield Promise.resolve(1))   //1  console.log(yield Promise.resolve(2))   //2  console.log(yield Promise.resolve(3))   //3}// 手动执行迭代器const gen = myGenerator()gen.next().value.then(val =&gt; {  // console.log(val)  gen.next(val).value.then(val =&gt; {    // console.log(val)    gen.next(val).value.then(val =&gt; {      // console.log(val)      gen.next(val)    })  })})</code></pre><p>显然，手动执行的写法看起来既笨拙又丑陋，我们希望生成器函数能自动往下执行，且yield能返回resolve的值，基于这两个需求，我们进行一个基本的封装，这里<code>async/await</code>是关键字，不能重写，我们用函数来模拟：</p><pre><code>function run(gen) {  var g = gen()                     //由于每次gen()获取到的都是最新的迭代器,因此获取迭代器操作要放在_next()之前,否则会进入死循环  function _next(val) {             //封装一个方法, 递归执行g.next()    var res = g.next(val)           //获取迭代器对象，并返回resolve的值    if(res.done) return res.value   //递归终止条件    res.value.then(val =&gt; {         //Promise的then方法是实现自动迭代的前提      _next(val)                    //等待Promise完成就自动执行下一个next，并传入resolve的值    })  }  _next()  //第一次执行}</code></pre><p>对于我们之前的例子，我们就能这样执行：</p><pre><code>function* myGenerator() {  console.log(yield Promise.resolve(1))   //1  console.log(yield Promise.resolve(2))   //2  console.log(yield Promise.resolve(3))   //3}run(myGenerator)</code></pre><p>这样我们就初步实现了一个<code>async/await</code>。上边的代码只有五六行，但并不是一下就能看明白的，我们之前用了四个例子来做铺垫，也是为了让读者更好地理解这段代码。 简单来说，我们封装了一个run方法，run方法里我们把执行下一步的操作封装成<code>_next()</code>，每次Promise.then()的时候都去执行<code>_next()</code>，实现自动迭代的效果。在迭代的过程中，我们还把resolve的值传入<code>gen.next()</code>，使得yield得以返回Promise的resolve的值</p><blockquote><p>这里插一句，是不是只有<code>.then方法</code>这样的形式才能完成我们自动执行的功能呢？答案是否定的，yield后边除了接Promise，还可以接<code>thunk函数</code>，thunk函数不是一个新东西，所谓thunk函数，就是<strong>单参的只接受回调的函数</strong>，详细介绍可以看<a href="https://user-gold-cdn.xitu.io/2020/3/15/170dc5e88df6c208" target="_blank" rel="noopener">阮一峰Thunk 函数的含义和用法</a>，无论是Promise还是thunk函数，其核心都是通过<strong>传入回调</strong>的方式来实现Generator的自动执行。thunk函数只作为一个拓展知识，理解有困难的同学也可以跳过这里，并不影响后续理解。</p></blockquote><h2 id="2-返回Promise-amp-异常处理"><a href="#2-返回Promise-amp-异常处理" class="headerlink" title="2.返回Promise &amp; 异常处理"></a>2.返回Promise &amp; 异常处理</h2><p>虽然我们实现了Generator的自动执行以及让yield返回resolve的值，但上边的代码还存在着几点问题：</p><ol><li><strong>需要兼容基本类型</strong>：这段代码能自动执行的前提是<code>yield</code>后面跟Promise，为了兼容后面跟着基本类型值的情况，我们需要把yield跟的内容(<code>gen().next.value</code>)都用<code>Promise.resolve()</code>转化一遍</li><li><strong>缺少错误处理</strong>：上边代码里的Promise如果执行失败，就会导致后续执行直接中断，我们需要通过调用<code>Generator.prototype.throw()</code>，把错误抛出来，才能被外层的try-catch捕获到</li><li><strong>返回值是Promise</strong>：<code>async/await</code>的返回值是一个Promise，我们这里也需要保持一致，给返回值包一个Promise</li></ol><p>我们改造一下run方法：</p><pre><code>function run(gen) {  //把返回值包装成promise  return new Promise((resolve, reject) =&gt; {    var g = gen()    function _next(val) {      //错误处理      try {        var res = g.next(val)       } catch(err) {        return reject(err);       }      if(res.done) {        return resolve(res.value);      }      //res.value包装为promise，以兼容yield后面跟基本类型的情况      Promise.resolve(res.value).then(        val =&gt; {          _next(val);        },         err =&gt; {          //抛出错误          g.throw(err)        });    }    _next();  });}</code></pre><p>然后我们可以测试一下：</p><pre><code>function* myGenerator() {  try {    console.log(yield Promise.resolve(1))     console.log(yield 2)   //2    console.log(yield Promise.reject(&#39;error&#39;))  } catch (error) {    console.log(error)  }}const result = run(myGenerator)     //result是一个Promise//输出 1 2 error</code></pre><p>到这里，一个<code>async/await</code>的实现基本完成了。最后我们可以看一下babel对async/await的转换结果，其实整体的思路是一样的，但是写法稍有不同：</p><pre><code>//相当于我们的run()function _asyncToGenerator(fn) {  // return一个function，和async保持一致。我们的run直接执行了Generator，其实是不太规范的  return function() {    var self = this    var args = arguments    return new Promise(function(resolve, reject) {      var gen = fn.apply(self, args);      //相当于我们的_next()      function _next(value) {        asyncGeneratorStep(gen, resolve, reject, _next, _throw, &#39;next&#39;, value);      }      //处理异常      function _throw(err) {        asyncGeneratorStep(gen, resolve, reject, _next, _throw, &#39;throw&#39;, err);      }      _next(undefined);    });  };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {  try {    var info = gen[key](arg);    var value = info.value;  } catch (error) {    reject(error);    return;  }  if (info.done) {    resolve(value);  } else {    Promise.resolve(value).then(_next, _throw);  }}</code></pre><p>使用方式：</p><pre><code>const foo = _asyncToGenerator(function* () {  try {    console.log(yield Promise.resolve(1))   //1    console.log(yield 2)                    //2    return &#39;3&#39;  } catch (error) {    console.log(error)  }})foo().then(res =&gt; {  console.log(res)                          //3})</code></pre><p>有关<code>async/await</code>的实现，到这里就告一段落了。但是直到结尾，我们也不知道await到底是如何暂停执行的，有关await暂停执行的秘密，我们还要到Generator的实现中去寻找答案</p><h1 id="Generator实现"><a href="#Generator实现" class="headerlink" title="Generator实现"></a>Generator实现</h1><p>我们从一个简单的Generator使用实例开始，一步步探究Generator的实现原理：</p><pre><code>function* foo() {  yield &#39;result1&#39;  yield &#39;result2&#39;  yield &#39;result3&#39;}const gen = foo()console.log(gen.next().value)console.log(gen.next().value)console.log(gen.next().value)</code></pre><p>我们可以在<a href="https://babeljs.io/repl/#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=GYVwdgxgLglg9mAVAAmHOAKAlMg3gKGWQE8YBTAGwBNkByAJzIGcQKoBGWwk86uxlmwBMXIqUo0GzVlADMXAL7d8EBEyjIA5mTDIAvKnTYVauBTIA6CnE0ZtYC2DIAPKNgsA3AIYUQZLCZgTGaW1rb2ji5uWJ4-fgGqQSFWNnY6ka7u3r7-QA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.5.5&externalPlugins=" target="_blank" rel="noopener">babel官网</a>上在线转化这段代码，看看ES5环境下是如何实现Generator的：</p><pre><code>&quot;use strict&quot;;var _marked =/*#__PURE__*/regeneratorRuntime.mark(foo);function foo() {  return regeneratorRuntime.wrap(function foo$(_context) {    while (1) {      switch (_context.prev = _context.next) {        case 0:          _context.next = 2;          return &#39;result1&#39;;        case 2:          _context.next = 4;          return &#39;result2&#39;;        case 4:          _context.next = 6;          return &#39;result3&#39;;        case 6:        case &quot;end&quot;:          return _context.stop();      }    }  }, _marked);}var gen = foo();console.log(gen.next().value);console.log(gen.next().value);console.log(gen.next().value);</code></pre><p>代码咋一看不长，但如果仔细观察会发现有两个不认识的东西 —— <code>regeneratorRuntime.mark</code>和<code>regeneratorRuntime.wrap</code>，这两者其实是 regenerator-runtime 模块里的两个方法，regenerator-runtime 模块来自facebook的 regenerator 模块，完整代码在<a href="https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js" target="_blank" rel="noopener">runtime.js</a>，这个runtime有700多行…-_-||，因此我们不能全讲，不太重要的部分我们就简单地过一下，重点讲解暂停执行相关部分代码</p><blockquote><p>个人觉得啃源码的效果不是很好，建议读者拉到末尾先看结论和简略版实现，源码作为一个补充理解</p></blockquote><h2 id="regeneratorRuntime-mark"><a href="#regeneratorRuntime-mark" class="headerlink" title="regeneratorRuntime.mark()"></a>regeneratorRuntime.mark()</h2><p><code>regeneratorRuntime.mark(foo)</code>这个方法在第一行被调用，我们先看一下runtime里mark()方法的定义</p><pre><code>//runtime.js里的定义稍有不同，多了一些判断，以下是编译后的代码runtime.mark = function(genFun) {  genFun.__proto__ = GeneratorFunctionPrototype;  genFun.prototype = Object.create(Gp);  return genFun;};</code></pre><p>这里边<code>GeneratorFunctionPrototype</code>和<code>Gp</code>我们都不认识，他们被定义在runtime里，不过没关系，我们只要知道<code>mark()方法</code>为生成器函数（foo）绑定了一系列原型就可以了，这里就简单地过了</p><h2 id="regeneratorRuntime-wrap"><a href="#regeneratorRuntime-wrap" class="headerlink" title="regeneratorRuntime.wrap()"></a>regeneratorRuntime.wrap()</h2><p>从上面babel转化的代码我们能看到，执行<code>foo()</code>，其实就是执行<code>wrap()</code>，那么这个方法起到什么作用呢，他想包装一个什么东西呢，我们先来看看wrap方法的定义：</p><pre><code>//runtime.js里的定义稍有不同，多了一些判断，以下是编译后的代码function wrap(innerFn, outerFn, self) {  var generator = Object.create(outerFn.prototype);  var context = new Context([]);  generator._invoke = makeInvokeMethod(innerFn, self, context);  return generator;}</code></pre><p>wrap方法先是创建了一个generator，并继承<code>outerFn.prototype</code>；然后new了一个<code>context对象</code>；<code>makeInvokeMethod方法</code>接收<code>innerFn(对应foo$)</code>、<code>context</code>和<code>this</code>，并把返回值挂到<code>generator._invoke</code>上；最后return了generator。<strong>其实wrap()相当于是给generator增加了一个_invoke方法</strong></p><p>这段代码肯定让人产生很多疑问，outerFn.prototype是什么，Context又是什么，makeInvokeMethod又做了哪些操作。下面我们就来一一解答：</p><blockquote><p><code>outerFn.prototype</code>其实就是<code>genFun.prototype</code>，</p></blockquote><p>这个我们结合一下上面的代码就能知道</p><blockquote><p><code>context</code>可以直接理解为这样一个全局对象，用于储存各种状态和上下文：</p></blockquote><pre><code>var ContinueSentinel = {};var context = {  done: false,  method: &quot;next&quot;,  next: 0,  prev: 0,  abrupt: function(type, arg) {    var record = {};    record.type = type;    record.arg = arg;    return this.complete(record);  },  complete: function(record, afterLoc) {    if (record.type === &quot;return&quot;) {      this.rval = this.arg = record.arg;      this.method = &quot;return&quot;;      this.next = &quot;end&quot;;    }    return ContinueSentinel;  },  stop: function() {    this.done = true;    return this.rval;  }};</code></pre><blockquote><pre><code>makeInvokeMethod`的定义如下，它return了一个`invoke方法`，invoke用于判断当前状态和执行下一步，其实就是我们调用的`next()</code></pre></blockquote><pre><code>//以下是编译后的代码function makeInvokeMethod(innerFn, context) {  // 将状态置为start  var state = &quot;start&quot;;  return function invoke(method, arg) {    // 已完成    if (state === &quot;completed&quot;) {      return { value: undefined, done: true };    }    context.method = method;    context.arg = arg;    // 执行中    while (true) {      state = &quot;executing&quot;;      var record = {        type: &quot;normal&quot;,        arg: innerFn.call(self, context)    // 执行下一步,并获取状态(其实就是switch里边return的值)      };      if (record.type === &quot;normal&quot;) {        // 判断是否已经执行完成        state = context.done ? &quot;completed&quot; : &quot;yield&quot;;        // ContinueSentinel其实是一个空对象,record.arg === {}则跳过return进入下一个循环        // 什么时候record.arg会为空对象呢, 答案是没有后续yield语句或已经return的时候,也就是switch返回了空值的情况(跟着上面的switch走一下就知道了)        if (record.arg === ContinueSentinel) {          continue;        }        // next()的返回值        return {          value: record.arg,          done: context.done        };      }    }  };}</code></pre><blockquote><p>为什么<code>generator._invoke</code>实际上就是<code>gen.next</code>呢，因为在runtime对于next()的定义中，next()其实就return了_invoke方法</p></blockquote><pre><code>// Helper for defining the .next, .throw, and .return methods of the// Iterator interface in terms of a single ._invoke method.function defineIteratorMethods(prototype) {    [&quot;next&quot;, &quot;throw&quot;, &quot;return&quot;].forEach(function(method) {      prototype[method] = function(arg) {        return this._invoke(method, arg);      };    });}defineIteratorMethods(Gp);</code></pre><h2 id="低配实现-amp-调用流程分析"><a href="#低配实现-amp-调用流程分析" class="headerlink" title="低配实现 &amp; 调用流程分析"></a>低配实现 &amp; 调用流程分析</h2><p>这么一遍源码下来，估计很多读者还是懵逼的，毕竟源码中纠集了很多概念和封装，一时半会不好完全理解，让我们跳出源码，实现一个简单的Generator，然后再回过头看源码，会得到更清晰的认识</p><pre><code>// 生成器函数根据yield语句将代码分割为switch-case块，后续通过切换_context.prev和_context.next来分别执行各个casefunction gen$(_context) {  while (1) {    switch (_context.prev = _context.next) {      case 0:        _context.next = 2;        return &#39;result1&#39;;      case 2:        _context.next = 4;        return &#39;result2&#39;;      case 4:        _context.next = 6;        return &#39;result3&#39;;      case 6:      case &quot;end&quot;:        return _context.stop();    }  }}// 低配版context  var context = {  next:0,  prev: 0,  done: false,  stop: function stop () {    this.done = true  }}// 低配版invokelet gen = function() {  return {    next: function() {      value = context.done ? undefined: gen$(context)      done = context.done      return {        value,        done      }    }  }} // 测试使用var g = gen() g.next()  // {value: &quot;result1&quot;, done: false}g.next()  // {value: &quot;result2&quot;, done: false}g.next()  // {value: &quot;result3&quot;, done: false}g.next()  // {value: undefined, done: true}</code></pre><p>这段代码并不难理解，我们分析一下调用流程：</p><ol><li>我们定义的<code>function*</code>生成器函数被转化为以上代码</li><li>转化后的代码分为三大块：<ul><li><code>gen$(_context)</code>由yield分割生成器函数代码而来</li><li><code>context对象</code>用于储存函数执行上下文</li><li><code>invoke()方法</code>定义next()，用于执行gen$(_context)来跳到下一步</li></ul></li><li>当我们调用<code>g.next()</code>，就相当于调用<code>invoke()方法</code>，执行<code>gen$(_context)</code>，进入switch语句，switch根据context的标识，执行对应的case块，return对应结果</li><li>当生成器函数运行到末尾（没有下一个yield或已经return），switch匹配不到对应代码块，就会return空值，这时<code>g.next()</code>返回<code>{value: undefined, done: true}</code></li></ol><p>从中我们可以看出，<strong>Generator实现的核心在于<code>上下文的保存</code>，函数并没有真的被挂起，每一次yield，其实都执行了一遍传入的生成器函数，只是在这个过程中间用了一个context对象储存上下文，使得每次执行生成器函数的时候，都可以从上一个执行结果开始执行，看起来就像函数被挂起了一样</strong></p><h1 id="总结-amp-致谢"><a href="#总结-amp-致谢" class="headerlink" title="总结 &amp; 致谢"></a>总结 &amp; 致谢</h1><p>有关Promise、async/await、Generator的原理就实现到这里了，感谢大家能够跟我一起走完全程，不知不觉，我们花了近9千字来讲述有关异步编程的故事，异步编程的世界环环相扣，一开始，笔者只是出于对await挂起机制的好奇，后来，从一个 “await是如何实现暂停执行” 的小问题，引出了对异步编程的一系列思考和实现原理。三者的实现，其实也是前端异步编程一步步演化推进的过程。</p><p>成文过程中得到很多大佬的帮助，这四篇参考文章都是我阅读了很多相关文章后精选的四篇，建议大家结合阅读，大佬们写的比我好很多，另外感谢冴羽大佬在Generator机制上给予的解惑~</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux/react-redux</title>
      <link href="/2020/06/20/redux-react-redux/"/>
      <url>/2020/06/20/redux-react-redux/</url>
      
        <content type="html"><![CDATA[<p>其实笔者本来没有redux相关的行文计划，不过公司内部最近有同事作了redux相关的技术分享,而笔者承担了一部分文章评审的任务，在评审的过程中，笔者花了相当的精力时间来查阅资料和实现代码，前后积攒了几千字的笔记，对redux也有了一份心得见解，于是顺手写就本文，希望能给大家带来些一些启发和思考Thanks♪(･ω·)ﾉ经过本文的学习，读者应该能够学习理解：</p><ol><li><code>redux</code>的设计思路及实现原理</li><li><code>react-redux</code>的设计思路及实现原理</li><li><code>redux中间件</code>的设计思路及实现原理</li></ol><h2 id="一-redux的实现"><a href="#一-redux的实现" class="headerlink" title="一. redux的实现"></a>一. redux的实现</h2><p>在一切开始之前，我们首先要回答一个问题：为什么我们需要redux，redux为我们解决了什么问题？只有回答了这个问题，我们才能把握redux的设计思路。</p><p>React作为一个组件化开发框架，组件之间存在大量通信，有时这些通信跨越多个组件，或者多个组件之间共享一套数据，简单的父子组件间传值不能满足我们的需求，自然而然地，我们需要有一个地方存取和操作这些公共状态。而redux就为我们提供了一种管理公共状态的方案，我们后续的设计实现也将围绕这个需求来展开。</p><p>我们思考一下如何管理公共状态：既然是公共状态，那么就直接把公共状态提取出来好了。我们创建一个store.js文件，然后直接在里边存放公共的state，其他组件只要引入这个store就可以存取共用状态了。</p><pre><code>const state = {        count: 0}</code></pre><p>我们在store里存放一个公共状态count，组件在import了store后就可以操作这个count。这是最直接的store，当然我们的store肯定不能这么设计，原因主要是两点：</p><p><strong>1. 容易误操作</strong></p><p>比如说，有人一个不小心把store赋值了{}，清空了store，或者误修改了其他组件的数据，那显然不太安全，出错了也很难排查，因此我们需要<strong>有条件地</strong>操作store，防止使用者直接修改store的数据。</p><p><strong>2. 可读性很差</strong></p><p>JS是一门极其依赖语义化的语言，试想如果在代码中不经注释直接修改了公用的state，以后其他人维护代码得多懵逼，为了搞清楚修改state的含义还得根据上下文推断，所以我们最好是给每个操作<strong>起个名字</strong>。</p><blockquote><p>项目交接</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/10/16eeebdea0891821?imageslim" alt="img"></p><p>我们重新思考一下如何设计这个<strong>公共状态管理器</strong>，根据我们上面的分析，我们希望公共状态既能够被全局访问到，又是私有的不能被直接修改，思考一下，<strong>闭包</strong>是不是就就正好符合这两条要求，因此我们会把公共状态设计成闭包（对闭包理解有困难的同学也可以跳过闭包，这并不影响后续理解）</p><p>既然我们要存取状态，那么肯定要有<strong>getter</strong>和<strong>setter</strong>，此外当状态发生改变时，我们得进行广播，通知组件状态发生了变更。这不就和redux的三个API：<code>getState、dispatch、subscribe</code>对应上了吗。我们用几句代码勾勒出store的大致形状：</p><pre><code>export const createStore = () =&gt; {        let currentState = {}       // 公共状态        function getState() {}      // getter        function dispatch() {}      // setter        function subscribe() {}     // 发布订阅        return { getState, dispatch, subscribe }}</code></pre><h3 id="1-getState实现"><a href="#1-getState实现" class="headerlink" title="1. getState实现"></a>1. getState实现</h3><p><code>getState()</code>的实现非常简单，返回当前状态即可：</p><pre><code>export const createStore = () =&gt; {        let currentState = {}       // 公共状态        function getState() {       // getter                return currentState        }        function dispatch() {}      // setter        function subscribe() {}     // 发布订阅        return { getState, dispatch, subscribe }}</code></pre><h3 id="2-dispatch实现"><a href="#2-dispatch实现" class="headerlink" title="2.dispatch实现"></a>2.dispatch实现</h3><p>但是<code>dispatch()</code>的实现我们得思考一下，经过上面的分析，我们的目标是<strong>有条件地、具名地</strong>修改store的数据，那么我们要如何实现这两点呢？我们已经知道，在使用dispatch的时候，我们会给dispatch()传入一个action对象，这个对象包括我们要修改的state以及这个操作的名字(actionType)，根据type的不同，store会修改对应的state。我们这里也沿用这种设计：</p><pre><code>export const createStore = () =&gt; {        let currentState = {}        function getState() {                return currentState        }        function dispatch(action) {                switch (action.type) {                        case &#39;plus&#39;:                        currentState = {                                 ...state,                                 count: currentState.count + 1                        }                }        }        function subscribe() {}        return { getState, subscribe, dispatch }}</code></pre><p>我们把对actionType的判断写在了dispatch中，这样显得很臃肿，也很笨拙，于是我们想到把这部分修改state的规则抽离出来放到外面，这就是我们熟悉的<strong><code>reducer</code>。</strong>我们修改一下代码，让reducer从外部传入：</p><pre><code>import { reducer } from &#39;./reducer&#39;export const createStore = (reducer) =&gt; {        let currentState = {}         function getState() {                return currentState        }        function dispatch(action) {                 currentState = reducer(currentState, action)      }        function subscribe() {}        return { getState, dispatch, subscribe }}</code></pre><p>然后我们创建一个reducer.js文件，写我们的reducer</p><pre><code>//reducer.jsconst initialState = {        count: 0}export function reducer(state = initialState, action) {        switch(action.type) {              case &#39;plus&#39;:                return {                        ...state,                                count: state.count + 1                }              case &#39;subtract&#39;:                return {                        ...state,                        count: state.count - 1                }              default:                return initialState        }}</code></pre><p>代码写到这里，我们可以验证一下<code>getState</code>和<code>dispatch</code>：</p><pre><code>//store.jsimport { reducer } from &#39;./reducer&#39;export const createStore = (reducer) =&gt; {        let currentState = {}            function getState() {                        return currentState            }            function dispatch(action) {                        currentState = reducer(currentState, action)      }            function subscribe() {}            return { getState, subscribe, dispatch }}const store = createStore(reducer)  //创建storestore.dispatch({ type: &#39;plus&#39; })    //执行加法操作,给count加1console.log(store.getState())       //获取state</code></pre><p>运行代码，我们会发现，打印得到的state是：{ count: NaN }，这是由于store里初始数据为空，state.count + 1实际上是underfind+1，输出了NaN，所以我们得先进行store数据初始化，我们在执行dispatch({ type: ‘plus’ })之前先进行一次初始化的dispatch，这个dispatch的actionType可以随便填，只要不和已有的type重复，让reducer里的switch能走到default去初始化store就行了：</p><pre><code>import { reducer } from &#39;./reducer&#39;export const createStore = (reducer) =&gt; {            let currentState = {}            function getState() {                        return currentState            }            function dispatch(action) {                        currentState = reducer(currentState, action)            }            function subscribe() {}        dispatch({ type: &#39;@@REDUX_INIT&#39; })  //初始化store数据            return { getState, subscribe, dispatch }}const store = createStore(reducer)      //创建storestore.dispatch({ type: &#39;plus&#39; })        //执行加法操作,给count加1console.log(store.getState())           //获取state</code></pre><p>运行代码，我们就能打印到的正确的state：{ count: 1 }</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/12/16ef781577deb645?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h3 id="3-subscribe实现"><a href="#3-subscribe实现" class="headerlink" title="3.subscribe实现"></a>3.subscribe实现</h3><p>尽管我们已经能够存取公用state，但store的变化并不会直接引起视图的更新，我们需要监听store的变化，这里我们应用一个设计模式——观察者模式，观察者模式被广泛运用于监听事件实现（有些地方写的是发布订阅模式，但我个人认为这里称为观察者模式更准确，有关观察者和发布订阅的区别，讨论有很多，读者可以搜一下）</p><p>所谓观察者模式，概念也很简单：观察者监听被观察者的变化，被观察者发生改变时，通知所有的观察者。那么我们如何实现这种监听-通知的功能呢，为了照顾还不熟悉观察者模式实现的同学，我们先跳出redux，写一段简单的观察者模式实现代码：</p><pre><code>//观察者class Observer {        constructor (fn) {              this.update = fn        }}//被观察者class Subject {        constructor() {                this.observers = []          //观察者队列        }        addObserver(observer) {                  this.observers.push(observer)//往观察者队列添加观察者        }        notify() {                       //通知所有观察者,实际上是把观察者的update()都执行了一遍               this.observers.forEach(observer =&gt; {                    observer.update()            //依次取出观察者,并执行观察者的update方法                })        }}var subject = new Subject()       //被观察者const update = () =&gt; {console.log(&#39;被观察者发出通知&#39;)}  //收到广播时要执行的方法var ob1 = new Observer(update)    //观察者1var ob2 = new Observer(update)    //观察者2subject.addObserver(ob1)          //观察者1订阅subject的通知subject.addObserver(ob2)          //观察者2订阅subject的通知subject.notify()                  //发出广播,执行所有观察者的update方法</code></pre><p>解释一下上面的代码：观察者对象有一个<code>update</code>方法(收到通知后要执行的方法)，我们想要在被观察者发出通知后，执行该方法；被观察者拥有<code>addObserver</code>和<code>notify</code>方法，addObserver用于收集观察者，其实就是将观察者们的update方法加入一个队列，而当notify被执行的时候，就从队列中取出所有观察者的update方法并执行，这样就实现了通知的功能。我们redux的监听-通知功能也将按照这种实现思路来实现subscribe：</p><p>有了上面观察者模式的例子，subscribe的实现应该很好理解，这里把dispatch和notify做了合并，我们每次dispatch，都进行广播，通知组件store的状态发生了变更。</p><pre><code>import { reducer } from &#39;./reducer&#39;export const createStore = (reducer) =&gt; {            let currentState = {}            let observers = []             //观察者队列            function getState() {                        return currentState            }            function dispatch(action) {                        currentState = reducer(currentState, action)                        observers.forEach(fn =&gt; fn())            }            function subscribe(fn) {                        observers.push(fn)            }            dispatch({ type: &#39;@@REDUX_INIT&#39; })  //初始化store数据            return { getState, subscribe, dispatch }}</code></pre><p>我们来试一下这个subscribe（这里就不创建组件再引入store再subscribe了，直接在store.js中模拟一下两个组件使用subscribe订阅store变化）：</p><pre><code>import { reducer } from &#39;./reducer&#39;export const createStore = (reducer) =&gt; {            let currentState = {}            let observers = []             //观察者队列            function getState() {                        return currentState            }            function dispatch(action) {                        currentState = reducer(currentState, action)                        observers.forEach(fn =&gt; fn())            }            function subscribe(fn) {                        observers.push(fn)            }                dispatch({ type: &#39;@@REDUX_INIT&#39; })  //初始化store数据            return { getState, subscribe, dispatch }}const store = createStore(reducer)       //创建storestore.subscribe(() =&gt; { console.log(&#39;组件1收到store的通知&#39;) })store.subscribe(() =&gt; { console.log(&#39;组件2收到store的通知&#39;) })store.dispatch({ type: &#39;plus&#39; })         //执行dispatch，触发store的通知</code></pre><p>控制台成功输出store.subscribe()传入的回调的执行结果：</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/12/16ef7aa713fe4f26?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>到这里，一个简单的redux就已经完成，在redux真正的源码中还加入了入参校验等细节，但总体思路和上面的基本相同。</p><p>我们已经可以在组件里引入store进行状态的存取以及订阅store变化，数一下，正好十行代码(｀∀´)Ψ。但是我们看一眼右边的进度条，就会发现事情并不简单，篇幅到这里才过了三分之一。尽管说我们已经实现了redux，但coder们并不满足于此，我们在使用store时，需要在每个组件中引入store，然后getState，然后dispatch，还有subscribe，代码比较冗余，我们需要合并一些重复操作，而其中一种简化合并的方案，就是我们熟悉的<strong>react-redux</strong>。</p><h2 id="二-react-redux的实现"><a href="#二-react-redux的实现" class="headerlink" title="二. react-redux的实现"></a>二. react-redux的实现</h2><p>上文我们说到，一个组件如果想从store存取公用状态，需要进行四步操作：import引入store、getState获取状态、dispatch修改状态、subscribe订阅更新，代码相对冗余，我们想要合并一些重复的操作，而react-redux就提供了一种合并操作的方案：react-redux提供<code>Provider</code>和<code>connect</code>两个API，Provider将store放进this.context里，省去了import这一步，connect将getState、dispatch合并进了this.props，并自动订阅更新，简化了另外三步，下面我们来看一下如何实现这两个API：</p><h3 id="1-Provider实现"><a href="#1-Provider实现" class="headerlink" title="1. Provider实现"></a>1. Provider实现</h3><p>我们先从比较简单的<code>Provider</code>开始实现，Provider是一个组件，接收store并放进全局的<code>context</code>对象，至于为什么要放进context，后面我们实现connect的时候就会明白。下面我们创建Provider组件，并把store放进context里，使用context这个API时有一些固定写法(有关context的用法可以查看<a href="https://juejin.im/post/5a90e0545188257a63112977" target="_blank" rel="noopener">这篇文章</a>)</p><pre><code>import React from &#39;react&#39;import PropTypes from &#39;prop-types&#39;export class Provider extends React.Component {      // 需要声明静态属性childContextTypes来指定context对象的属性,是context的固定写法      static childContextTypes = {            store: PropTypes.object      }     // 实现getChildContext方法,返回context对象,也是固定写法      getChildContext() {            return { store: this.store }      }      constructor(props, context) {            super(props, context)            this.store = props.store      }      // 渲染被Provider包裹的组件      render() {            return this.props.children      }}</code></pre><p>完成Provider后，我们就能在组件中通过this.context.store这样的形式取到store，不需要再单独import store。</p><h3 id="2-connect实现"><a href="#2-connect实现" class="headerlink" title="2. connect实现"></a>2. connect实现</h3><p>下面我们来思考一下如何实现<code>connect</code>，我们先回顾一下connect的使用方法：</p><pre><code>connect(mapStateToProps, mapDispatchToProps)(App)</code></pre><p>我们已经知道，connect接收mapStateToProps、mapDispatchToProps两个方法，然后返回一个高阶函数，这个高阶函数接收一个组件，返回一个高阶组件（其实就是给传入的组件增加一些属性和功能）connect根据传入的map，将state和dispatch(action)挂载子组件的props上，我们直接放出connect的实现代码，寥寥几行，并不复杂：</p><pre><code>export function connect(mapStateToProps, mapDispatchToProps) {        return function(Component) {              class Connect extends React.Component {                    componentDidMount() {                          //从context获取store并订阅更新                          this.context.store.subscribe(this.handleStoreChange.bind(this));                    }                   handleStoreChange() {                          // 触发更新                          // 触发的方法有多种,这里为了简洁起见,直接forceUpdate强制更新,读者也可以通过setState来触发子组件更新                          this.forceUpdate()                    }                    render() {                          return (                                &lt;Component                                      // 传入该组件的props,需要由connect这个高阶组件原样传回原组件                                      { ...this.props }                                      // 根据mapStateToProps把state挂到this.props上                                      { ...mapStateToProps(this.context.store.getState()) }                                       // 根据mapDispatchToProps把dispatch(action)挂到this.props上                                      { ...mapDispatchToProps(this.context.store.dispatch) }                                     /&gt;                              )                    }              }              //接收context的固定写法              Connect.contextTypes = {                    store: PropTypes.object              }              return Connect        }}</code></pre><p>写完了connect的代码，我们有两点需要解释一下：</p><p>\1. Provider的意义：我们审视一下connect的代码，其实context不过是给connect提供了获取store的途径，我们在connect中直接import store完全可以取代context。那么Provider存在的意义是什么，其实笔者也想过一阵子，后来才想起…上面这个connect是自己写的，当然可以直接import store，但react-redux的connect是封装的，对外只提供api，所以需要让Provider传入store。</p><p>\2. connect中的装饰器模式：回顾一下connect的调用方式：<code>connect(mapStateToProps, mapDispatchToProps)(App)</code>其实connect完全可以把App跟着mapStateToProps一起传进去，看似没必要return一个函数再传入App，为什么react-redux要这样设计，react-redux作为一个被广泛使用的模块，其设计肯定有它的深意。</p><p>其实connect这种设计，是<strong>装饰器模式</strong>的实现，所谓装饰器模式，简单地说就是对类的一个包装，动态地拓展类的功能。connect以及React中的高阶组件（HoC）都是这一模式的实现。除此之外，也有更直接的原因：这种设计能够兼容ES7的<code>装饰器(Decorator)</code>，使得我们可以用@connect这样的方式来简化代码，有关@connect的使用可以看这篇<a href="https://www.jianshu.com/p/d07ccef9f4f0" target="_blank" rel="noopener"></a>：</p><pre><code>//普通connect使用class App extends React.Component{    render(){        return &lt;div&gt;hello&lt;/div&gt;    }}function mapStateToProps(state){    return state.main}function mapDispatchToProps(dispatch){    return bindActionCreators(action,dispatch)}export default connect(mapStateToProps,mapDispatchToProps)(App)</code></pre><pre><code>//使用装饰器简化@connect(  state=&gt;state.main,  dispatch=&gt;bindActionCreators(action,dispatch))class App extends React.Component{    render(){        return &lt;div&gt;hello&lt;/div&gt;    }}</code></pre><p>写完了react-redux，我们可以写个demo来测试一下：使用<code>create-react-app</code>创建一个项目，删掉无用的文件，并创建store.js、reducer.js、react-redux.js来分别写我们redux和react-redux的代码，index.js是项目的入口文件，在App.js中我们简单的写一个计数器，点击按钮就派发一个dispatch，让store中的count加一，页面上显示这个count。最后文件目录和代码如下：</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/20/16f21fb249ffba11?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><pre><code>// store.jsexport const createStore = (reducer) =&gt; {        let currentState = {}        let observers = []             //观察者队列        function getState() {                return currentState        }        function dispatch(action) {                currentState = reducer(currentState, action)               observers.forEach(fn =&gt; fn())        }        function subscribe(fn) {                observers.push(fn)        }        dispatch({ type: &#39;@@REDUX_INIT&#39; }) //初始化store数据        return { getState, subscribe, dispatch }}</code></pre><pre><code>//reducer.jsconst initialState = {        count: 0}export function reducer(state = initialState, action) {        switch(action.type) {              case &#39;plus&#39;:                return {                        ...state,                        count: state.count + 1                }              case &#39;subtract&#39;:                return {                        ...state,                        count: state.count - 1                }              default:                return initialState        }}</code></pre><pre><code>//react-redux.jsimport React from &#39;react&#39;import PropTypes from &#39;prop-types&#39;export class Provider extends React.Component {      // 需要声明静态属性childContextTypes来指定context对象的属性,是context的固定写法      static childContextTypes = {            store: PropTypes.object      }      // 实现getChildContext方法,返回context对象,也是固定写法      getChildContext() {            return { store: this.store }      }      constructor(props, context) {            super(props, context)            this.store = props.store      }      // 渲染被Provider包裹的组件      render() {            return this.props.children      }}export function connect(mapStateToProps, mapDispatchToProps) {        return function(Component) {          class Connect extends React.Component {                componentDidMount() {          //从context获取store并订阅更新                      this.context.store.subscribe(this.handleStoreChange.bind(this));                }                handleStoreChange() {                      // 触发更新                      // 触发的方法有多种,这里为了简洁起见,直接forceUpdate强制更新,读者也可以通过setState来触发子组件更新                      this.forceUpdate()                }                render() {                      return (                            &lt;Component                                  // 传入该组件的props,需要由connect这个高阶组件原样传回原组件                                  { ...this.props }                                  // 根据mapStateToProps把state挂到this.props上                                  { ...mapStateToProps(this.context.store.getState()) }                                   // 根据mapDispatchToProps把dispatch(action)挂到this.props上                                  { ...mapDispatchToProps(this.context.store.dispatch) }                             /&gt;                      )                }          }          //接收context的固定写法          Connect.contextTypes = {                store: PropTypes.object          }          return Connect        }}  </code></pre><pre><code>//index.jsimport React from &#39;react&#39;import ReactDOM from &#39;react-dom&#39;import App from &#39;./App&#39;import { Provider } from &#39;./react-redux&#39;import { createStore } from &#39;./store&#39;import { reducer } from &#39;./reducer&#39;ReactDOM.render(       &lt;Provider store={createStore(reducer)}&gt;                &lt;App /&gt;        &lt;/Provider&gt;,         document.getElementById(&#39;root&#39;));</code></pre><pre><code>//App.jsimport React from &#39;react&#39;import { connect } from &#39;./react-redux&#39;const addCountAction = {      type: &#39;plus&#39;}const mapStateToProps = state =&gt; {      return {              count: state.count      }}const mapDispatchToProps = dispatch =&gt; {      return {              addCount: () =&gt; {                      dispatch(addCountAction)              }      }}class App extends React.Component {      render() {            return (                  &lt;div className=&quot;App&quot;&gt;                        { this.props.count }                        &lt;button onClick={ () =&gt; this.props.addCount() }&gt;增加&lt;/button&gt;                  &lt;/div&gt;            );      }}export default connect(mapStateToProps, mapDispatchToProps)(App)</code></pre><p>运行项目，点击增加按钮，能够正确的计数，OK大成功，我们整个redux、react-redux的流程就走通了</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/20/16f220600b322f69?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="三-redux-Middleware实现"><a href="#三-redux-Middleware实现" class="headerlink" title="三. redux Middleware实现"></a>三. redux Middleware实现</h2><p>上面redux和react-redux的实现都比较简单，下面我们来分析实现稍困难一些的<strong>redux中间件</strong>。所谓中间件，我们可以理解为拦截器，用于对某些过程进行拦截和处理，且中间件之间能够串联使用。在redux中，我们中间件拦截的是dispatch提交到reducer这个过程，从而增强dispatch的功能。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/27/16f44c0ad62d8656?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>我查阅了很多redux中间件相关的资料，但最后发现没有一篇写的比<a href="https://redux.js.org/advanced/middleware/" target="_blank" rel="noopener">官方文档</a>清晰，文档从中间件的需求到设计，从概念到实现，每一步都有清晰生动的讲解。下面我们就和文档一样，以一个记录日志的中间件为例，一步一步分析redux中间件的设计实现。</p><p>我们思考一下，如果我们想在每次dispatch之后，打印一下store的内容，我们会如何实现呢：</p><h3 id="1-在每次dispatch之后手动打印store的内容"><a href="#1-在每次dispatch之后手动打印store的内容" class="headerlink" title="1. 在每次dispatch之后手动打印store的内容"></a>1. 在每次dispatch之后手动打印store的内容</h3><pre><code>store.dispatch({ type: &#39;plus&#39; })console.log(&#39;next state&#39;, store.getState())</code></pre><p>这是最直接的方法，当然我们不可能在项目里每个dispatch后面都粘贴一段打印日志的代码，我们至少要把这部分功能提取出来。</p><h3 id="2-封装dispatch"><a href="#2-封装dispatch" class="headerlink" title="2. 封装dispatch"></a>2. 封装dispatch</h3><pre><code>function dispatchAndLog(store, action) {        store.dispatch(action)        console.log(&#39;next state&#39;, store.getState())}</code></pre><p>我们可以重新封装一个公用的新的dispatch方法，这样可以减少一部分重复的代码。不过每次使用这个新的dispatch都得从外部引一下，还是比较麻烦。</p><h3 id="3-替换dispatch"><a href="#3-替换dispatch" class="headerlink" title="3. 替换dispatch"></a>3. 替换dispatch</h3><pre><code>let next = store.dispatchstore.dispatch = function dispatchAndLog(action) {      let result = next(action)      console.log(&#39;next state&#39;, store.getState())      return result}</code></pre><p>如果我们直接把dispatch给替换，这样每次使用的时候不就不需要再从外部引用一次了吗？对于单纯打印日志来说，这样就足够了，但是如果我们还有一个监控dispatch错误的需求呢，我们固然可以在打印日志的代码后面加上捕获错误的代码，但随着功能模块的增多，代码量会迅速膨胀，以后这个中间件就没法维护了，我们希望不同的功能是<strong>独立的可拔插的</strong>模块。</p><h3 id="4-模块化"><a href="#4-模块化" class="headerlink" title="4. 模块化"></a>4. 模块化</h3><pre><code>// 打印日志中间件function patchStoreToAddLogging(store) {        let next = store.dispatch    //此处也可以写成匿名函数        store.dispatch = function dispatchAndLog(action) {              let result = next(action)              console.log(&#39;next state&#39;, store.getState())              return result        }}  // 监控错误中间件function patchStoreToAddCrashReporting(store) {        //这里取到的dispatch已经是被上一个中间件包装过的dispatch, 从而实现中间件串联        let next = store.dispatch        store.dispatch = function dispatchAndReportErrors(action) {                try {                        return next(action)                } catch (err) {                        console.error(&#39;捕获一个异常!&#39;, err)                        throw err                }        }}</code></pre><p>我们把不同功能的模块拆分成不同的方法，通过在方法内<strong>获取上一个中间件包装过的store.dispatch实现链式调用</strong>。然后我们就能通过调用这些中间件方法，分别使用、组合这些中间件。</p><pre><code>patchStoreToAddLogging(store)patchStoreToAddCrashReporting(store)</code></pre><p>到这里我们基本实现了可组合、拔插的中间件，但我们仍然可以把代码再写好看一点。我们注意到，我们当前写的中间件方法都是先获取dispatch，然后在方法内替换dispatch，这部分重复代码我们可以再稍微简化一下：我们不在方法内替换dispatch，而是返回一个新的dispatch，然后让循环来进行每一步的替换。</p><h3 id="5-applyMiddleware"><a href="#5-applyMiddleware" class="headerlink" title="5. applyMiddleware"></a>5. applyMiddleware</h3><p>改造一下中间件，使其返回新的dispatch而不是替换原dispatch</p><pre><code>function logger(store) {        let next = store.dispatch         // 我们之前的做法(在方法内直接替换dispatch):        // store.dispatch = function dispatchAndLog(action) {        //         ...        // }        return function dispatchAndLog(action) {                let result = next(action)                console.log(&#39;next state&#39;, store.getState())                return result        }}</code></pre><p>在Redux中增加一个辅助方法applyMiddleware，用于添加中间件</p><pre><code>function applyMiddleware(store, middlewares) {        middlewares = [ ...middlewares ]    //浅拷贝数组, 避免下面reserve()影响原数组        middlewares.reverse()               //由于循环替换dispatch时,前面的中间件在最里层,因此需要翻转数组才能保证中间件的调用顺序          // 循环替换dispatch       middlewares.forEach(middleware =&gt;              store.dispatch = middleware(store)        )}</code></pre><p>然后我们就能以这种形式增加中间件了：</p><pre><code>applyMiddleware(store, [ logger, crashReporter ])</code></pre><p>写到这里，我们可以简单地测试一下中间件。我创建了三个中间件，分别是logger1、thunk、logger2，其作用也很简单，打印logger1 -&gt; 执行异步dispatch -&gt; 打印logger2，我们通过这个例子观察中间件的执行顺序</p><pre><code>//index.jsimport React from &#39;react&#39;;import ReactDOM from &#39;react-dom&#39;;import App from &#39;./App&#39;;import { Provider } from &#39;./react-redux&#39;import { createStore } from &#39;./store&#39;import { reducer } from &#39;./reducer&#39;let store = createStore(reducer)function logger(store) {        let next = store.dispatch        return (action) =&gt; {                console.log(&#39;logger1&#39;)                let result = next(action)                return result        }}function thunk(store) {        let next = store.dispatch        return (action) =&gt; {                console.log(&#39;thunk&#39;)                return typeof action === &#39;function&#39; ? action(store.dispatch) : next(action)        }}function logger2(store) {        let next = store.dispatch            return (action) =&gt; {                console.log(&#39;logger2&#39;)                let result = next(action)                return result        }}function applyMiddleware(store, middlewares) {        middlewares = [ ...middlewares ]          middlewares.reverse()         middlewares.forEach(middleware =&gt;              store.dispatch = middleware(store)        )}applyMiddleware(store, [ logger, thunk, logger2 ])ReactDOM.render(        &lt;Provider store={store}&gt;                &lt;App /&gt;        &lt;/Provider&gt;,         document.getElementById(&#39;root&#39;));</code></pre><p>发出异步dispatch</p><pre><code>function addCountAction(dispatch) {      setTimeout(() =&gt; {            dispatch({ type: &#39;plus&#39; })      }, 1000)}dispatch(addCountAction)</code></pre><p>输出结果</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/1/16f601ddb960c8ba?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>可以看到，控制台先输出了中间件logger1的打印结果，然后进入thunk中间件打印了’thunk’，等待一秒后，异步dispatch被触发，又重新走了一遍logger1 -&gt; thunk -&gt; logger2。到这里，我们就基本实现了可拔插、可组合的中间件机制，还顺便实现了redux-thunk。</p><h3 id="6-纯函数"><a href="#6-纯函数" class="headerlink" title="6. 纯函数"></a>6. 纯函数</h3><p>之前的例子已经基本实现我们的需求，但我们还可以进一步改进，上面这个函数看起来仍然不够“纯”，函数在函数体内修改了store自身的dispatch，产生了所谓的“副作用”，从函数式编程的规范出发，我们可以进行一些改造，借鉴react-redux的实现思路，我们可以把applyMiddleware作为高阶函数，用于增强store，而不是替换dispatch：</p><p>先对createStore进行一个小改造，传入heightener（即applyMiddleware），heightener接收并强化createStore。</p><pre><code>// store.jsexport const createStore = (reducer, heightener) =&gt; {        // heightener是一个高阶函数,用于增强createStore        //如果存在heightener,则执行增强后的createStore        if (heightener) {                return heightener(createStore)(reducer)        }            let currentState = {}        let observers = []             //观察者队列        function getState() {                return currentState        }        function dispatch(action) {                currentState = reducer(currentState, action);                observers.forEach(fn =&gt; fn())        }        function subscribe(fn) {                observers.push(fn)        }        dispatch({ type: &#39;@@REDUX_INIT&#39; })//初始化store数据        return { getState, subscribe, dispatch }}</code></pre><p>中间件进一步柯里化，让next通过参数传入</p><pre><code>const logger = store =&gt; next =&gt; action =&gt; {        console.log(&#39;log1&#39;)        let result = next(action)        return result}const thunk = store =&gt; next =&gt;action =&gt; {    console.log(&#39;thunk&#39;)        const { dispatch, getState } = store        return typeof action === &#39;function&#39; ? action(store.dispatch) : next(action)}const logger2 = store =&gt; next =&gt; action =&gt; {        console.log(&#39;log2&#39;)        let result = next(action)        return result}</code></pre><p>改造applyMiddleware</p><pre><code>const applyMiddleware = (...middlewares) =&gt; createStore =&gt; reducer =&gt; {        const store = createStore(reducer)        let { getState, dispatch } = store        const params = {              getState,              dispatch: (action) =&gt; dispatch(action)              //解释一下这里为什么不直接 dispatch: dispatch              //因为直接使用dispatch会产生闭包,导致所有中间件都共享同一个dispatch,如果有中间件修改了dispatch或者进行异步dispatch就可能出错        }        const middlewareArr = middlewares.map(middleware =&gt; middleware(params))     dispatch = compose(...middlewareArr)(dispatch)        return { ...store, dispatch }}//compose这一步对应了middlewares.reverse(),是函数式编程一种常见的组合方法function compose(...fns) {    if (fns.length === 0) return arg =&gt; arg        if (fns.length === 1) return fns[0]        return fns.reduce((res, cur) =&gt;(...args) =&gt; res(cur(...args)))}</code></pre><p>代码应该不难看懂，在上一个例子的基础上，我们主要做了两个改造</p><p>\1. 使用compose方法取代了middlewares.reverse()，compose是函数式编程中常用的一种组合函数的方式，compose内部使用reduce巧妙地组合了中间件函数，使传入的中间件函数变成<code>(...arg) =&gt; mid1(mid2(mid3(...arg)))</code>这种形式</p><p>\2. 不直接替换dispatch，而是作为高阶函数增强createStore，最后return的是一个新的store</p><h3 id="7-洋葱圈模型"><a href="#7-洋葱圈模型" class="headerlink" title="7.洋葱圈模型"></a>7.洋葱圈模型</h3><p>之所以把洋葱圈模型放到后面来讲，是因为洋葱圈和前边中间件的实现并没有很紧密的关系，为了避免读者混淆，放到这里再提一下。我们直接放出三个打印日志的中间件，观察输出结果，就能很轻易地看懂洋葱圈模型。</p><pre><code>const logger1 = store =&gt; next =&gt; action =&gt; {        console.log(&#39;进入log1&#39;)        let result = next(action)        console.log(&#39;离开log1&#39;)        return result}const logger2 = store =&gt; next =&gt; action =&gt; {        console.log(&#39;进入log2&#39;)        let result = next(action)        console.log(&#39;离开log2&#39;)        return result}const logger3 = store =&gt; next =&gt; action =&gt; {        console.log(&#39;进入log3&#39;)        let result = next(action)        console.log(&#39;离开log3&#39;)        return result}</code></pre><p>执行结果</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/1/16f602b97933b126?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>由于我们的中间件是这样的结构：</p><pre><code>logger1(        console.log(&#39;进入logger1&#39;)            logger2(                    console.log(&#39;进入logger2&#39;)                        logger3(                                console.log(&#39;进入logger3&#39;)                                //dispatch()                                console.log(&#39;离开logger3&#39;)                        )                    console.log(&#39;离开logger2&#39;)            )        console.log(&#39;离开logger1&#39;))</code></pre><p>因此我们可以看到，中间件的执行顺序实际上是这样的：</p><p>进入log1 -&gt; 执行next -&gt; 进入log2 -&gt; 执行next -&gt; 进入log3 -&gt; 执行next -&gt; next执行完毕 -&gt; 离开log3 -&gt; 回到上一层中间件,执行上层中间件next之后的语句 -&gt; 离开log2 -&gt; 回到中间件log1, 执行log1的next之后的语句 -&gt; 离开log1</p><blockquote><p>这就是所谓的“洋葱圈模型”</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/1/1/16f60342f3c7758e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><h2 id="四-总结-amp-致谢"><a href="#四-总结-amp-致谢" class="headerlink" title="四. 总结 &amp; 致谢"></a>四. 总结 &amp; 致谢</h2><p>其实全文看下来，读者应该能够体会到，redux、react-redux以及redux中间件的实现并不复杂，各自的核心代码不过十余行，但在这寥寥数行代码之间，蕴含了一系列编程思想与设计范式 —— 观察者模式、装饰器模式、中间件机制、函数柯里化、函数式编程。我们阅读源码的意义，也就在于理解和体会这些思想。</p><p>全篇成文前后经历一个月，主要参考资料来自同事分享以及多篇相关文章，在此特别感谢龙超大佬和于中大佬的分享。在考据细节的过程中，也得到了很多素未谋面的朋友们的解惑，特别是感谢Frank1e大佬在中间件柯里化理解上给予的帮助。真是感谢大家Thanks♪(･ω·)ﾉ</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>interview-node</title>
      <link href="/2020/06/15/interview-node/"/>
      <url>/2020/06/15/interview-node/</url>
      
        <content type="html"><![CDATA[<h3 id="node-相关"><a href="#node-相关" class="headerlink" title="node 相关"></a>node 相关</h3>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-basic</title>
      <link href="/2020/06/13/js-shou-xie-ti/"/>
      <url>/2020/06/13/js-shou-xie-ti/</url>
      
        <content type="html"><![CDATA[<h3 id><a href="#" class="headerlink" title="??"></a>??</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ??</span>input1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span><span class="token function">debounce</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title="??"></a>??</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ??</span>div1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'arag'</span><span class="token punctuation">,</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-2"><a href="#-2" class="headerlink" title="???"></a>???</h3><ul><li>????<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span> <span class="token punctuation">{</span>  d<span class="token punctuation">:</span> <span class="token string">'xx'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>e<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>let obj2 = obj1;<br>obj2.c.d = ‘yy’<br>obj2.e[0] = ‘3’<br>console.log(obj1.c.d) // yy<br>console.log(obj1.e[0]) // 3</p><pre><code>+ ????obj2??????obj1??????+ ??????????????```js// ???function deepClone(obj = {}){  // obj ? null ???????????????  if(typeof obj !== &#39;object&#39; || typeof == null){    return obj;  }  let res;  // ???????  if(obj instanceof Array){    res = []  }else{    res = {}  }  for(let key in obj){    // ?? key ???????    if(obj.hasOwnProperty(key)){      // ???????      res[key] = deepClone(obj[key])    }  }  // ????  return res;}</code></pre><h3 id="loadsh-isEqual"><a href="#loadsh-isEqual" class="headerlink" title="????loadsh isEqual"></a>????loadsh isEqual</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ??????????</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ?????</span>    <span class="token keyword">return</span> obj1 <span class="token operator">===</span> obj2  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ??????</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2 <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ???????????????</span>  <span class="token comment" spellcheck="true">// 1. ??? obj1 ? obj2 ? keys ?????</span>  <span class="token keyword">const</span> obj1Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>  <span class="token keyword">const</span> obj2Keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>obj1Keys<span class="token punctuation">.</span>length <span class="token operator">!==</span> obj2Keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. ? obj1 ????? obj2 ??????</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ???? key ? val �� ?????</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">isEuqal</span><span class="token punctuation">(</span>obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 3. ???</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="promise"><a href="#promise" class="headerlink" title="??promise??????"></a>??promise??????</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadImg</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token keyword">let</span> img  <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>        img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ??</span><span class="token keyword">const</span> url1 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">const</span> url2 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token function">loadImg</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>img1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>img1<span class="token punctuation">.</span>width<span class="token punctuation">)</span>     <span class="token keyword">return</span> img1 <span class="token comment" spellcheck="true">// ????</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>img1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>img1<span class="token punctuation">.</span>height<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token function">loadImg</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// promise ??</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>img2 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>img2<span class="token punctuation">.</span>width<span class="token punctuation">)</span>     <span class="token keyword">return</span> img2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>img2 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>img2<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>ex <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-a"><a href="#10-a" class="headerlink" title="??10?a??? ?????????"></a>??10?a??? ?????????</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> i <span class="token punctuation">,</span> a<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="??bind"></a>??bind</h3><pre class="line-numbers language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mybind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">const</span> t <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ??</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'this is fn1'</span><span class="token punctuation">}</span><span class="token keyword">const</span> fn2 <span class="token operator">=</span> fn1<span class="token punctuation">.</span><span class="token function">bind1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ajax"><a href="#ajax" class="headerlink" title="????ajax"></a>????ajax</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readystate <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ??</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="jquery"><a href="#jquery" class="headerlink" title="????jquery"></a>????jquery</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">jQuery</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>        <span class="token keyword">const</span> length <span class="token operator">=</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> selector    <span class="token punctuation">}</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token function">each</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">const</span> ele <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token function">fn</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>ele <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            ele<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>fn<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ???? DOM API</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ??</span>jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>dialog <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ???</span><span class="token keyword">class</span> <span class="token class-name">myJquery</span> <span class="token keyword">extends</span> <span class="token class-name">jQuery</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ???????</span>    <span class="token function">addClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">style</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="url-js"><a href="#url-js" class="headerlink" title="?url?????js??"></a>?url?????js??</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> val <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span>  pList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> obj<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flatern"><a href="#flatern" class="headerlink" title="????flatern"></a>????flatern</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> isDeep <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isDeep<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">flat</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="trim"><a href="#trim" class="headerlink" title="?????trim???????????"></a>?????trim???????????</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ?????trim???????????</span>String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s+/</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+$/</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-3"><a href="#-3" class="headerlink" title="?????????????"></a>?????????????</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ?????????????</span><span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> Arrat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>      max <span class="token operator">=</span> item    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现promise</title>
      <link href="/2020/06/02/js-shi-xian-promise/"/>
      <url>/2020/06/02/js-shi-xian-promise/</url>
      
        <content type="html"><![CDATA[<h4 id><a href="#" class="headerlink" title="??"></a>??</h4><pre><code>new Promise((resolve, reject) =&gt; {    //??????resolve?????reject}).then((res) =&gt; {    //resolve???????????    }, (err) =&gt; {    //reject???????????}).then(res =&gt; {//????then????????promise//??????????}).catch(reason =&gt; {});//?????promise?????then?//?????????????catchPromise.all([promise1, ...]).then();????</code></pre><h3 id="-1"><a href="#-1" class="headerlink" title="??????"></a>??????</h3><p>????Promise?</p><p>1.????????pending?, ‘fulfilled’, ‘rejected’</p><p>2.????then???????????</p><pre><code>//promise.jsclass Promise{  //?????????  constructor(excutorCallBack){    this.status = &#39;pending&#39;;    this.value = undefined;    this.fulfillAry = [];    this.rejectedAry = [];    //=&gt;??Excutor    let resolveFn = result =&gt; {      if(this.status !== &#39;pending&#39;) return;      let timer = setTimeout(() =&gt; {        this.status = &#39;fulfilled&#39;;        this.value = result;        this.fulfillAry.forEach(item =&gt; item(this.value));      }, 0);    };    let rejectFn = reason =&gt; {      if(this.status !== &#39;pending&#39;)return;      let timer = setTimeout(() =&gt; {        this.status = &#39;rejected&#39;;        this.value = reason;        this.rejectedAry.forEach(item =&gt; item(this.value))      })    };    try{      //????????      excutorCallBack(resolveFn, rejectFn);    } catch(err) {      //=&gt;???????rejected????      rejectFn(err);    }  }  then(fulfilledCallBack, rejectedCallBack) {    //resolve?reject???????????    //??????????????then???????    this.fulfillAry.push(fulfilledCallBack);    this.rejectedAry.push(rejectedCallBack);    //??push???????  }}module.exports = Promise;????</code></pre><p>?????</p><pre><code>let Promise = require(&#39;./promise&#39;);let p1 = new Promise((resolve, reject) =&gt; {  setTimeout(() =&gt; {    Math.random()&lt;0.5?resolve(100):reject(-100);  }, 1000)}).then(res =&gt; {  console.log(res);}, err =&gt; {  console.log(err);})????</code></pre><h3 id="-2"><a href="#-2" class="headerlink" title="?? ??????"></a>?? ??????</h3><p>?????????????????????then??????</p><pre><code>  //then??????  then(fulfilledCallBack, rejectedCallBack) {    //???????    typeof fulfilledCallBack !== &#39;function&#39; ? fulfilledCallBack = result =&gt; result:null;    typeof rejectedCallBack !== &#39;function&#39; ? rejectedCallBack = reason =&gt; {      throw new Error(reason instanceof Error? reason.message:reason);    } : null    //????Promise??????????Promise?    return new Promise((resolve, reject) =&gt; {      //????this?????Promise????????Promise      //?????,????      //???Promise(????return??Promise)?resolve?reject???????????      //??????????????then???????      this.fulfillAry.push(() =&gt; {        try {          //?then??????????          //?????????          let x = fulfilledCallBack(this.value);          //?????????????????????????Promise????          //?????x???Promise??????then??          //????Promise,?????Promise?resolve??,          //?Promise?fulfilAry????,??Promise?then???.?Promise?resolve??          x instanceof Promise ? x.then(resolve, reject):resolve(x);        }catch(err){          reject(err)        }      });      //????      this.rejectedAry.push(() =&gt; {        try {          let x = this.rejectedCallBack(this.value);          x instanceof Promise ? x.then(resolve, reject):resolve(x);        }catch(err){          reject(err)        }      })    }) ;  }????</code></pre><p>?????</p><pre><code>let p1 = new Promise((resolve, reject) =&gt; {  setTimeout(() =&gt; {    Math.random()&lt;0.5?resolve(100):reject(-100);  }, 1000)})let p2 = p1.then(result =&gt; {  //??then????????Promise  return result + 100;})let p3 = p2.then(result =&gt; {  console.log(result);}, reason =&gt; {  console.log(reason)})????</code></pre><p>???????????????????</p><p><img src="https://user-gold-cdn.xitu.io/2019/6/22/16b7d50035293aeb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="?????????"></p><p>??then???catch?????????</p><pre><code>  catch(rejectedCallBack) {    return this.then(null, rejectedCallBack);  }????</code></pre><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="??Promise.all()"></a>??Promise.all()</h3><p>?????Promise.all()</p><pre><code>//???????????????static all(promiseAry = []) {    let index = 0,         result = [];    return new Promise((resolve, reject) =&gt; {      for(let i = 0; i &lt; promiseAry.length; i++){        promiseAry[i].then(val =&gt; {          index++;          result[i] = val;          if( index === promiseAry.length){            resolve(result)          }        }, reject);      }    })  }????</code></pre><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="??Promise.race()"></a>??Promise.race()</h3><p>????race??</p><pre><code>static race(promises) {  return new Promise((resolve, reject) =&gt; {    if (promises.length === 0) {      return;    } else {      for(let i = 0; i &lt; promises.length; i++){        promises[i].then(val =&gt; {            resolve(result);            return;          }        }, reject);      }    }  });}????</code></pre><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="??Promise.resolve()"></a>??Promise.resolve()</h3><pre><code>static resolve (value) {    if (value instanceof Promise) return value    return new Promise(resolve =&gt; resolve(value))}????</code></pre><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="??Promise.reject()"></a>??Promise.reject()</h3><pre><code>static reject (value) {    return new Promise((resolve, reject) =&gt; reject(value))}????</code></pre><h3 id="-3"><a href="#-3" class="headerlink" title="????"></a>????</h3><p>?????????????????Promise???????</p><pre><code>class Promise{  constructor(excutorCallBack){    this.status = &#39;pending&#39;;    this.value = undefined;    this.fulfillAry = [];    this.rejectedAry = [];    //=&gt;??Excutor    let resolveFn = result =&gt; {      if(this.status !== &#39;pending&#39;) return;      let timer = setTimeout(() =&gt; {        this.status = &#39;fulfilled&#39;;        this.value = result;        this.fulfillAry.forEach(item =&gt; item(this.value));      }, 0);    };    let rejectFn = reason =&gt; {      if(this.status !== &#39;pending&#39;)return;      let timer = setTimeout(() =&gt; {        this.status = &#39;rejected&#39;;        this.value = reason;        this.rejectedAry.forEach(item =&gt; item(this.value))      })    };    try{      excutorCallBack(resolveFn, rejectFn);    } catch(err) {      //=&gt;???????rejected????      rejectFn(err);    }  }  then(fulfilledCallBack, rejectedCallBack) {    typeof fulfilledCallBack !== &#39;function&#39; ? fulfilledCallBack = result =&gt; result:null;    typeof rejectedCallBack !== &#39;function&#39; ? rejectedCallBack = reason =&gt; {      throw new Error(reason instanceof Error? reason.message:reason);    } : null    return new Promise((resolve, reject) =&gt; {      this.fulfillAry.push(() =&gt; {        try {          let x = fulfilledCallBack(this.value);          x instanceof Promise ? x.then(resolve, reject ):resolve(x);        }catch(err){          reject(err)        }      });      this.rejectedAry.push(() =&gt; {        try {          let x = this.rejectedCallBack(this.value);          x instanceof Promise ? x.then(resolve, reject):resolve(x);        }catch(err){          reject(err)        }      })    }) ;  }  catch(rejectedCallBack) {    return this.then(null, rejectedCallBack);  }  static all(promiseAry = []) {    let index = 0,         result = [];    return new Promise((resolve, reject) =&gt; {      for(let i = 0; i &lt; promiseAry.length; i++){        promiseAry[i].then(val =&gt; {          index++;          result[i] = val;          if( index === promiseAry.length){            resolve(result)          }        }, reject);      }    })  } static race(promiseAry) {  return new Promise((resolve, reject) =&gt; {    if (promiseAry.length === 0) {      return;    }    for (let i = 0; i &lt; promiseAry.length; i++) {      promiseAry[i].then(val =&gt; {        resolve(val);        return;      }, reject);    }       })}static resolve (value) {    if (value instanceof Promise) return value    return new Promise(resolve =&gt; resolve(value))}static reject (value) {    return new Promise((resolve, reject) =&gt; reject(value))}}module.exports = Promise;</code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组扁平化(flat)方法总结</title>
      <link href="/2020/06/02/js-shu-zu-bian-ping-hua-flat-fang-fa-zong-jie/"/>
      <url>/2020/06/02/js-shu-zu-bian-ping-hua-flat-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第一种</span><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr_flat <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr_flat<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第二种</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第三种</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">:</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-搜索-34-在排序数组中查找元素的第一个和最后一个位置</title>
      <link href="/2020/06/01/leetcode-sou-suo-34-zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-su-de-di-yi-ge-he-zui-hou-yi-ge-wei-zhi/"/>
      <url>/2020/06/01/leetcode-sou-suo-34-zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-su-de-di-yi-ge-he-zui-hou-yi-ge-wei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</li><li>你的算法时间复杂度必须是 O(log n) 级别。</li><li>如果数组中不存在目标值，返回 [-1, -1]。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>输入: nums = [5,7,7,8,8,10], target = 8输出: [3,4]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>输入: nums = [5,7,7,8,8,10], target = 6输出: [-1,-1]</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>根据二分查找，找到左边第一个不小于目标值的位置</li><li>从上一步中的位置开始到最后，二分查找，确定右边最后一个符合条件值的位置</li><li>得到结果</li></ul><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> getBinarySearchLowerBound <span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 找到第一个不小于目标值的位置</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      high <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果相等，则匹配，否则不匹配</span>  <span class="token keyword">return</span> array<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">?</span> low <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> getBinarySearchUpperBound <span class="token punctuation">(</span>array<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 找到第一个不大于目标值的位置</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      low <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果相等，则匹配，否则不匹配</span>  <span class="token keyword">return</span> array<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">?</span> high <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> searchRange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> size <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> low <span class="token operator">=</span> <span class="token function">getBinarySearchLowerBound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 从左边数字的位置开始</span>  <span class="token keyword">const</span> high <span class="token operator">=</span> <span class="token function">getBinarySearchUpperBound</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> low <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> low <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>low<span class="token punctuation">,</span> high<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-搜索-33-搜索旋转排序数组</title>
      <link href="/2020/05/27/leetcode-sou-suo-33-sou-suo-xuan-zhuan-pai-xu-shu-zu/"/>
      <url>/2020/05/27/leetcode-sou-suo-33-sou-suo-xuan-zhuan-pai-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a>33. 搜索旋转排序数组</h1><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</li><li>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )</li><li>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</li><li>你可以假设数组中不存在重复的元素。</li><li>你的算法时间复杂度必须是 O(log n) 级别。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>输入: nums = [4,5,6,7,0,1,2], target = 0输出: 4</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>输入: nums = [4,5,6,7,0,1,2], target = 3输出: -1</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>我们可以先找出mid，然后根据mid来判断，mid是在有序的部分还是无序的部分</li><li>假如mid小于start，则mid一定在右边有序部分。</li><li>假如mid大于等于start， 则mid一定在左边有序部分。</li><li>我们只需要比较target和有序部分的边界关系就行了。 比如mid在右侧有序部分，即[mid, end]<br>那么我们只需要判断 target &gt;= mid &amp;&amp; target &lt;= end 就能知道target在右侧有序部分，我们就<br>可以舍弃左边部分了(start = mid + 1)， 反之亦然。</li></ul><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} target * @return {number} */</span><span class="token keyword">var</span> search <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 时间复杂度：O(logn)</span>  <span class="token comment" spellcheck="true">// 空间复杂度：O(1)</span>  <span class="token comment" spellcheck="true">// [6,7,8,1,2,3,4,5]</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// [start, mid]有序</span>    <span class="token comment" spellcheck="true">// ️⚠️注意这里的等号</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//target 在 [start, mid] 之间</span>      <span class="token comment" spellcheck="true">// 其实target不可能等于nums[mid]， 但是为了对称，我还是加上了等号</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">>=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//target 不在 [start, mid] 之间</span>        start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// [mid, end]有序</span>      <span class="token comment" spellcheck="true">// target 在 [mid, end] 之间</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">>=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// target 不在 [mid, end] 之间</span>        end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-排序-278-第一个错误的版本</title>
      <link href="/2020/05/27/leetcode-pai-xu-278-di-yi-ge-cuo-wu-de-ban-ben/"/>
      <url>/2020/05/27/leetcode-pai-xu-278-di-yi-ge-cuo-wu-de-ban-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278. 第一个错误的版本"></a>278. 第一个错误的版本</h1><h4 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h4><ul><li>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</li><li>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</li><li>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</li></ul><p>示例1:</p><pre><code>给定 n = 5，并且 version = 4 是第一个错误的版本。调用 isBadVersion(3) -&gt; false调用 isBadVersion(5) -&gt; true调用 isBadVersion(4) -&gt; true所以，4 是第一个错误的版本。</code></pre><h4 id="解题思路-二分查找"><a href="#解题思路-二分查找" class="headerlink" title="解题思路(二分查找)"></a>解题思路(二分查找)</h4><ul><li>1.确定数组左边边界值和右边边界值，找到边界值的中间值</li><li>2.比较中间值是否是错误版本，如果是则右边边界值=中间值-1，再找中间值比较。如果不是错误版本则左侧边界值=中间值+1，再找左侧值和右侧值之间的中间值比较，这样重复下去</li><li>3.当左侧边界值&gt;右侧边界值得时候，说明右侧已经全是错误版本了，当前左侧的值就是临界值</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> solution <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>isBadVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> firstBadVersion <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">firstBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>              left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-排序-88-合并两个有序数组</title>
      <link href="/2020/05/27/leetcode-pai-xu-88-he-bing-liang-ge-you-xu-shu-zu/"/>
      <url>/2020/05/27/leetcode-pai-xu-88-he-bing-liang-ge-you-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a>88. 合并两个有序数组</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</li><li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。</li><li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>输入:nums1 = [1,2,3,0,0,0], m = 3nums2 = [2,5,6],       n = 3输出: [1,2,2,3,5,6]</code></pre><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums1 * @param {number} m * @param {number[]} nums2 * @param {number} n * @return {void} Do not return anything, modify nums1 in-place instead. */</span><span class="token keyword">var</span> merge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> m <span class="token operator">+</span> n    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums1<span class="token punctuation">[</span><span class="token operator">--</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span><span class="token operator">--</span>n<span class="token punctuation">]</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        nums1<span class="token punctuation">[</span><span class="token operator">--</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> nums2<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">?</span> nums1<span class="token punctuation">[</span><span class="token operator">--</span>m<span class="token punctuation">]</span><span class="token punctuation">:</span> nums2<span class="token punctuation">[</span><span class="token operator">--</span>n<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析 1"></a>复杂度分析 1</h3><ul><li>时间复杂度：O(m+n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-1185-一周中的第几天</title>
      <link href="/2020/05/25/leetcode-shu-zu-1185-yi-zhou-zhong-de-di-ji-tian/"/>
      <url>/2020/05/25/leetcode-shu-zu-1185-yi-zhou-zhong-de-di-ji-tian/</url>
      
        <content type="html"><![CDATA[<!-- * @Author: your name * @Date: 2020-03-12 23:20:54 * @LastEditTime: 2020-05-25 22:08:03 * @LastEditors: Please set LastEditors * @Description: In User Settings Edit * @FilePath: /leetcode_fe/51-100/53_最大子序和.md --><h1 id="1185-一周中的第几天"><a href="#1185-一周中的第几天" class="headerlink" title="1185. 一周中的第几天"></a>1185. 一周中的第几天</h1><h4 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h4><ul><li>给你一个日期，请你设计一个算法来判断它是对应一周中的哪一天。</li><li>输入为三个整数：day、month 和 year，分别表示日、月、年。</li><li>您返回的结果必须是这几个值中的一个 {“Sunday”, “Monday”, “Tuesday”, “Wednesday”, “Thursday”, “Friday”, “Saturday”}。</li></ul><p>示例 1:</p><blockquote><p>输入：day = 31, month = 8, year = 2019<br>输出：”Saturday”</p></blockquote><p>示例 2:</p><blockquote><p>输入：day = 18, month = 7, year = 1999<br>输出：”Sunday”</p></blockquote><p>示例 3:</p><blockquote><p>输入：day = 15, month = 8, year = 1993<br>输出：”Sunday”</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>1.先调用 Date.parse() 方法得到给定日期的时间戳</li><li>2.再调用 new Date() 方法得到给定时间戳的日期和时间</li><li>3.再调用 Date.getDay() 方法得到一个数字如 5 ，表示当前是星期五。</li><li>4.最后输出英文的星期几</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> dayOfTheWeek <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>day<span class="token punctuation">,</span> month<span class="token punctuation">,</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> Week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Sunday'</span><span class="token punctuation">,</span> <span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">,</span> <span class="token string">'Saturday'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> Week<span class="token punctuation">[</span>date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-349-两个数组的交集</title>
      <link href="/2020/05/25/leetcode-shu-zu-349-liang-ge-shu-zu-de-jiao-ji/"/>
      <url>/2020/05/25/leetcode-shu-zu-349-liang-ge-shu-zu-de-jiao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h1><h4 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h4><ul><li>给定两个数组，编写一个函数来计算它们的交集。<br><strong>说明:</strong></li></ul><ul><li>输出结果中的每个元素一定是唯一的。</li><li>我们可以不考虑输出结果的顺序。</li></ul><p>示例1:</p><blockquote><p>Input: nums1 = [1,2,2,1], nums2 = [2,2]<br>Output: [2]</p></blockquote><p>示例2:</p><blockquote><p>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>Output: [9,4]</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>数组 includes：遍历 num1，判断每个值是否在 num2，如果同时在 2 个数组，并且不是重复值，则添加</li><li>Set 结构：利用 Set 将 num1 和 num2 去重，遍历 num1，判断每个值 num2 是否存在</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 利用 includes * @param {number[]} nums1 * @param {number[]} nums2 * @return {number[]} */</span><span class="token keyword">var</span> intersection <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> key <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是否重复值，且 num2 是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Set 结构 * @param {number[]} nums1 * @param {number[]} nums2 * @return {number[]} */</span><span class="token keyword">var</span> intersection <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 去重</span>    nums1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>    nums2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> nums1<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// num2 如果存在该值，则是交集值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-283-移动零</title>
      <link href="/2020/05/23/leetcode-shu-zu-283-yi-dong-ling/"/>
      <url>/2020/05/23/leetcode-shu-zu-283-yi-dong-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h1><h4 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h4><ul><li>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。<strong>说明</strong>:</li></ul><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><p>示例:</p><blockquote><p>Input: [0,1,0,3,12]<br>Output: [1,3,12,0,0]</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>逆向遍历：从数组最后开始遍历，遇到是0的元素，先删除这个0，再向数组最后补充0</li><li>交换法：纪录 0 的数量，当遇见非 0，交换 0 于当前元素的位置</li><li>前移法：建立新索引，当遇见非0，赋予当前元素值，索引增加，最后新索引之后的数组空间补充 0</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 逆向遍历</span><span class="token keyword">var</span> moveZeroes <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 前移法 * @param {number[]} nums * @return {void} Do not return anything, modify nums in-place instead. */</span><span class="token keyword">var</span> moveZeroes <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 非 0 元素，新索引赋予当前值，新索引累加</span>            nums<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新索引后补充 0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> nums<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 交换法 * @param {number[]} nums * @return {void} Do not return anything, modify nums in-place instead. */</span><span class="token keyword">const</span> moveZeroes <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-股票买卖最佳时机合集</title>
      <link href="/2020/05/23/leetcode-shu-zu-gu-piao-mai-mai-zui-jia-shi-ji-he-ji/"/>
      <url>/2020/05/23/leetcode-shu-zu-gu-piao-mai-mai-zui-jia-shi-ji-he-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h2><h3 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</li><li>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</li><li>注意：你不能在买入股票前卖出股票。</li></ul><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><pre><code>    输入: [7,1,5,3,6,4]    输出: 5    解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</code></pre><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h3><pre><code>    输入: [7,6,4,3,1]    输出: 0    解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</code></pre><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h3><ul><li>找最大差值</li></ul><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} prices * @return {number} */</span><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> valley <span class="token operator">=</span> Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER<span class="token punctuation">;</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i <span class="token operator">&lt;</span> valley<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            valley <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> valley<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>动态规划</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码 2"></a>代码 2</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        last <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> last <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>last<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a>122. 买卖股票的最佳时机 II</h2><h3 id="题目描述（难度：简单）-1"><a href="#题目描述（难度：简单）-1" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</li><li>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</li><li>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</li></ul><h3 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1:"></a>示例1:</h3><pre><code>输入: [7,1,5,3,6,4]输出: 7解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</code></pre><h3 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2:"></a>示例2:</h3><pre><code>输入: [1,2,3,4,5]输出: 4解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h3><pre><code>输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</code></pre><h3 id="思路1-1"><a href="#思路1-1" class="headerlink" title="思路1:"></a>思路1:</h3><ul><li>1.从前向后遍历数组，从第二个开始</li><li>2.如果当前日的价格比前一日的价格高，则相减得出利润差，累加在总利润上。</li><li>3.遍历到最后一日，退出循环，返回总利润</li></ul><h3 id="代码1-1"><a href="#代码1-1" class="headerlink" title="代码1"></a>代码1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> profit <span class="token operator">+</span><span class="token operator">=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> profit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="123-买卖股票的最佳时机-III"><a href="#123-买卖股票的最佳时机-III" class="headerlink" title="123. 买卖股票的最佳时机 III"></a>123. 买卖股票的最佳时机 III</h2><h3 id="题目描述（难度：困难）"><a href="#题目描述（难度：困难）" class="headerlink" title="题目描述（难度：困难）"></a>题目描述（难度：困难）</h3><ul><li>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</li><li>设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。</li><li>注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>输入: [3,3,5,0,0,3,1,4]输出: 6解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>输入: [1,2,3,4,5]输出: 4解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。        注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。        因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</code></pre><h3 id="示例-3-1"><a href="#示例-3-1" class="headerlink" title="示例 3:"></a>示例 3:</h3><pre><code>输入: [7,6,4,3,1] 输出: 0 解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>动态规划</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} prices * @return {number} */</span><span class="token comment" spellcheck="true">// 动态规划 dp[i][k][j] 第i天，交易k笔，j=0：手中不持有</span><span class="token keyword">var</span> maxProfit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取初始状态值</span>    <span class="token keyword">let</span> dpi10<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dpi11<span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dpi20<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dpi21<span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算第i天</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dpi10<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dpi10<span class="token punctuation">,</span>dpi11<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dpi11<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dpi11<span class="token punctuation">,</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dpi20<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dpi20<span class="token punctuation">,</span>dpi21<span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dpi21<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dpi21<span class="token punctuation">,</span>dpi10<span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dpi20<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-48-旋转图像</title>
      <link href="/2020/05/20/leetcode-shu-zu-48-xuan-zhuan-tu-xiang/"/>
      <url>/2020/05/20/leetcode-shu-zu-48-xuan-zhuan-tu-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a>48. 旋转图像</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个 n × n 的二维矩阵表示一个图像。</li><li>将图像顺时针旋转 90 度。</li><li>你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>给定 matrix = [  [1,2,3],  [4,5,6],  [7,8,9]],原地旋转输入矩阵，使其变为:[  [7,4,1],  [8,5,2],  [9,6,3]]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>给定 matrix =[  [ 5, 1, 9,11],  [ 2, 4, 8,10],  [13, 3, 6, 7],  [15,14,12,16]], 原地旋转输入矩阵，使其变为:[  [15,13, 2, 5],  [14, 3, 4, 1],  [12, 6, 8, 9],  [16, 7,10,11]]</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>先将矩阵沿右上角到左下角的对角线进行对称，然后将矩阵沿水平中线对称即可。</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码 1"></a>代码 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> rotate <span class="token operator">=</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按右上角到左下角对称线</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">const</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span>            matrix<span class="token punctuation">[</span>n<span class="token operator">-</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 按水平线</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span>        matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token operator">-</span>k<span class="token punctuation">]</span>        matrix<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析 1"></a>复杂度分析 1</h3><ul><li>时间复杂度：O(n^2)。将矩阵进行遍历，二维数组需循环遍历两次，则复杂度为O( n^2)</li><li>空间复杂度：O(n)</li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>先将矩阵沿左上角到右下角的对角线进行对称，然后将矩阵沿垂直中线对称即可。</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码 2"></a>代码 2</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> rotate <span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调换对角线元素</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 调换每行的左右元素</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>      matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> l<span class="token punctuation">]</span><span class="token punctuation">;</span>      matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析 2"></a>复杂度分析 2</h3><ul><li>时间复杂度：O(n^2)。将矩阵进行遍历，二维数组需循环遍历两次，则复杂度为O( n^2)</li><li>空间复杂度：O(n)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-136-值出现一次的数字</title>
      <link href="/2020/05/19/leetcode-shu-zu-136-zhi-chu-xian-yi-ci-de-shu-zi/"/>
      <url>/2020/05/19/leetcode-shu-zu-136-zhi-chu-xian-yi-ci-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a>136. 只出现一次的数字</h1><h3 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p></li><li><p>说明：你的算法应该具有线性时间复杂度</p></li><li><p>示例1:</p><pre><code>  输入: [2,2,1]  输出: 1</code></pre></li><li><p>示例2:</p><pre><code>  输入: [4,1,2,1,2]  输出: 4</code></pre></li></ul><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h3><ul><li>哈希方法</li></ul><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">const</span> singleNumber <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">delete</span> hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>先排序，再遍历判断当前项和前一项，后一项是否相等。如果不相等，则就是当前项</li></ul><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">const</span> singleNumber <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    nums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路 3"></a>思路 3</h3><ul><li>将数组遍历，并通过过滤的方法，将值相同的数归集为数组的一个元素，由于除了一个元素，其他元素都会出现两次，所有只要找到过滤的集合的长度为1的那个集合，该集合第一个元素即是该元素。<ul><li>1.遍历数组，由于需要返回值，这里使用map方法</li><li>2.使用过滤函数，过滤数组中值与当前遍历的元素的值相同的元素</li><li>3.现在得到了一个存在多个集合的数组，而数组中唯一值的那个元素的集合肯定值存在它自己</li><li>4.查询这个集合中长度只有1的集合，再取这个集合的第一个元素，即是只出现一次的数字</li></ul></li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码 3"></a>代码 3</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">const</span> singleNumber <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> singleNum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">===</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>   singleNum<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n^2).使用了 map 和 filter，嵌套遍历;</li><li>空间复杂度：O(n).map方法创建了一个长度为的数组，占用了大小的空间。</li></ul><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路 4"></a>思路 4</h3><ul><li>异或运算符可以将两个数字比较，由于有一个数只出现了一次，其他数皆出现了两次，类似乘法法则无论先后顺序，最后相同的数都会异或成0，唯一出现的数与0异或就会得到其本身，该方法是最优解，直接通过比较的方式即可得到只出现一次的数字。<ul><li>1.将数组的一个元素与下一个元素做异或比较，直接使用reduce方法</li><li>2.两两异或最后与所有元素都不相同，最后返回的值即是只出现一次的数字。</li></ul></li></ul><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码 4"></a>代码 4</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">const</span> singleNumber <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span>pre<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> cur <span class="token operator">^</span> pre<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n)。仅用 reduce 方法遍历，一层遍历</li><li>空间复杂度：O(1)。空间复杂度为常量，占用空间没有随数据量 的大小发生改变</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-189-旋转数组</title>
      <link href="/2020/05/18/leetcode-shu-zu-189-xuan-zhuan-shu-zu-1/"/>
      <url>/2020/05/18/leetcode-shu-zu-189-xuan-zhuan-shu-zu-1/</url>
      
        <content type="html"><![CDATA[<h2 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189. 旋转数组"></a>189. 旋转数组</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>    输入: [1,2,3,4,5,6,7] 和 k = 3    输出: [5,6,7,1,2,3,4]    解释:    向右旋转 1 步: [7,1,2,3,4,5,6]    向右旋转 2 步: [6,7,1,2,3,4,5]    向右旋转 3 步: [5,6,7,1,2,3,4]</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>    输入: [-1,-100,3,99] 和 k = 2    输出: [3,99,-1,-100]    解释:     向右旋转 1 步: [99,-1,-100,3]    向右旋转 2 步: [3,99,-1,-100]</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>把后k个元素 移动到前面去，使用数组的splice方法</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码 1"></a>代码 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} k * @return {void} Do not return anything, modify nums in-place instead. */</span><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">...</span>nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>数据元素向右移动 1 个位置，相当于将数组元素的最后一项截取，然后放到第一项的位置，因此向右移动 k 个位置，就是循环执行上述操作 k 次。而当 k 为数组长度的倍数时，实际相当于没有移动，所以实际需要循环操作的次数为 k % l。</li><li>1.首先计算出需要循环移动的次数；</li><li>2.通过数组的 unshift() 和 pop() 方法实现旋转，循环执行 k 次。</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码 2"></a>代码 2</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} k * @return {void} Do not return anything, modify nums in-place instead. */</span><span class="token keyword">var</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    len <span class="token operator">=</span> k <span class="token operator">%</span> len<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        nums<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析 2"></a>复杂度分析 2</h3><ul><li>时间复杂度：O(n):循环遍历的次数取决于k的值，与k值呈线性关系，因此复杂度为 。</li><li>空间复杂度：O(1):没有申请额外的空间，因此复杂度为 O(1)。</li></ul><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路 3"></a>思路 3</h3><ul><li>一次性将最后的 k % l 项全部截取，通过扩展运算符‘…’将截取的值放到数组的前边，实现旋转。</li><li>1.首先还是计算出需要截取的数组元素的长度；</li><li>2.通过数组的 splice() 方法截取需要移动的元素，然后使用扩展运算符‘…‘将截取的元素当作参数，通过 unshift() 方法将截取的 元素放到数组的前边。</li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码 3"></a>代码 3</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} k * @return {void} Do not return anything, modify nums in-place instead. */</span><span class="token keyword">const</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> l <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  k <span class="token operator">=</span> k <span class="token operator">%</span> l<span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>l <span class="token operator">-</span> k<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h3><ul><li>时间复杂度：O(1)。 采用一次性截取，所有方法都只执行了 1 次，因此复杂度为 O(1)。</li><li>空间复杂度：O(1)。没有申请额外的空间，因此复杂度为 O(1)。</li></ul><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路 4"></a>思路 4</h3><ul><li>先将原数组的所有元素整体往后移动 k 个位置，给需要旋转的元素预留出位置，然后通过替换和删除，实现数组的旋转。</li><li>1.先将原数组原有的元素从最后一位开始，依次移动到（原下标 + k）的位置；</li><li>2.然后再从改变后的新数组的下标为 (k - 1) 的元素开始，依次将最后一位赋值给新数组下标为 (k - 1) 的元素，然后删除掉最后一位元素。</li></ul><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码 4"></a>代码 4</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} k * @return {void} Do not return anything, modify nums in-place instead. */</span><span class="token keyword">const</span> rotate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> l <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  k <span class="token operator">=</span> k <span class="token operator">%</span> l<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    nums<span class="token punctuation">[</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析 4"></a>复杂度分析 4</h3><ul><li>时间复杂度：O(n)：循环遍历的次数取决于数组长度，与数组长度呈线性关系，因此复杂度为O(n) 。</li><li>空间复杂度：O(n）：数组进行了扩充，申请了n个空间，因此复杂度为：O(n） </li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-字符串-28-实现strStr()</title>
      <link href="/2020/05/18/leetcode-zi-fu-chuan-28-shi-xian-strstr/"/>
      <url>/2020/05/18/leetcode-zi-fu-chuan-28-shi-xian-strstr/</url>
      
        <content type="html"><![CDATA[<h2 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</li><li>对于本题而言，当 needle 是空字符串时我们应当返回 0 </li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>    输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot;    输出: 2</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>    输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;    输出: -1</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>使用js提供的indexOf</li></ul><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> haystack<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>遍历截取字符串对比,从匹配字符串 haystack 中截取出与需查找字符串 needle 长度相等的内容后，对比截取的内容与匹配字符串是否相等，如果相等返回开始截取的下标。<ul><li>1.needle 的长度为0，直接返回0</li><li>2.needle 的字符串长度大于 haystack，肯定不匹配</li><li>3.needle 的字符串长度等于 haystack，判断是否相等，相等则匹配否则不匹配</li><li>4.剩下的就是 needle 字符串长度小于 haystack 的情况，遍历 haystack.在遍历中判断 将要截取的字符串的首位与 needle 字符串的首位是否相同 ，如果不相同也就不需要后续截取、比较，跳过该次循环</li></ul></li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码 2"></a>代码 2</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} haystack * @param {string} needle * @return {number} */</span><span class="token keyword">var</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> haystackLen <span class="token operator">=</span> haystack<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token keyword">const</span> needleLen <span class="token operator">=</span> needle<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// needle字符串为空的情况，返回0</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>needle<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// needle字符串长度大于haystack字符串长度，肯定不匹配</span>   <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>needleLen<span class="token operator">></span>haystackLen<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// needle字符串长度等于haystack字符串长度，则直接比较两个字符是否一样即可</span>   <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>needleLen <span class="token operator">===</span> haystackLen<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> haystack <span class="token operator">===</span> needle <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// needle字符串长度小于haystack字符串长度，遍历开始；</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>haystackLen<span class="token operator">-</span>needleLen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 如果haystack字符的每一项 都不等于 needle的第一项，则肯定不匹配</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> needle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 从haystack截取和needle长度一样的字符，和needle比较是否一样</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span>needleLen<span class="token punctuation">)</span> <span class="token operator">===</span> needle<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">return</span> i<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析 2"></a>复杂度分析 2</h3><ul><li><p>时间复杂度：O(n)</p><ul><li>遍历长度可能从 1 到 n -1n−1，假设不同长度出现的概率均等，那么时间复杂度为 (n-1 + 1) / 2(n−1+1)/2时间复杂度即为O(n)</li></ul></li><li><p>空间复杂度：O(1)</p><ul><li>使用 2 个额外存储空间。</li></ul></li></ul><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路 3"></a>思路 3</h3><ul><li>双层循环对比字符;从匹配字符串 haystack 的不同位置开始遍历，判断其中是否含有查找字符串 needle。</li></ul><pre><code>    如：haystack 为 hello， needle 为 ll，依次判断 he、el、ll、lo是否完全和 ll 相等，相等即返回对应字符串在 haystack 中的下标。</code></pre><ul><li>1.边界情况处理</li><li>2.设置最外层循环，遍历次数为 0 - haystack长度减去 needle 的长度。剩余字符串长度小于 needle 长度时，肯定不匹配</li><li>3.判断匹配字符串 haystack 中该次循环使用到的字符串首尾字母是否与查找字符串 needle 首尾字母相同。<ul><li>不相等，直接跳过继续遍历。 </li><li>相等，执行第4步。</li></ul></li><li>4.判断查找字符串 needle 的长度<ul><li>长度为 1，表明匹配成功，直接返回当前长字符串下标即可</li><li>长度大于 1，执行第5步</li></ul></li><li>5.遍历对比字符串，循环判断匹配字符串 haystack 不同位置的字符是否与匹配字符串 needle 对应位置的字符相等<ul><li>不相等时，跳出循环，进行下次循环。</li><li>到最后一位还未跳出循环表明完全匹配，返回当前遍历次数（即查找字符串在匹配字符串中首次出现的位置)</li></ul></li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码 3"></a>代码 3</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> strStr <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> hayLen <span class="token operator">=</span> haystack<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> nedLen <span class="token operator">=</span> needle<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nedLen <span class="token operator">></span> hayLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nedLen <span class="token operator">===</span> hayLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> haystack <span class="token operator">===</span> needle <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> hasIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> hasIndex <span class="token operator">&lt;=</span> hayLen <span class="token operator">-</span> nedLen<span class="token punctuation">;</span> hasIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        haystack<span class="token punctuation">[</span>hasIndex<span class="token punctuation">]</span> <span class="token operator">===</span> needle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>          haystack<span class="token punctuation">[</span>hasIndex <span class="token operator">+</span> nedLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> needle<span class="token punctuation">[</span>nedLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nedLen <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> hasIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> nedIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> nedIndex <span class="token operator">&lt;</span> nedLen<span class="token punctuation">;</span> nedIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>hasIndex <span class="token operator">+</span> nedIndex<span class="token punctuation">]</span> <span class="token operator">!==</span> needle<span class="token punctuation">[</span>nedIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>nedIndex <span class="token operator">===</span> nedLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> hasIndex<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析 3"></a>复杂度分析 3</h3><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-interview</title>
      <link href="/2020/05/17/interview-react/"/>
      <url>/2020/05/17/interview-react/</url>
      
        <content type="html"><![CDATA[<h2 id="react相关知识点"><a href="#react相关知识点" class="headerlink" title="react相关知识点"></a>react相关知识点</h2><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 第一种</span><span class="token keyword">this</span><span class="token punctuation">.</span>handle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handle<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// &lt;p onClick={this.handle}>aaa&lt;/p></span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第二种</span><span class="token comment" spellcheck="true">// &lt;p onClick={this.handle}>aaa&lt;/p> </span>handle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="event"><a href="#event" class="headerlink" title="event"></a>event</h4><pre class="line-numbers language-js"><code class="language-js">clickHandler <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 阻止默认行为</span>        event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 阻止冒泡</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指向当前元素，即当前元素触发</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'current target'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指向当前元素，假象！！！</span>        <span class="token comment" spellcheck="true">// 注意，event 其实是 React 封装的。可以看 __proto__.constructor 是 SyntheticEvent 组合事件</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不是原生的 Event ，原生的 MouseEvent</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'event.__proto__.constructor'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 原生 event 如下。其 __proto__.constructor 是 MouseEvent</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nativeEvent'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nativeEvent target'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">.</span>target<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 指向当前元素，即当前元素触发</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'nativeEvent current target'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指向 document ！！！</span>        <span class="token comment" spellcheck="true">// 1. event 是 SyntheticEvent ，模拟出来 DOM 事件所有能力</span>        <span class="token comment" spellcheck="true">// 2. event.nativeEvent 是原生事件对象</span>        <span class="token comment" spellcheck="true">// 3. 所有的事件，都被挂载到 document 上</span>        <span class="token comment" spellcheck="true">// 4. 和 DOM 事件不一样，和 Vue 事件也不一样</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合成事件"><a href="#合成事件" class="headerlink" title="合成事件"></a>合成事件</h4><p><img src="/medias/react/and_event.png" alt></p><ul><li>为什么要合成事件机制？</li></ul><p>1.更好的兼容性和跨平台</p><p>2.载到document,减少内存消耗，避免频繁解绑</p><p>3.方便事件的统一管理</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h4><ul><li>1.默认父组件更新，子组件也会更新</li><li>2.所以使用shouldComponentUpdate，来避免部分子组件不需要更新而跟着父组件更新了</li><li>3.shouldComponentUpdate需要的时候才用</li><li>4.shouldComponentUpdate默认返回true</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span>nextState<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以渲染</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不可以渲染</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h4><ul><li>1.PureComponent中，shouldComponentUpdate实现了浅比较</li><li>2.在class组件中使用</li></ul><h4 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h4><ul><li>1.相当于函数组件中的PureComponent</li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h4><ul><li>1.纯函数，输入props，输出jsx</li><li>2.没有实例，没有生命周期，没有state</li><li>3.不能扩展</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>      list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h4><ul><li>1.不受state控制，只初始化state，通过ref方式获取改变的值</li><li>2.ref ，defaultValue defaultChecked， 手动操作dom元素</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'aaa'</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>nameRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> ele <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nameRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取 ref</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>nameRef<span class="token punctuation">}</span> defaultValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.非受控组件使用场景：<ul><li>1.必须手动操作dom元素，setstate实现不了</li><li>2.文件上传</li><li>3.富文本编辑器</li></ul></li></ul><h4 id="受控组件vs非受控组件"><a href="#受控组件vs非受控组件" class="headerlink" title="受控组件vs非受控组件"></a>受控组件vs非受控组件</h4><ul><li>1.优先使用受控组件</li><li>2.必须操作dom时，再使用非受控组件</li></ul><h4 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h4><ul><li>import()  React.lazy  React.Suspense</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// React.lazy</span><span class="token keyword">const</span> Demo <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./App.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// React.Suspense</span><span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span>loading<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Demo <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Suspense<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 基本用法</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">// 高阶组件</span><span class="token keyword">const</span> withMouse <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">withMouseComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        handleMouseMove <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>                y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token string">'500px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> onMouseMove<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 1. 透传所有 props 2. 增加 mouse 属性 */</span><span class="token punctuation">}</span>                    <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> mouse<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> withMouseComponent<span class="token punctuation">}</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> props<span class="token punctuation">.</span>a    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>mouse <span class="token comment" spellcheck="true">// 接收 mouse 属性</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token string">'500px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h1<span class="token operator">></span>The mouse position is <span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withMouse</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回高阶函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    handleMouseMove <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        x<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>        y<span class="token punctuation">:</span> event<span class="token punctuation">.</span>clientY      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token string">'500px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> onMouseMove<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleMouseMove<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 将当前 state 作为 props ，传递给 render （render 是一个函数组件） */</span><span class="token punctuation">}</span>            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Mouse<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>    render<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">.</span>isRequired <span class="token comment" spellcheck="true">// 必须接收一个 render 属性，而且是函数</span><span class="token punctuation">}</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token string">'500px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>Mouse render<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* render 是一个函数组件 */</span>            <span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>The mouse position is <span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 即，定义了 Mouse 组件，只有获取 x y 的能力。 * 至于 Mouse 组件如何渲染，App 说了算，通过 render prop 的方式告诉 Mouse 。 */</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="介绍一下虚拟DOM"><a href="#介绍一下虚拟DOM" class="headerlink" title="介绍一下虚拟DOM"></a>介绍一下虚拟DOM</h3><h3 id="React组件如何通讯"><a href="#React组件如何通讯" class="headerlink" title="React组件如何通讯"></a>React组件如何通讯</h3><h3 id="jsx本质是什么"><a href="#jsx本质是什么" class="headerlink" title="jsx本质是什么"></a>jsx本质是什么</h3><h3 id="Context是什么，有何用途"><a href="#Context是什么，有何用途" class="headerlink" title="Context是什么，有何用途"></a>Context是什么，有何用途</h3><h4 id="多层组件传递属性，用context"><a href="#多层组件传递属性，用context" class="headerlink" title="多层组件传递属性，用context"></a>多层组件传递属性，用context</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">// 创建 Context 填入默认值（任何一个 js 变量）</span><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">'light'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 底层组件 - 函数是组件</span><span class="token keyword">function</span> ThemeLink <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// const theme = this.context // 会报错。函数式组件没有实例，即没有 this</span>    <span class="token comment" spellcheck="true">// 函数式组件可以使用 Consumer</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>        <span class="token punctuation">{</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>link's theme is <span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 底层组件 - class 组件</span><span class="token keyword">class</span> <span class="token class-name">ThemedButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 指定 contextType 读取当前的 theme context。</span>    <span class="token comment" spellcheck="true">// static contextType = ThemeContext // 也可以用 ThemedButton.contextType = ThemeContext</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token comment" spellcheck="true">// React 会往上找到最近的 theme Provider，然后使用它的值。</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>button's theme is <span class="token punctuation">{</span>theme<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ThemedButton<span class="token punctuation">.</span>contextType <span class="token operator">=</span> ThemeContext <span class="token comment" spellcheck="true">// 指定 contextType 读取当前的 theme context。</span><span class="token comment" spellcheck="true">// 中间的组件再也不必指明往下传递 theme 了。</span><span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>ThemedButton <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ThemeLink <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            theme<span class="token punctuation">:</span> <span class="token string">'light'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTheme<span class="token punctuation">}</span><span class="token operator">></span>change theme<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>    <span class="token punctuation">}</span>    changeTheme <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            theme<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">'light'</span> <span class="token operator">?</span> <span class="token string">'dark'</span> <span class="token punctuation">:</span> <span class="token string">'light'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="渲染列表为何用key"><a href="#渲染列表为何用key" class="headerlink" title="渲染列表为何用key"></a>渲染列表为何用key</h3><ul><li>必须用key,且不能是index和random</li><li>diff算法中通过tag和key来判断，是否是sameNode</li><li>减少渲染次数，提升渲染性能</li></ul><h3 id="jsx本质"><a href="#jsx本质" class="headerlink" title="jsx本质"></a>jsx本质</h3><p>1.React.createElement 即h函数，返回vnode</p><p>2.第一个参数，可能是组件，也可能是html tag</p><p>3.组件名，首字母必须大写</p><h3 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h3><ul><li>例如做一个Modal组件，需要把modal节点放在body第一层,使用createPortal</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token operator">&lt;</span>Modal<span class="token operator">></span>MODAL<span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span><span class="token comment" spellcheck="true">// Modal.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDom <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> ReactDom<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"modal"</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>childen<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>      document<span class="token punctuation">.</span>body <span class="token comment" spellcheck="true">// dom 节点</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Portal使用场景：</li></ul><p>1.overflow:hidden</p><p>2.父组件：z-index太小</p><p>3.fixed需要放在body第一层</p><h3 id="什么是纯函数"><a href="#什么是纯函数" class="headerlink" title="什么是纯函数"></a>什么是纯函数</h3><h3 id="什么是受控组件"><a href="#什么是受控组件" class="headerlink" title="什么是受控组件"></a>什么是受控组件</h3><h3 id="何时使用异步组件"><a href="#何时使用异步组件" class="headerlink" title="何时使用异步组件"></a>何时使用异步组件</h3><h3 id="多个组件有公共逻辑，如何抽离"><a href="#多个组件有公共逻辑，如何抽离" class="headerlink" title="多个组件有公共逻辑，如何抽离"></a>多个组件有公共逻辑，如何抽离</h3><h3 id="redux如何进行异步请求"><a href="#redux如何进行异步请求" class="headerlink" title="redux如何进行异步请求"></a>redux如何进行异步请求</h3><h3 id="react-router如何配置懒加载"><a href="#react-router如何配置懒加载" class="headerlink" title="react-router如何配置懒加载"></a>react-router如何配置懒加载</h3><h3 id="PureComponent有何区别"><a href="#PureComponent有何区别" class="headerlink" title="PureComponent有何区别"></a>PureComponent有何区别</h3><h3 id="react和vue区别"><a href="#react和vue区别" class="headerlink" title="react和vue区别"></a>react和vue区别</h3><h3 id="react事件和dom事件区别"><a href="#react事件和dom事件区别" class="headerlink" title="react事件和dom事件区别"></a>react事件和dom事件区别</h3><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></li></ul><h3 id="描述redux单项数据流"><a href="#描述redux单项数据流" class="headerlink" title="描述redux单项数据流"></a>描述redux单项数据流</h3><h3 id="setState是同步还是异步"><a href="#setState是同步还是异步" class="headerlink" title="setState是同步还是异步"></a>setState是同步还是异步</h3><h4 id="不可变值"><a href="#不可变值" class="headerlink" title="不可变值"></a>不可变值</h4><ul><li>1.不能直接修改state，使用setState<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 数组</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>// 对象<br>this.setState({<br>  obj:{…this.state.obj,{a:10}}<br>})</p><pre><code>+ 2.可能是异步更新：```jsstate = {  count: 0}// 第一种 ，同步this.setState({  count: this.state.count+1})console.log(this.state.count) // 0// 第二种，异步，回调函数this.setState({  count: this.state.count+1},() =&gt; {  console.log(this.state.count) // 1})// 第三种，在setTimeout中是，同步，不需要回调函数setTimeout(() =&gt; {  this.setState({  count: this.state.count+1})console.log(this.state.count) // 1},0)// 第四种，自定义的dom事件，setState是同步componentDidMount(){  document.body.addEventListener(&#39;click&#39;,() =&gt; {    this.setState({      count: this.state.count+1    })    console.log(this.state.count) // 1  })}</code></pre><ul><li>3.可能会被合并：<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 传入对象，会被合并。执行3次，结果还是1</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>// 传入函数，不会被合并。执行结果是3<br>this.setState((prevState,props) =&gt; {<br>  return {<br>    count:prevState + 1<br>  }<br>})<br>this.setState((prevState,props) =&gt; {<br>  return {<br>    count:prevState + 1<br>  }<br>})<br>this.setState((prevState,props) =&gt; {<br>  return {<br>    count:prevState + 1<br>  }<br>})</p><pre><code>#### setstate到底是异步还是同步1.setstate无所谓是同步还是异步2.看是否能命中batchUpdate机制3.判断isBatchingUpdates哪些不能名字batchupdate机制1.setTimeout2.自定义的dom事件### vdom和diff只比较同一层级，不跨级比较tag不相同，则直接删除重建，不再深度比较tag和key相同，则一样### 基于react设计一个todolist(组件结构，redux state 数据结构)### jsx如何渲染页面### setstate之后如何更新页面</code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sec-interview</title>
      <link href="/2020/05/17/interview-sec/"/>
      <url>/2020/05/17/interview-sec/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http-interview</title>
      <link href="/2020/05/17/interview-http/"/>
      <url>/2020/05/17/interview-http/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTP和TCP的不同"><a href="#HTTP和TCP的不同" class="headerlink" title="HTTP和TCP的不同"></a>HTTP和TCP的不同</h3><h3 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h3><h3 id="输入URL到页面的呈现"><a href="#输入URL到页面的呈现" class="headerlink" title="输入URL到页面的呈现"></a>输入URL到页面的呈现</h3><h3 id="浏览器为什么要跨域？"><a href="#浏览器为什么要跨域？" class="headerlink" title="浏览器为什么要跨域？"></a>浏览器为什么要跨域？</h3><h3 id="CORS跨域的原理"><a href="#CORS跨域的原理" class="headerlink" title="CORS跨域的原理"></a>CORS跨域的原理</h3><ul><li><p>跨域资源共享(CORS)是一种机制，是W3C标准。它允许浏览器向跨源服务器，发出XMLHttpRequest或Fetch请求。并且整个CORS通信过程都是浏览器自动完成的，不需要用户参与。</p></li><li><p>而使用这种跨域资源共享的前提是，浏览器必须支持这个功能，并且服务器端也必须同意这种”跨域”请求。因此实现CORS的关键是服务器需要服务器。通常是有以下几个配置：    </p><ul><li>Access-Control-Allow-Origin</li><li>Access-Control-Allow-Methods</li><li>Access-Control-Allow-Headers</li><li>Access-Control-Allow-Credentials</li><li>Access-Control-Max-Age</li></ul></li><li><p>过程分析：</p><ul><li>1.浏览器先根据同源策略对前端页面和后台交互地址做匹配，若同源，则直接发送数据请求；若不同源，则发送跨域请求。</li><li>2.服务器收到浏览器跨域请求后，根据自身配置返回对应文件头。若未配置过任何允许跨域，则文件头里不包含 Access-Control-Allow-origin 字段，若配置过域名，则返回 Access-Control-Allow-origin + 对应配置规则里的域名的方式。</li><li>3.浏览器根据接受到的 响应头里的 Access-Control-Allow-origin 字段做匹配，若无该字段，说明不允许跨域，从而抛出一个错误；若有该字段，则对字段内容和当前域名做比对，如果同源，则说明可以跨域，浏览器接受该响应；若不同源，则说明该域名不可跨域，浏览器不接受该响应，并抛出一个错误。</li></ul></li></ul><h3 id="http请求可以怎么拦截"><a href="#http请求可以怎么拦截" class="headerlink" title="http请求可以怎么拦截"></a>http请求可以怎么拦截</h3><ul><li>在浏览器和服务器进行传输的时候，可以被nginx代理所拦截，也可以被网关拦截</li></ul><h3 id="https的加密方式"><a href="#https的加密方式" class="headerlink" title="https的加密方式"></a>https的加密方式</h3><ul><li>HTTPS主要是采用对称密钥加密和非对称密钥加密组合而成的混合加密机制进行传输。</li><li>也就是发送密文的一方用”对方的公钥”进行加密处理”对称的密钥”，然后对方在收到之后使用自己的私钥进行解密得到”对称的密钥”，这在确保双发交换的密钥是安全的前提下使用对称密钥方式进行通信。<br><a href="https://github.com/LinDaiDai/niubility-coding-js/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTPS%E9%9D%A2%E8%AF%95%E9%97%AE%E7%AD%94.md" target="_blank" rel="noopener">http相关</a></li></ul><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p><a href="https://juejin.im/post/5e2d7d3a6fb9a02fec665157#heading-6" target="_blank" rel="noopener">浏览器缓存_1</a><br><a href="https://juejin.im/post/5e2d7d3a6fb9a02fec665157#comment" target="_blank" rel="noopener">浏览器缓存_2</a><br><a href="https://juejin.im/post/5c22ee806fb9a049fb43b2c5" target="_blank" rel="noopener">浏览器缓存_3</a></p><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p><a href="https://juejin.im/post/5eb0f8aaf265da7ba65f7ba2" target="_blank" rel="noopener">nginx</a></p><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><p><a href="https://juejin.im/post/5e948bbbf265da47f2561705#comment" target="_blank" rel="noopener">跨域解决方案</a></p><h3 id="HTTP-1-0和HTTP-1-1有什么区别"><a href="#HTTP-1-0和HTTP-1-1有什么区别" class="headerlink" title="HTTP/1.0和HTTP/1.1有什么区别"></a>HTTP/1.0和HTTP/1.1有什么区别</h3><ul><li>1.长连接： HTTP/1.1支持长连接和请求的流水线，在一个TCP连接上可以传送多个HTTP请求，避免了因为多次建立TCP连接的时间消耗和延时</li><li>2.缓存处理： HTTP/1.1引入Entity tag，If-Unmodified-Since, If-Match, If-None-Match等新的请求头来控制缓存，详见浏览器缓存小节</li><li>3.带宽优化及网络连接的使用： HTTP1.1则在请求头引入了range头域，支持断点续传功能</li><li>4.Host头处理： 在HTTP/1.0中认为每台服务器都有唯一的IP地址，但随着虚拟主机技术的发展，多个主机共享一个IP地址愈发普遍，HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会400错误</li></ul><h3 id="介绍一下HTTP-2-0新特性"><a href="#介绍一下HTTP-2-0新特性" class="headerlink" title="介绍一下HTTP/2.0新特性"></a>介绍一下HTTP/2.0新特性</h3><ul><li>1.多路复用： 即多个请求都通过一个TCP连接并发地完成</li><li>2.服务端推送： 服务端能够主动把资源推送给客户端</li><li>3.新的二进制格式： HTTP/2采用二进制格式传输数据，相比于HTTP/1.1的文本格式，二进制格式具有更好的解析性和拓展性</li><li>4.header压缩： HTTP/2压缩消息头，减少了传输数据的大小</li></ul><h3 id="说说HTTP-2-0多路复用基本原理以及解决的问题"><a href="#说说HTTP-2-0多路复用基本原理以及解决的问题" class="headerlink" title="说说HTTP/2.0多路复用基本原理以及解决的问题"></a>说说HTTP/2.0多路复用基本原理以及解决的问题</h3><ul><li>1.TCP慢启动： TCP连接建立后，会经历一个先慢后快的发送过程，就像汽车启动一般，如果我们的网页文件(HTML/JS/CSS/icon)都经过一次慢启动，对性能是不小的损耗。另外慢启动是TCP为了减少网络拥塞的一种策略，我们是没有办法改变的</li><li>2.多条TCP连接竞争带宽： 如果同时建立多条TCP连接，当带宽不足时就会竞争带宽，影响关键资源的下载。</li><li>3.HTTP/1.1队头阻塞： 尽管HTTP/1.1长链接可以通过一个TCP连接传输多个请求，但同一时刻只能处理一个请求，当前请求未结束前，其他请求只能处于阻塞状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-字符串-125-验证回文字符串</title>
      <link href="/2020/05/17/leetcode-zi-fu-chuan-125-yan-zheng-hui-wen-zi-fu-chuan/"/>
      <url>/2020/05/17/leetcode-zi-fu-chuan-125-yan-zheng-hui-wen-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a>125. 验证回文串</h1><h3 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p></li><li><p>说明：本题中，我们将空字符串定义为有效的回文串。</p></li><li><p>示例1:</p><pre><code>  输入: &quot;A man, a plan, a canal: Panama&quot;  输出: true</code></pre></li><li><p>示例2:</p><pre><code>  输入: &quot;race a car&quot;  输出: false</code></pre></li></ul><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h3><ul><li><p>去除字符串中的非字符和非数字，然后转成数组，反转。将原字符和新字符比较，看是否相等</p></li><li><p>详解</p><ul><li>1.将传入的字符串，利用 toLowerCase() 方法统一转化为小写，再利用正则表达式 /[ ^ A-Za-z0-9]/g 在字符串中去除非字母和数字，得到字符串 arr。</li><li>2.将字符串 arr 转换为数组，利用数组的方法反转数组，再将数组转为字符串 newArr。</li><li>3.将字符串 arr 和 字符串 newArr 进行比较，相等即为回文串，不相等则不为回文串。</li></ul></li></ul><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/**    * @param {string} s    * @return {boolean}    */</span>    <span class="token keyword">const</span> isPalindrome <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newStr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^a-zA-Z0-9]/g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> newStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newStr <span class="token operator">===</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析1"><a href="#复杂度分析1" class="headerlink" title="复杂度分析1"></a>复杂度分析1</h3><ul><li>时间复杂度：O(n)<ul><li>该解法中，toLowerCase(), replace(), split(), reverse(), join() 的时间复杂度都为 ，且都在独立的循环中执行，因此，总的时间复杂度依然为O(n) 。</li></ul></li><li>空间复杂度：O(n)<ul><li>该解法中，申请了 1 个大小为  的字符串和 1 个大小为  的数组空间，因此，空间复杂度为  ，即 O(n)。</li></ul></li></ul><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2:"></a>思路2:</h3><ul><li><p>首先，去除字符串中的非字母和数字，再将字符串转换为数组，再对数组首尾一一比较，即可得出结果。</p></li><li><p>详解：</p><ul><li>1.将传入的字符串，利用 toLowerCase() 方法统一转化为小写，再利用正则表达式 /[ ^ A-Za-z0-9]/g 在字符串中去除非字母和数字，最后将字符串转换为数组。</li><li>2.转换数组后，利用循环一一比较元素，先比较第一个和最后一个，再比较第二个和倒数二个，依次类推，若中间有不相等则不是回文串，反之，则是回文串。</li></ul></li></ul><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class="line-numbers language-js"><code class="language-js">   <span class="token comment" spellcheck="true">/**     * @param {string}     * @return {boolean}     */</span>    <span class="token keyword">const</span> isPalindrome <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将传入的字符串,统一转化为小写,同时去除非字母和数字,在转换为数组</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^A-Za-z0-9]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环比较元素</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从首尾开始, 一一比较元素是否相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若相等,即第二个元素和倒数第二个元素继续比较,依次类推</span>        i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        j <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 只要有一个相对位置上不相等,既不是回文串</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 是回文串</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析2"><a href="#复杂度分析2" class="headerlink" title="复杂度分析2"></a>复杂度分析2</h3><ul><li>时间复杂度：O(n)<ul><li>该解法中 while 循环最多执行 n/2n/2 次，即回文时，因此，时间复杂度为 O(n)</li></ul></li><li>空间复杂度：O(n)<ul><li>O(n) 该解法中，申请了 1 个大小为 nn 的数组空间，因此，空间复杂度为 O(n)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-字符串-387-字符串中的第一个唯一字符</title>
      <link href="/2020/05/17/leetcode-zi-fu-chuan-387-zi-fu-chuan-zhong-de-di-yi-ge-wei-yi-zi-fu/"/>
      <url>/2020/05/17/leetcode-zi-fu-chuan-387-zi-fu-chuan-zhong-de-di-yi-ge-wei-yi-zi-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387. 字符串中的第一个唯一字符"></a>387. 字符串中的第一个唯一字符</h1><h3 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</li></ul><p>示例1:</p><pre><code>    s = &quot;leetcode&quot;    返回 0.    s = &quot;loveleetcode&quot;,    返回 2.</code></pre><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h3><ul><li><p>某个字符从头开始开始的索引和从尾开始找的索引如果相等，就说明这个字符只出现了一次</p></li><li><p>详解</p><ul><li>1.从头到尾遍历一遍字段串；</li><li>2.判断每个位置的字符的 index() 和 lastIndexOf() 的结果是否相等；</li></ul></li></ul><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/**     * @param {string} s     * @return {number}     */</span>    <span class="token keyword">const</span> firstUniqChar <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">===</span> s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2:"></a>思路2:</h3><ul><li><p>遍历两次。第一次遍历，用一个哈希对象记录所有字符的出现次数；第二次遍历，找出哈希对象中只出现一次的字符的下标</p></li><li><p>详解：</p><ul><li>1.第一次遍历，用一个哈希对象记录所有字符的出现次数；</li><li>2.第二次遍历，找出哈希对象中只出现一次的字符的下标；</li></ul></li></ul><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/**     * @param {string} s     * @return {number}     */</span>    <span class="token keyword">const</span> firstUniqChar <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">,</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-字符串-344-反转字符串</title>
      <link href="/2020/05/17/leetcode-zi-fu-chuan-344-fan-zhuan-zi-fu-chuan/"/>
      <url>/2020/05/17/leetcode-zi-fu-chuan-344-fan-zhuan-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a>344. 反转字符串</h1><h4 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h4><p>（中文版）编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。<br>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。<br>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例1:</p><blockquote><p>Input: [“h”,”e”,”l”,”l”,”o”]<br>Output: [“o”,”l”,”l”,”e”,”h”]</p></blockquote><p>示例2:</p><blockquote><p>Input: [“H”,”a”,”n”,”n”,”a”,”h”]<br>Output: [“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>reverse 大法： JavaScript 数组 API reverse()</li><li>交换法：遍历至中点，交换首尾字母的位置</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * reverse大法 * @param {character[]} s * @return {void} Do not return anything, modify s in-place instead. */</span><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 交换法-1 * @param {character[]} s * @return {void}  */</span><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> len <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 交换法-2 * @param {character[]}  * @return {void}  */</span><span class="token keyword">var</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> t <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="首尾交换法三"><a href="#首尾交换法三" class="headerlink" title="首尾交换法三"></a>首尾交换法三</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>首尾替换法，逐位遍历，进行交换</li></ul><h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><ul><li>1.设置变量 i = 0；</li><li>2.替换字符串的第i位和倒数第 i 位，替换方式：使用es6的解构赋值进行变量的交换；</li><li>3.变量 i + 1，继续替换替换字符串的第 i 位和倒数第 i 位；</li><li>4.直到 i 大于字符串s的长度的中位数，完成真个字符串的反转</li></ul><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/**     * @param {character[]} s     * @return {void} Do not return anything, modify s in-place instead.     */</span>    <span class="token keyword">const</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="首尾交换法四"><a href="#首尾交换法四" class="headerlink" title="首尾交换法四"></a>首尾交换法四</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>中间变量首尾替换法，逐位遍历，进行交换</li></ul><h4 id="详解-1"><a href="#详解-1" class="headerlink" title="详解"></a>详解</h4><ul><li>1.设置变量 i = 0；</li><li>2.替换字符串的第i位和倒数第i位，替换方式：设置一个中间变量，替换两个字符串的值；</li><li>3.变量 i + 1，继续替换替换字符串的第 i 位和倒数第 i 位；</li><li>4.直到 i 大于字符串s的长度的中位数，完成真个字符串的反转</li></ul><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/**     * @param {character[]} s     * @return {void} Do not return anything, modify s in-place instead.     */</span>    <span class="token keyword">const</span> reverseString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span>            s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>temp        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-interview</title>
      <link href="/2020/05/16/interview-js/"/>
      <url>/2020/05/16/interview-js/</url>
      
        <content type="html"><![CDATA[<h3 id="点击一个input依次触发的事件"><a href="#点击一个input依次触发的事件" class="headerlink" title="点击一个input依次触发的事件"></a>点击一个input依次触发的事件</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    text<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    text<span class="token punctuation">.</span>onfocus <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onfocus'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    text<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onmousedown'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    text<span class="token punctuation">.</span>onmouseenter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onmouseenter'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 依次打印</span>    <span class="token string">'onmouseenter'</span>    <span class="token string">'onmousedown'</span>    <span class="token string">'onfocus'</span>    <span class="token string">'onclick'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原生的自定义事件"><a href="#原生的自定义事件" class="headerlink" title="原生的自定义事件"></a>原生的自定义事件</h3><ul><li><p>语法</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span>typeArg<span class="token punctuation">,</span> eventInit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>typeArg：事件名称</p></li><li><p>eventInit：参数</p><ul><li>“bubbles”，可选，Boolean类型，默认值为 false，表示该事件是否冒泡。</li><li>“cancelable”，可选，Boolean类型，默认值为 false， 表示该事件能否被取消。</li><li>“composed”，可选，Boolean类型，默认值为 false，指示事件是否会在影子DOM根节点之外触发侦听器。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token comment" spellcheck="true">// 创建一个支持冒泡且不能被取消的look事件</span><span class="token keyword">var</span> ev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"look"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"bubbles"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"cancelable"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>// 事件可以在任何元素触发，不仅仅是document<br>myDiv.dispatchEvent(ev);</p><pre><code>### typeof和instanceof的区别+ typeof表示是对某个变量类型的检测，基本数据类型除了null都能正常的显示为对应的类型，引用类型除了函数会显示为&#39;function&#39;，其它都显示为object。+ 而instanceof它主要是用于检测某个构造函数的原型对象在不在某个对象的原型链上。+ 手写实现instanceof```js    function my_instanceof(left,right){        let proto = Object.getPrototypeOf(left)        whild(true){            if(proto === null ) return false;            if(proto === right.prototype )return true;            proto = Object.getPrototypeOf(proto)        }    }</code></pre><h3 id="一句话描述一下this"><a href="#一句话描述一下this" class="headerlink" title="一句话描述一下this"></a>一句话描述一下this</h3><ul><li>指向最后调用函数的那个对象，是函数运行时内部自动生成的一个内部对象，只能在函数内部使用</li></ul><h3 id="函数内的this是在什么时候确定的？"><a href="#函数内的this是在什么时候确定的？" class="headerlink" title="函数内的this是在什么时候确定的？"></a>函数内的this是在什么时候确定的？</h3><ul><li>函数调用时，指向最后调用的那个对象</li></ul><h3 id="JSONP的原理以及手写一个实现"><a href="#JSONP的原理以及手写一个实现" class="headerlink" title="JSONP的原理以及手写一个实现"></a>JSONP的原理以及手写一个实现</h3><ul><li><p>基本原理：主要就是利用 script 标签的src属性没有跨域的限制，通过指向一个需要访问的地址，由服务端返回一个预先定义好的 Javascript 函数的调用，并且将服务器数据以该函数参数的形式传递过来，此方法需要前后端配合完成。</p></li><li><p>执行过程：</p><ul><li>1.前端定义一个解析函数(如: jsonpCallback = function (res) {})</li><li>2.通过params的形式包装script标签的请求参数，并且声明执行函数(如cb=jsonpCallback)</li><li>3.后端获取到前端声明的执行函数(jsonpCallback)，并以带上参数且调用执行函数的方式传递给前端</li><li>4.前端在script标签返回资源的时候就会去执行jsonpCallback并通过回调函数的方式拿到数据了</li></ul></li><li><p>缺点：</p><ul><li>只能进行get请求</li></ul></li><li><p>优点：</p><ul><li>兼容性好，在一些古老的浏览器中都可以运行</li></ul></li><li><p>代码实现：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      url<span class="token punctuation">,</span>      params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      callbackKey <span class="token operator">=</span> <span class="token string">'cb'</span><span class="token punctuation">,</span>      callback  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 定义本地的唯一callbackId，若是没有的话则初始化为1</span>      JSONP<span class="token punctuation">.</span>callbackId <span class="token operator">=</span> JSONP<span class="token punctuation">.</span>callbackId <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> callbackId <span class="token operator">=</span> JSONP<span class="token punctuation">.</span>callbackId<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 把要执行的回调加入到JSON对象中，避免污染window</span>      JSONP<span class="token punctuation">.</span>callbacks <span class="token operator">=</span> JSONP<span class="token punctuation">.</span>callbacks <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      JSONP<span class="token punctuation">.</span>callbacks<span class="token punctuation">[</span>callbackId<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 把这个名称加入到参数中: 'cb=JSONP.callbacks[1]'</span>      params<span class="token punctuation">[</span>callbackKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`JSONP.callbacks[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>callbackId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]`</span></span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 得到'id=1&amp;cb=JSONP.callbacks[1]'</span>      <span class="token keyword">const</span> paramString <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 创建 script 标签</span>      <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>paramString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// id自增，保证唯一</span>      JSONP<span class="token punctuation">.</span>callbackId<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 使用</span>  <span class="token function">JSONP</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      url<span class="token punctuation">:</span> <span class="token string">'http://localhost:8080/api/jsonps'</span><span class="token punctuation">,</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>          a<span class="token punctuation">:</span> <span class="token string">'2&amp;b=3'</span><span class="token punctuation">,</span>          b<span class="token punctuation">:</span> <span class="token string">'4'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      callbackKey<span class="token punctuation">:</span> <span class="token string">'cb'</span><span class="token punctuation">,</span>      callback <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说一下回流和重绘"><a href="#说一下回流和重绘" class="headerlink" title="说一下回流和重绘"></a>说一下回流和重绘</h3><h3 id="说一下原型链"><a href="#说一下原型链" class="headerlink" title="说一下原型链"></a>说一下原型链</h3><h3 id="详细说一下instanceof"><a href="#详细说一下instanceof" class="headerlink" title="详细说一下instanceof"></a>详细说一下instanceof</h3><h3 id="V8的垃圾回收是发生在什么时候？"><a href="#V8的垃圾回收是发生在什么时候？" class="headerlink" title="V8的垃圾回收是发生在什么时候？"></a>V8的垃圾回收是发生在什么时候？</h3></li><li><p>V8引擎帮助我们实现了自动的垃圾回收管理，利用浏览器渲染页面的空闲时间进行垃圾回收。</p><h3 id="说一下垃圾回收机制"><a href="#说一下垃圾回收机制" class="headerlink" title="说一下垃圾回收机制"></a>说一下垃圾回收机制</h3><p><a href="https://juejin.im/post/5e8b261ae51d4546c0382ab4#heading-20" target="_blank" rel="noopener">垃圾回收机制</a></p></li></ul><h3 id="setTimeout的执行原理-EventLoop-requestAnimationFrame"><a href="#setTimeout的执行原理-EventLoop-requestAnimationFrame" class="headerlink" title="setTimeout的执行原理(EventLoop,requestAnimationFrame)"></a>setTimeout的执行原理(EventLoop,requestAnimationFrame)</h3><p><a href="https://juejin.im/post/5e621f5fe51d452700567c32#comment" target="_blank" rel="noopener">setTimeout的执行原理</a></p><h3 id="this-apply-call"><a href="#this-apply-call" class="headerlink" title="this/apply/call"></a>this/apply/call</h3><p><a href="https://juejin.im/post/5e3e796d518825495b298878#comment" target="_blank" rel="noopener">this/apply/call</a><br><a href="https://juejin.im/post/5e6358256fb9a07cd80f2e70" target="_blank" rel="noopener">this详解</a></p><h3 id="promise-未读"><a href="#promise-未读" class="headerlink" title="promise(未读)"></a>promise(未读)</h3><p><a href="https://juejin.im/post/5e58c618e51d4526ed66b5cf" target="_blank" rel="noopener">promise_1</a><br><a href="https://juejin.im/post/5d0da5c8e51d455ca0436271" target="_blank" rel="noopener">promise_2</a></p><h3 id="js封装（未读）"><a href="#js封装（未读）" class="headerlink" title="js封装（未读）"></a>js封装（未读）</h3><p><a href="https://juejin.im/post/5e707417e51d45272054d5d3#comment" target="_blank" rel="noopener">js封装</a></p><h3 id="js继承-未读"><a href="#js继承-未读" class="headerlink" title="js继承(未读)"></a>js继承(未读)</h3><p><a href="https://juejin.im/post/5e75e22951882549027687f9#comment" target="_blank" rel="noopener">js继承</a></p><h3 id="js多态-未读"><a href="#js多态-未读" class="headerlink" title="js多态(未读)"></a>js多态(未读)</h3><p><a href="https://juejin.im/post/5e945a15f265da47d31231dd#comment" target="_blank" rel="noopener">js多态</a></p><h3 id="js类型转换-未读"><a href="#js类型转换-未读" class="headerlink" title="js类型转换(未读)"></a>js类型转换(未读)</h3><p><a href="https://juejin.im/post/5e86e73e518825739e0704b4#heading-34" target="_blank" rel="noopener">js类型转换</a></p><h3 id="js总结"><a href="#js总结" class="headerlink" title="js总结"></a>js总结</h3><p><a href="https://juejin.im/post/5e8dc6fd6fb9a03c97753dea#comment" target="_blank" rel="noopener">js总结</a></p><h3 id="js设计模式-未读"><a href="#js设计模式-未读" class="headerlink" title="js设计模式(未读)"></a>js设计模式(未读)</h3><p><a href="https://juejin.im/post/5e021eb96fb9a01628014095#comment" target="_blank" rel="noopener">JavaScript设计模式es6（23种)</a></p><h3 id="js上下文-未读"><a href="#js上下文-未读" class="headerlink" title="js上下文(未读)"></a>js上下文(未读)</h3><p><a href="https://muyiy.cn/blog/1/1.1.html#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">js上下文</a></p><h3 id="作用域和闭包-未读"><a href="#作用域和闭包-未读" class="headerlink" title="作用域和闭包(未读)"></a>作用域和闭包(未读)</h3><p><a href="https://muyiy.cn/blog/2/2.1.html" target="_blank" rel="noopener">作用域和闭包</a></p><h3 id="this全面解析-未读"><a href="#this全面解析-未读" class="headerlink" title="this全面解析(未读)"></a>this全面解析(未读)</h3><p><a href="https://muyiy.cn/blog/3/3.1.html" target="_blank" rel="noopener">this全面解析</a></p><h3 id="深浅拷贝原理-未读"><a href="#深浅拷贝原理-未读" class="headerlink" title="深浅拷贝原理(未读)"></a>深浅拷贝原理(未读)</h3><p><a href="https://muyiy.cn/blog/4/4.1.html" target="_blank" rel="noopener">深浅拷贝原理</a></p><h3 id="原型Prototype-未读"><a href="#原型Prototype-未读" class="headerlink" title="原型Prototype(未读)"></a>原型Prototype(未读)</h3><p><a href="https://muyiy.cn/blog/5/5.1.html" target="_blank" rel="noopener">原型Prototype</a></p><h3 id="高阶函数-未读"><a href="#高阶函数-未读" class="headerlink" title="高阶函数(未读)"></a>高阶函数(未读)</h3><p><a href="https://muyiy.cn/blog/6/6.1.html" target="_blank" rel="noopener">高阶函数</a></p><h3 id="节流防抖-未读"><a href="#节流防抖-未读" class="headerlink" title="节流防抖(未读)"></a>节流防抖(未读)</h3><p><a href="https://muyiy.cn/blog/7/7.1.html" target="_blank" rel="noopener">节流防抖</a></p><h3 id="手写js系列-未读"><a href="#手写js系列-未读" class="headerlink" title="手写js系列(未读)"></a>手写js系列(未读)</h3><p><a href="https://juejin.im/post/5d635566e51d4561e224a360#comment" target="_blank" rel="noopener">手写js系列</a></p><h3 id="函数的arguments为什么不是数组？如何转化成数组？"><a href="#函数的arguments为什么不是数组？如何转化成数组？" class="headerlink" title="函数的arguments为什么不是数组？如何转化成数组？"></a>函数的arguments为什么不是数组？如何转化成数组？</h3><ul><li><p>因为arguments本身并不能调用数组方法，它是一个另外一种对象类型，只不过属性从0开始排，依次为0，1，2…最后还有callee和length属性。我们也把这样的对象称为类数组。</p></li><li><p>常见的类数组还有：</p></li></ul><p>1.用getElementsByTagName/ClassName()获得的HTMLCollection</p><p>2.用querySelector获得的nodeList</p><h4 id="类数组转数组"><a href="#类数组转数组" class="headerlink" title="类数组转数组"></a>类数组转数组</h4><ul><li><p>Array.prototype.slice.call()</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Array.from()</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ES6展开符</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用concat+apply</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="forEach中return有效果吗？如何中断forEach循环？"><a href="#forEach中return有效果吗？如何中断forEach循环？" class="headerlink" title="forEach中return有效果吗？如何中断forEach循环？"></a>forEach中return有效果吗？如何中断forEach循环？</h3><h4 id="在forEach中用return不会返回，函数会继续执行。"><a href="#在forEach中用return不会返回，函数会继续执行。" class="headerlink" title="在forEach中用return不会返回，函数会继续执行。"></a>在forEach中用return不会返回，函数会继续执行。</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无效</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中断方法"><a href="#中断方法" class="headerlink" title="中断方法"></a>中断方法</h4><ul><li>1.使用try监视代码块，在需要中断的地方抛出异常。</li><li>2.官方推荐方法（替换方法）：用every和some替代forEach函数。every在碰到return false的时候，中止循环。some在碰到return true的时候，中止循环</li></ul><h3 id="JS判断数组中是否包含某个值"><a href="#JS判断数组中是否包含某个值" class="headerlink" title="JS判断数组中是否包含某个值"></a>JS判断数组中是否包含某个值</h3><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><blockquote><p>此方法判断数组中是否存在某个值，如果存在，则返回数组元素的下标，否则返回-1。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><blockquote><p>此方法判断数组中是否存在某个值，如果存在返回true，否则返回false   </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><blockquote><p>返回数组中满足条件的第一个元素的值，如果没有，返回undefined</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><blockquote><p>返回数组中满足条件的第一个元素的下标，如果没有找到，返回-1</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="JS中flat—数组扁平化"><a href="#JS中flat—数组扁平化" class="headerlink" title="JS中flat—数组扁平化"></a>JS中flat—数组扁平化</h3><ul><li>let ary = [1, [2, [3, [4, 5]]], 6];// -&gt; [1, 2, 3, 4, 5, 6]</li></ul><h4 id="1-调用ES6中的flat方法"><a href="#1-调用ES6中的flat方法" class="headerlink" title="1. 调用ES6中的flat方法"></a>1. 调用ES6中的flat方法</h4><pre class="line-numbers language-js"><code class="language-js">ary <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> item <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reduce迭代"><a href="#reduce迭代" class="headerlink" title="reduce迭代"></a>reduce迭代</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">:</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//只要有一个元素有数组，那么循环继续</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ary<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>isArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模拟实现new"><a href="#模拟实现new" class="headerlink" title="模拟实现new"></a>模拟实现new</h3><h4 id="new做了什么"><a href="#new做了什么" class="headerlink" title="new做了什么"></a>new做了什么</h4><ul><li>1.创建一个新对象，并继承其构造函数的prototype，这一步是为了继承构造函数原型上的属性和方法</li><li>2.执行构造函数，方法内的this被指定为该新实例，这一步是为了执行构造函数内的赋值操作</li><li>3.返回新实例（规范规定，如果构造方法返回了一个对象，那么返回该对象，否则返回第一步创建的新对象）</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// new是关键字,这里我们用函数来模拟,new Foo(args) &lt;=> myNew(Foo, args)</span><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 创建新对象,并继承构造方法的prototype属性, 这一步是为了把obj挂原型链上, 相当于obj.__proto__ = Foo.prototype</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行构造方法, 并为其绑定新this, 这一步是为了让构造方法能进行this.name = name之类的操作, args是构造方法的入参, 因为这里用myNew模拟, 所以入参从myNew传入</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 如果构造方法已经return了一个对象，那么就返回该对象，否则返回myNew创建的新对象（一般情况下，构造方法不会返回新实例，但使用者可以选择返回新实例来覆盖new创建的对象）</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span> <span class="token operator">?</span> result <span class="token punctuation">:</span> obj<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试：</span><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// Foo {name: "zhangsan"}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="js继承"><a href="#js继承" class="headerlink" title="js继承"></a>js继承</h3><h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><ul><li>原型链继承的原理很简单，直接让子类的原型对象指向父类实例，当子类实例找不到对应的属性和方法时，就会往它的原型对象，也就是父类实例上找，从而实现对父类的属性和方法的继承</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">const</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// bbb</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// bbb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缺点：<ul><li>1.由于所有Child实例原型都指向同一个Parent实例, 因此对某个Child实例的父类引用类型变量修改会影响所有的Child实例</li><li>2.在创建子类实例时无法向父类构造传参, 即没有实现super()的功能</li></ul></li></ul><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><ul><li>构造函数继承，即在子类的构造函数中执行父类的构造函数，并为其绑定子类的this，让父类的构造函数把成员属性和方法都挂到子类的this上去，这样既能避免实例之间共享一个原型实例，又能向父类构造方法传参</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name'<span class="token punctuation">;</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行父类构造方法并绑定子类的this, 使得父类中的属性能够赋到子类的this上</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaa </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缺点：<ul><li>继承不到父类原型上的属性和方法</li></ul></li></ul><h4 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h4><ul><li>既然原型链继承和构造函数继承各有互补的优缺点, 那么我们为什么不组合起来使用呢, 所以就有了综合二者的组合式继承</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缺点：<ul><li>每次创建子类实例都执行了两次构造函数(Parent.call()和new Parent())，虽然这并不影响对父类的继承，但子类创建实例时，原型中会存在两份相同的属性和方法，这并不优雅</li></ul></li></ul><h4 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h4><ul><li>为了解决构造函数被执行两次的问题, 我们将指向父类实例改为指向父类原型, 减去一次构造函数的执行</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构造函数继承</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原型链继承</span><span class="token comment" spellcheck="true">// Child.prototype = new Parent()</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将`指向父类实例`改为`指向父类原型`</span>Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token comment" spellcheck="true">//测试</span><span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>child<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// ['zhangsan']</span>parent<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// 报错, 找不到getName()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-interview</title>
      <link href="/2020/05/16/interview-css/"/>
      <url>/2020/05/16/interview-css/</url>
      
        <content type="html"><![CDATA[<h3 id="如何解决a标点击后hover事件失效的问题"><a href="#如何解决a标点击后hover事件失效的问题" class="headerlink" title="如何解决a标点击后hover事件失效的问题?"></a>如何解决a标点击后hover事件失效的问题?</h3><ul><li>调换a标签css的顺序</li><li>把顺序改成 link -&gt; visited -&gt; hover -&gt; active</li><li>link：未访问时的样式</li><li>visited：访问后的样式</li><li>hover：鼠标移入时的样式</li><li>active：鼠标点击后的样式</li></ul><h3 id="实现水平垂直居中的几种方式"><a href="#实现水平垂直居中的几种方式" class="headerlink" title="实现水平垂直居中的几种方式"></a>实现水平垂直居中的几种方式</h3><ul><li><p>Flex布局（子元素是块级元素）</p><pre class="line-numbers language-css"><code class="language-css">  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box-center</span></span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> greenyellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Flex布局</p><pre class="line-numbers language-css"><code class="language-css">  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>      <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>      <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box-center</span></span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> greenyellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>+ 绝对定位实现(定位元素定宽定高)```css    .box {        position: relative;        height: 100px;        width: 100px;        background-color: pink;    }.box-center{  position: absolute;  left: 0;  right: 0;  bottom: 0;  top: 0;  margin: auto;  width: 50px;  height: 50px;  background-color: greenyellow;}</code></pre><h3 id="实现一个一直旋转的动画"><a href="#实现一个一直旋转的动画" class="headerlink" title="实现一个一直旋转的动画"></a>实现一个一直旋转的动画</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> spin <span class="token number">2</span>s linear infinite<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token atrule"><span class="token rule">@keyframes</span> spin</span> <span class="token punctuation">{</span>    <span class="token selector">from </span><span class="token punctuation">{</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token selector">to </span><span class="token punctuation">{</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="animation介绍一下"><a href="#animation介绍一下" class="headerlink" title="animation介绍一下"></a>animation介绍一下</h3><pre><code>    animation: name duration timing-function delay iteration-count direction;</code></pre><p>|值|描述|<br>|name|绑定到选择器的 keyframe 名称|<br>|duration|完成动画所花费的时间，以秒或毫秒计。|<br>|timing-function|动画的速度曲线。(ease|linear|ease-in|cubic-bezier(n,n,n,n))|<br>|delay|在动画开始之前的延迟。(2s)|<br>|iteration-count|动画应该播放的次数。(n | infinite) n次/无限|<br>|direction|是否应该轮流反向播放动画。(normal | alternate) 正常/反向|</p><h3 id="CSS选择器以及这些选择器的优先级"><a href="#CSS选择器以及这些选择器的优先级" class="headerlink" title="CSS选择器以及这些选择器的优先级"></a>CSS选择器以及这些选择器的优先级</h3><ul><li>!important</li><li>内联样式（1000）</li><li>ID选择器（0100）</li><li>类选择器/属性选择器/伪类选择器（0010）</li><li>元素选择器/关系选择器/伪元素选择器（0001）</li><li>通配符选择器（0000）</li></ul><h3 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h3><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><h4 id="w3c盒模型"><a href="#w3c盒模型" class="headerlink" title="w3c盒模型"></a>w3c盒模型</h4><ul><li>box-sizing: content-box。元素的宽高大小为内容的大小。</li></ul><h4 id="IE盒模型"><a href="#IE盒模型" class="headerlink" title="IE盒模型"></a>IE盒模型</h4><ul><li>box-sizing: border-box。元素的宽高大小为内容+内边距+边框大小。</li></ul><h3 id="如何实现左侧宽度固定，右侧宽度自适应的布局"><a href="#如何实现左侧宽度固定，右侧宽度自适应的布局" class="headerlink" title="如何实现左侧宽度固定，右侧宽度自适应的布局"></a>如何实现左侧宽度固定，右侧宽度自适应的布局</h3><ul><li><p>dom结构</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用float + margin实现</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>.box &gt; div {<br>  height: 100%;<br>}</p><p>.box-left {<br>  width: 200px;<br>  float: left;<br>  background-color: blue;<br>}</p><p>.box-right {<br>  margin-left: 200px;<br>  background-color: red;<br>}</p><pre><code>+ 利用calc计算宽度```css.box { height: 200px;}.box &gt; div {  height: 100%;}.box-left {  width: 200px;  float: left;  background-color: blue;}.box-right {  width: calc(100% - 200px);  float: right;  background-color: red;}</code></pre><ul><li>利用float + overflow实现<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>.box &gt; div {<br>  height: 100%;<br>}</p><p>.box-left {<br>  width: 200px;<br>  float: left;<br>  background-color: blue;<br>}</p><p>.box-right {<br>  overflow: hidden;<br>  background-color: red;<br>}</p><pre><code>+ 利用flex实现```css.box {  height: 200px;  display: flex;}.box &gt; div {  height: 100%;}.box-left {  width: 200px;  background-color: blue;}.box-right {  flex: 1; // 设置flex-grow属性为1，默认为0  overflow: hidden;  background-color: red;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现查找字符串中出现最多的字符和个数</title>
      <link href="/2020/05/16/js-shi-xian-cha-zhao-zi-fu-chuan-zhong-chu-xian-zui-duo-de-zi-fu-he-ge-shu/"/>
      <url>/2020/05/16/js-shi-xian-cha-zhao-zi-fu-chuan-zhong-chu-xian-zui-duo-de-zi-fu-he-ge-shu/</url>
      
        <content type="html"><![CDATA[<ul><li><p>例: abbcccddddd -&gt; 字符最多的是d，出现了5次</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"abcabcabcbbccccc"</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> char <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使其按照一定的次序排列</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "aaabbbbbcccccccc"</span>  <span class="token comment" spellcheck="true">// 定义正则表达式</span>  <span class="token keyword">let</span> re <span class="token operator">=</span> <span class="token regex">/(\w)\1+/g</span><span class="token punctuation">;</span>  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> $<span class="token number">0</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>          num <span class="token operator">=</span> $<span class="token number">0</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>          char <span class="token operator">=</span> $<span class="token number">1</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`字符最多的是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，出现了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>```</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js解析 URL Params 为对象</title>
      <link href="/2020/05/16/js-jie-xi-url-params-wei-dui-xiang/"/>
      <url>/2020/05/16/js-jie-xi-url-params-wei-dui-xiang/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'http://www.domain.com/?user=anonymous&amp;id=123&amp;id=456&amp;city=%E5%8C%97%E4%BA%AC&amp;enabled'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">parseParam</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将字符串以 &amp; 分割后存到数组中</span>    <span class="token keyword">let</span> paramsArr <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 params 存到对象中</span>    <span class="token keyword">let</span> paramsObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     paramsArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理有 value 的参数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 分割 key 和 value</span>            <span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 解码</span>            val <span class="token operator">=</span> <span class="token regex">/^d+$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">:</span> val<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转化为数字</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>paramsObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果对象有 key，则添加一个值</span>                paramsObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>paramsObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果对象没有这个 key，创建 key 并设置值</span>                paramsObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理没有 value 的参数</span>            paramsObj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> paramsObj<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseParam</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { user: 'anonymous', id: [ '123', '456' ], city: '北京', enabled: true }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现转化为驼峰命名</title>
      <link href="/2020/05/16/js-shi-xian-zhuan-hua-wei-tuo-feng-ming-ming/"/>
      <url>/2020/05/16/js-shi-xian-zhuan-hua-wei-tuo-feng-ming-ming/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">"get-element-by-id"</span>    <span class="token comment" spellcheck="true">// 转化为 getElementById</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/-\w/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// getElementById</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现一个函数判断数据类型</title>
      <link href="/2020/05/16/js-shi-xian-yi-ge-han-shu-pan-duan-shu-ju-lei-xing/"/>
      <url>/2020/05/16/js-shi-xian-yi-ge-han-shu-pan-duan-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span>        Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'[object '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> null</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> object</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> array</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> number</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> boolean</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> string</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token regex">/123/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> regexp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-字符串-8-字符串转整数</title>
      <link href="/2020/05/16/leetcode-zi-fu-chuan-8-zi-fu-chuan-zhuan-zheng-shu/"/>
      <url>/2020/05/16/leetcode-zi-fu-chuan-8-zi-fu-chuan-zhuan-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8. 字符串转换整数 (atoi)"></a>8. 字符串转换整数 (atoi)</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</li><li>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：<ul><li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li><li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li><li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li></ul></li><li>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</li><li>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>    输入: &quot;42&quot;    输出: 42</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>    输入: &quot;   -42&quot;    输出: -42    解释: 第一个非空白字符为 &#39;-&#39;, 它是一个负号。            我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h3><pre><code>    输入: &quot;4193 with words&quot;    输出: 4193    解释: 转换截止于数字 &#39;3&#39; ，因为它的下一个字符不为数字。</code></pre><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4"></a>示例 4</h3><pre><code>    输入: &quot;words and 987&quot;    输出: 0    解释: 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。        因此无法执行有效的转换。</code></pre><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5"></a>示例 5</h3><pre><code>    输入: &quot;-91283472332&quot;    输出: -2147483648    解释: 数字 &quot;-91283472332&quot; 超过 32 位有符号整数范围。      因此返回 INT_MIN (−231) 。</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>正则匹配</li></ul><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} str * @return {number} */</span><span class="token keyword">var</span> myAtoi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 去掉空格，使用正则提取满足条件的字符，/^(-|\+)?\d+/g，(-|\+)?表示第一位是-或+或都不是，\d+ 表示匹配多个数字</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^(-|\+)?\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 判断目标是否超过 Int 整形最大值或最小值</span>  <span class="token keyword">return</span> result    <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析 1"></a>复杂度分析 1</h3><ul><li><p>时间复杂度：O(1)</p><ul><li>代码在执行的时候，它消耗的时间并不随着某个变量的增长而增长，因此时间复杂度为 O(1)O(1)</li></ul></li><li><p>空间复杂度：O(1)</p><ul><li>额外所分配的空间都不随着处理数据量变化，所以空间复杂度为 O(1)O(1)</li></ul></li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>依次判断</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/**     * @param {string} str     * @return {number}     */</span>    <span class="token keyword">const</span> myAtoi <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//去除字符串之中的空格</span>        <span class="token keyword">const</span> news <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过执行 parseInt 判断是否为数字，不是数字返回 0 ，是数组继续解析</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">retrunNum</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断目标是否超过 Int 整形最大值或最小值</span>    <span class="token keyword">const</span> retrunNum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析 2"></a>复杂度分析 2</h3><ul><li><p>时间复杂度：O(1)</p><ul><li>代码在执行的时候，它消耗的时间并不随着某个变量的增长而增长，因此时间复杂度为 O(1)O(1)</li></ul></li><li><p>空间复杂度：O(1)</p><ul><li>额外所分配的空间都不随着处理数据量变化，所以空间复杂度为 O(1)O(1)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-字符串-242-有效的字母异位词</title>
      <link href="/2020/05/16/leetcode-zi-fu-chuan-242-you-xiao-de-zi-mu-yi-wei-ci/"/>
      <url>/2020/05/16/leetcode-zi-fu-chuan-242-you-xiao-de-zi-mu-yi-wei-ci/</url>
      
        <content type="html"><![CDATA[<h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>    输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;    输出: true</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>    输入: s = &quot;rat&quot;, t = &quot;car&quot;    输出: false</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>1.将字符串转成数组</li><li>2.利用数组sort方法进行排序</li><li>3.将数组转成字符串，依次比较字符是否相等，如果全相等，返回true，否则返回false</li></ul><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @param {string} t * @return {boolean} */</span><span class="token keyword">var</span> isAnagram <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先判断两个字符串长度是否相等，不相等直接返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">!==</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 将字符串转成数组</span>   <span class="token keyword">let</span> sArr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> tArr <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 排序函数</span>   <span class="token keyword">const</span> sortFn <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 进行排序</span>   sArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortFn<span class="token punctuation">)</span><span class="token punctuation">;</span>   tArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortFn<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 依次比较字符</span>   <span class="token keyword">return</span> sArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">===</span> tArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析 1"></a>复杂度分析 1</h3><ul><li><p>时间复杂度：O(nlogn)</p><ul><li>JavaScript 的 sort 方法的实现原理，当数组长度小于等于 10 的时候，采用插入排序，大于 10 的时候，采用快排，快排的平均时间复杂度是 。</li></ul></li><li><p>空间复杂度：O(n)</p><ul><li>算法中申请了 2 个数组变量用于存放字符串分割后的字符串数组，所以数组空间长度跟字符串长度线性相关，所以为 。</li></ul></li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>1.定义一个对象，遍历其中的一个字符串，对每个字符串的个数累加</li><li>2.遍历另一个字符串，使每一个字母在已得到的对象中做匹配，如果匹配则对象下的字母个数减 1，如果匹配不到，则返回 false，如果最后对象中每个字母个数都为 0，则表示两字符串相等。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {string} s * @param {string} t * @return {boolean} */</span><span class="token keyword">var</span> isAnagram <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先判断两个字符串长度是否相等，不相等直接返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">!==</span> t<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义一个对象，</span>    <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历字符串s，看每个字符的个数，最后形成</span>    <span class="token comment" spellcheck="true">// hash = { a: 3, n: 1, g: 1, r: 1, m: 1 }</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        hash<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> hash<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>        hash<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 然后遍历字符串t</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> k <span class="token keyword">of</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断字符串t中的每个字符是否在hash中，不在，则返回false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hash<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 说明匹配成功，把遍历的字符个数减一</span>        hash<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1-1"><a href="#复杂度分析-1-1" class="headerlink" title="复杂度分析 1"></a>复杂度分析 1</h3><ul><li><p>时间复杂度：O(n)</p><ul><li>使用了 2 个单层循环，因此，时间复杂度为 。</li></ul></li><li><p>空间复杂度：O(1)</p><ul><li>申请的变量 hash 最大长度为 256，因为 Ascii 字符最多 256 种可能，因此，考虑为常量空间，即 O(1)O(1)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-字符串-7-整数反转</title>
      <link href="/2020/05/16/leetcode-zi-fu-chuan-7-zheng-shu-fan-zhuan/"/>
      <url>/2020/05/16/leetcode-zi-fu-chuan-7-zheng-shu-fan-zhuan/</url>
      
        <content type="html"><![CDATA[<h2 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a>7. 整数反转</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>    输入: 123    输出: 321</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>    输入: -123    输出: -321</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h3><pre><code>    输入: 120    输出: 21</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>将非符号部分进行翻转，最后补充符号</li></ul><h3 id="详解-1"><a href="#详解-1" class="headerlink" title="详解 1"></a>详解 1</h3><ul><li>1.首先设置边界极值；</li><li>2.使用字符串的翻转函数进行主逻辑；</li><li>3.补充符号</li><li>4.然后拼接最终结果</li></ul><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number} x * @return {number} */</span><span class="token keyword">var</span> reverse <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">typeof</span> x <span class="token operator">!==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> MAX <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> MIN <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span>         x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>         x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">parsetInt</span><span class="token punctuation">(</span>y <span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> MIN <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;</span> MAX <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析 1"></a>复杂度分析 1</h3><ul><li><p>时间复杂度：O(n)</p><ul><li>代码中 reverse 函数时间复杂度为 ， 为整数长度，因此时间复杂度为 ，考虑到32位整数最大长度为 11，即 -2147483648，也可认为是常数时间复杂度 。</li></ul></li><li><p>空间复杂度：O(n)</p><ul><li>代码中创建临时 String 对象， 为整数长度，因此空间复杂度为 ，考虑到32位整数最大长度为11，即-2147483648，因此空间复杂度为 。</li></ul></li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>借鉴欧几里得求最大公约数的方法来解题。符号的处理逻辑同方法一，这里我们通过模 10 取到最低位，然后又通过乘 10 将最低位迭代到最高位，完成翻转。</li></ul><h3 id="详解-2"><a href="#详解-2" class="headerlink" title="详解 2"></a>详解 2</h3><ul><li>1.设置边界极值；</li><li>2.取给定数值的绝对值，遍历循环生成每一位数字，借鉴欧几里得算法，从 num 的最后一位开始取值拼成新的数</li><li>3.步剔除掉被消费的部分</li><li>4.如果最终结果为异常值，则直接返回 0；如果原本数据为负数，则对最终结果取反</li><li>5.返回最终结果</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/**     * @param {number} x     * @return {number}     */</span>    <span class="token keyword">const</span> reverse <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> int <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> MAX <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> MIN <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>int <span class="token operator">!==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            num <span class="token operator">=</span> int <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> num <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>            int <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>int <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> int <span class="token operator">&lt;</span> MIN <span class="token operator">||</span> int <span class="token operator">></span> MAX<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrollWidth,clientWidth,offsetWidth的区别</title>
      <link href="/2020/05/15/scrollwidth-clientwidth-offsetwidth-de-qu-bie/"/>
      <url>/2020/05/15/scrollwidth-clientwidth-offsetwidth-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<ul><li>scrollWidth：对象的实际内容的宽度，不包边线宽度，会随对象中内容超过可视区后而变大。</li><li>clientWidth：对象内容的可视区的宽度，不包滚动条等边线，会随对象显示大小的变化而改变。</li><li>offsetWidth：对象整体的实际宽度，包滚动条等边线，会随对象显示大小的变化而改变。</li></ul><h3 id="情况1"><a href="#情况1" class="headerlink" title="情况1"></a>情况1</h3><ul><li>元素内无内容或者内容不超过可视区，滚动不出现或不可用的情况下。</li><li>scrollWidth=clientWidth，两者皆为内容可视区的宽度。</li><li>offsetWidth为元素的实际宽度。<br><img src="/source/_posts/scrollWidth-clientWidth-offsetWidth%E7%9A%84%E5%8C%BA%E5%88%AB/demo1.png" alt="avatar"></li></ul><h3 id="情况2"><a href="#情况2" class="headerlink" title="情况2"></a>情况2</h3><ul><li>scrollWidth&gt;clientWidth。</li><li>scrollWidth为实际内容的宽度。</li><li>clientWidth是内容可视区的宽度。</li><li>offsetWidth为元素的实际宽度。<br><img src="source/_posts/scrollWidth-clientWidth-offsetWidth%E7%9A%84%E5%8C%BA%E5%88%AB/demo2.png" alt="avatar"></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础知识点及常考面试题</title>
      <link href="/2020/05/11/js-ji-chu-zhi-shi-dian-ji-chang-kao-mian-shi-ti/"/>
      <url>/2020/05/11/js-ji-chu-zhi-shi-dian-ji-chang-kao-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="原始类型有哪几种？null-是对象嘛？"><a href="#原始类型有哪几种？null-是对象嘛？" class="headerlink" title="原始类型有哪几种？null 是对象嘛？"></a>原始类型有哪几种？null 是对象嘛？</h3><h4 id="原始类型有6种"><a href="#原始类型有6种" class="headerlink" title="原始类型有6种"></a>原始类型有6种</h4><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol</li></ul><h5 id="原始类型存储的都是值，没有函数调用"><a href="#原始类型存储的都是值，没有函数调用" class="headerlink" title="原始类型存储的都是值，没有函数调用"></a>原始类型存储的都是值，没有函数调用</h5><ul><li>比如undefined.toString()；会报错</li><li>‘1’.toString() 可以被调用，是因为字符串被强制转换成了String类型，也就是对象类型；</li></ul><h4 id="null-不是对象"><a href="#null-不是对象" class="headerlink" title="null 不是对象"></a>null 不是对象</h4><ul><li>虽然 typeof null = object ，但是不是对象</li></ul><h3 id="对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？"><a href="#对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？" class="headerlink" title="对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？"></a>对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？</h3><ul><li><p>原始类型存储的是值，对象类型存储的是指针，也就是引用类型；</p></li><li><p>对象类型复制，复制的是变量的指针。</p></li><li><p>看下面代码</p><ul><li>最后a和b的值是一样的。也就是说引用类型复制，一个改变，另一个也改变。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>看下函数参数是对象</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">{</span>      person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      person <span class="token operator">=</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span><span class="token number">2</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> person<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'bbb'</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span><span class="token number">3</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name:'bbb',age:1}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name:'aaa',age:2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看出来p1的age改变了。因为p1是引用类型，被当作函数参数传递，相当于复制，在函数中改变参数person，则p1也会跟着改变。所以p1.age = 1;</li><li>p2是函数的返回值，也就是函数中的person</li></ul></li></ul><h3 id="typeof-是否能正确判断类型？instanceof-能正确判断对象的原理是什么？"><a href="#typeof-是否能正确判断类型？instanceof-能正确判断对象的原理是什么？" class="headerlink" title="typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？"></a>typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？</h3><ul><li><p>typeof不能正确判断类型，能判断基本类型，除了null</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">typeof</span> <span class="token string">'1'</span> <span class="token comment" spellcheck="true">// string</span>  <span class="token keyword">typeof</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// number</span>  <span class="token keyword">typeof</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// boolean</span>  <span class="token keyword">typeof</span> undefined <span class="token comment" spellcheck="true">// undefined</span>  <span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// sybmol</span>  <span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>typeof对于对象，除了函数，都是object</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// object</span>  <span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// pbject</span>  <span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>值类型存处于栈内存</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="source/_posts/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/image-20200606082348815.png" alt="image-20200606082348815"></p></li></ul><ul><li>引用类型存处于堆内存<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token number">211</span> <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { a: 21 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { a: 21 }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="source/_posts/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/image-20200606082413127.png" alt="image"></p><ul><li><p>instanceof能正确判断对象原理是通过原型链</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello world'</span>  str <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment" spellcheck="true">// false</span>  <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>  str1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre><code>### == 和 === 有什么区别？#### 判断流程+ 1.首先会判断两者类型是否相同。相同的话就是比大小了+ 2.类型不相同的话，那么就会进行类型转换+ 3.会先判断是否在对比 null 和 undefined，是的话就会返回 true+ 4.判断两者类型是否为 string 和 number，是的话就会将字符串转换为 number+ 5.判断其中一方是否为 boolean，是的话就会把 boolean 转为 number 再进行判断+ 6.判断其中一方是否为 object 且另一方为 string、number 或者 symbol，是的话就会把 object 转为原始类型再进行判断### 什么是闭包？+ 闭包：函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。可以间接访问函数内部的变量。+ 面试题：循环中使用闭包解决 `var` 定义函数的问题  - 下面会依次打出6个6    ```js        for(var i = 1;i&lt;=5;i++){            setTimeout(function timer(){                console.log(i)            },i*1000)        }    ```  - 解决办法：    - 1.闭包    ```js        for(var i = 1;i&lt;=5;i++){            (function(j){                setTimeout(function timer(){                    console.log(j)                },j*1000)            })(i)        }    ```    - 2.使用setTimeout第三个参数    ```js        for(let i = 1;i&lt;=5;i++){            setTimeout(function timer(){                console.log(i)            },i*1000,i)        }    ```    - 3.使用let    ```js        for(let i = 1;i&lt;=5;i++){            setTimeout(function timer(){                console.log(i)            },i*1000)        }    ```### 深浅拷贝+ 先看下面一段代码```js    let a = {        age: 1    }    let b = a;    b.age = 2;    console.log(a) // { age: 2}</code></pre><ul><li>看出把a复制给b，当b改变了，a也随着改变。因为a是引用类型；可以通过拷贝解决这个问题；</li></ul><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ul><li>通过Object.assign<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      age<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  b<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { age: 1}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>通过展开运算符<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      age<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span> a <span class="token punctuation">}</span><span class="token punctuation">;</span>  b<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { age: 1}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果对象是多层，上面方法就不能解决了，需要用到深拷贝<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      jobs<span class="token punctuation">:</span> <span class="token punctuation">{</span>          first<span class="token punctuation">:</span> <span class="token string">'FE'</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a <span class="token punctuation">}</span>  a<span class="token punctuation">.</span>jobs<span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token string">'native'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>jobs<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// native</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><ul><li>JSON.parse(JSON.stringify(object))<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      jobs<span class="token punctuation">:</span> <span class="token punctuation">{</span>          first<span class="token punctuation">:</span> <span class="token string">'FE'</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  a<span class="token punctuation">.</span>jobs<span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token string">'native'</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>jobs<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// FE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但是有局限性。<ul><li>1.会忽略 undefined</li><li>2.会忽略 symbol</li><li>3.不能序列化函数</li><li>4.不能解决循环引用的对象</li></ul></li></ul></li></ul><h3 id="var、let-及-const-区别？"><a href="#var、let-及-const-区别？" class="headerlink" title="var、let 及 const 区别？"></a>var、let 及 const 区别？</h3><ul><li>函数提升优先于变量提升，函数提升会把整个函数挪到作用域顶部，变量提升只会把声明挪到作用域顶部</li><li>var 存在提升，我们能在声明之前使用。let、const 因为暂时性死区的原因，不能在声明前使用</li><li>var 在全局作用域下声明变量会导致变量挂载在 window 上，其他两者不会</li><li>let 和 const 作用基本一致，但是后者声明的变量不能再次赋值</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>字符串拼接<pre class="line-numbers language-js"><code class="language-js"><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">110</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'10'</span> <span class="token operator">=</span> <span class="token string">'10010'</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">'10'</span> <span class="token operator">=</span> <span class="token string">'true10'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>== 运算符<pre class="line-numbers language-js"><code class="language-js"><span class="token number">100</span> <span class="token operator">==</span> <span class="token string">'100'</span> <span class="token comment" spellcheck="true">// true</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// true</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// true</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">null</span> <span class="token operator">==</span> undefined <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数组方法会改变原数组"><a href="#数组方法会改变原数组" class="headerlink" title="数组方法会改变原数组"></a>数组方法会改变原数组</h3><ul><li><p>改变原数组</p><ul><li>pop</li><li>push</li><li>shift</li><li>unshift</li></ul></li><li><p>不改变原数组</p><ul><li>concat</li><li>map </li><li>forEach</li><li>some</li><li>every</li><li>find</li><li>filter</li><li>slice</li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// let popRes = arr.pop()</span><span class="token comment" spellcheck="true">// console.log(popRes,arr) // 4 [1,2,3] </span><span class="token comment" spellcheck="true">// let pushRes = arr.push(5) // length</span><span class="token comment" spellcheck="true">// console.log(pushRes,arr) // 5 [1,2,3,4,5]</span><span class="token comment" spellcheck="true">// let shiftRes = arr.shift()</span><span class="token comment" spellcheck="true">// console.log(shiftRes,arr) // 1 [2,3,4]</span><span class="token comment" spellcheck="true">// let unshiftRes = arr.unshift(0)</span><span class="token comment" spellcheck="true">// console.log(unshiftRes,arr) // 5 [0,1,2,3,4]</span><span class="token comment" spellcheck="true">// 不改变原数组</span><span class="token comment" spellcheck="true">// let concatRes = arr.concat([5,6,7])</span><span class="token comment" spellcheck="true">// console.log(concatRes,arr) // [1,2,3,4,5,6,7] [1,2,3,4]</span><span class="token comment" spellcheck="true">// let mapRes = arr.map(item => item+1)</span><span class="token comment" spellcheck="true">// console.log(mapRes,arr) // [2,3,4,5] [1,2,3,4]</span><span class="token comment" spellcheck="true">// let filterRes = arr.filter(item => item > 2)</span><span class="token comment" spellcheck="true">// console.log(filterRes,arr) // [3,4] [1,2,3,4]</span><span class="token comment" spellcheck="true">// let sliceRes = arr.slice(1)</span><span class="token comment" spellcheck="true">// console.log(sliceRes,arr) // [2,3,4] [1,2,3,4]</span><span class="token comment" spellcheck="true">// forEach 不返回数据, 不改变原数组</span><span class="token comment" spellcheck="true">// arr.forEach(item => item+1)</span><span class="token comment" spellcheck="true">// console.log(arr) </span><span class="token comment" spellcheck="true">// 返回布尔值，不改变原数组</span><span class="token comment" spellcheck="true">// let someRes = arr.some(item => item > 2)</span><span class="token comment" spellcheck="true">// console.log(someRes,arr) // true [1,2,3,4]</span><span class="token comment" spellcheck="true">// 返回布尔值，不改变原数组</span><span class="token comment" spellcheck="true">// let everyRes = arr.every(item => item>2)</span><span class="token comment" spellcheck="true">// console.log(everyRes,arr)</span><span class="token comment" spellcheck="true">// 返回第一个为true的元素，不改变原数组</span><span class="token comment" spellcheck="true">// let findRes = arr.find(item => item > 2)</span><span class="token comment" spellcheck="true">// console.log(findRes,arr) // 3 [1,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从输入url到渲染出页面的整个过程"><a href="#从输入url到渲染出页面的整个过程" class="headerlink" title="从输入url到渲染出页面的整个过程:"></a>从输入url到渲染出页面的整个过程:</h3><h3 id="Window-onload-和-DOMContentLoaded区别"><a href="#Window-onload-和-DOMContentLoaded区别" class="headerlink" title="Window.onload 和 DOMContentLoaded区别"></a>Window.onload 和 DOMContentLoaded区别</h3><p><a href="https://www.jianshu.com/p/1a8a7e698447" target="_blank" rel="noopener">Window.onload 和 DOMContentLoaded区别</a></p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>因为js是单线程，所以异步不会阻塞代码执行，同步会阻塞代码执行<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 异步</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 结果： 1 3 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>// 同步<br>console.log(1)<br>alert(2)<br>console.log(3)<br>// 结果：1 2 3</p><pre><code>+ 异步应用场景  - 网络请求  - 定时任务### 作用域和闭包#### 作用域+ 全局作用域+ 函数作用域+ 块作用域![image-20200606152240882](source/_posts/JS基础知识点及常考面试题/image-20200606152240882.png_posts/JS基础知识点及常考面试题/image-20200606152240882.png)#### 自由变量+ 1.一个变量在当前作用域没有定义，但被使用了+ 2.向上级作用域去寻找，一层层找，直到找到为止+ 3.如果全局作用域也没有，就会报错&gt;  所有的自由变量的查找，是在函数定义的地方，向上级作用域查找&gt;  不是在执行的地方！！！#### 闭包```js// 函数作为返回值 function create() {     const a = 100     return function () {         console.log(a)     } } const fn = create() const a = 200 fn() // 100// 函数作为参数被传递function print(fn) {    const a = 200    fn()}const a = 100function fn() {    console.log(a)}print(fn) // 100</code></pre><h3 id="this不同应用场景："><a href="#this不同应用场景：" class="headerlink" title="this不同应用场景："></a>this不同应用场景：</h3><ul><li>普通函数调用</li><li>使用call apply bind调用</li><li>作为对象方法被调用</li><li>在class方法中调用</li><li>箭头函数</li></ul><h3 id="this取值："><a href="#this取值：" class="headerlink" title="this取值："></a>this取值：</h3><ul><li>是在函数执行时确定的，不是函数定义的时候<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>// 普通函数<br>f1() // window</p><p>// call<br>f1.call({a:2}) // { a: 2 }</p><p>// bind<br>let f2 = f1.bind({b:1})<br>f2() // { b: 1}</p><p>const zhansan = {<br>    name: ‘张三’,<br>    sayHi(){<br>        console.log(this)<br>    },<br>    wait(){<br>       setTimeout(function(){<br>           console.log(this)<br>       },100)<br>    }<br>}<br>zhansan.sayHi() // zhangsan<br>zhansan.wait()  // window</p><p>const lisi = {<br>    name: ‘李四’,<br>    sayHi(){<br>        console.log(this) // lisi<br>    },<br>    wait(){<br>        // 箭头函数<br>        setTimeout(() =&gt; {<br>            console.log(this)<br>        })<br>    }<br>}<br>lisi.sayHi() // lisi<br>lisi.wait()  // lisi</p><p>// class<br>class People{<br>    constructor(name){<br>        this.name = name;<br>    }<br>    sayHi(){<br>        console.log(this)<br>    }<br>}<br>let p = new People(‘aaa’)<br>p.sayHi() // p</p><pre><code>### 如何识别浏览器类型### 分析拆解url各个部分### 原型Class```javascriptclass Student{    constructor(name,age){        this.name = name;        this.age = age;    }    sayHi(){        console.log(`${this.name}:${this.age}`)    }}let xiaofei = new Student(&#39;小飞&#39;,10)console.log(xiaofei.name)console.log(xiaofei.age)xiaofei.sayHi()</code></pre><p>继承:</p><p>extends super  constructor</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>number<span class="token punctuation">)</span>s1<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>instanceof类型判断</p><pre class="line-numbers language-javascript"><code class="language-javascript">s1 <span class="token keyword">instanceof</span> <span class="token class-name">Student</span> <span class="token comment" spellcheck="true">// true</span>s1 <span class="token keyword">instanceof</span> <span class="token class-name">People</span> <span class="token comment" spellcheck="true">// true</span>s1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Student<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="source/_posts/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/image-20200606141146472.png" alt="image-20200606141146472"></p><p>原型关系：</p><p>1.每个class都有显示原型prototype</p><p>2.每个实例都有隐士原型<strong>proto</strong></p><p>3.实例的 <strong>proto</strong>===class的prototype</p><p>原型属性寻找规则：</p><p>1.先在自身上找属性和方法</p><p>2.自身没有，就去实例的隐士原型去找，也就是class的实例原型prototype    </p><p>原型链</p><p><img src="/source/_posts/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/image-20200606142205510.png" alt="image-20200606142205510"></p><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Student<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>prototype <span class="token operator">===</span> Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype <span class="token operator">===</span> People<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">hasOwnPrototype</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true 。 hasOwnProperty() 判断属性是否在这个实例上</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">hasOwnPrototype</span><span class="token punctuation">(</span><span class="token string">'sayHi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="source/_posts/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8F%8A%E5%B8%B8%E8%80%83%E9%9D%A2%E8%AF%95%E9%A2%98/image-20200606142229258.png" alt="image-20200606142229258"></p><h3 id="attr和property区别："><a href="#attr和property区别：" class="headerlink" title="attr和property区别："></a>attr和property区别：</h3><p>1.property：修改对象属性，不会提现到html结构中</p><p>2.attribute：修改html属性，会改变html结构</p><p>3.两者都有可能引起dom重新渲染</p><p>4.尽量使用property</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> p1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// property</span>p1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'200'</span><span class="token comment" spellcheck="true">// attribute</span>p1<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span><span class="token string">"200"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何捕获js的异常"><a href="#如何捕获js的异常" class="headerlink" title="如何捕获js的异常"></a>如何捕获js的异常</h3><p>1.try catch 手动捕获</p><p>2.window.onerror</p><p>​    对跨域的js,如cdn 不会有详细的报错信息</p><p>​    对应压缩的js,需要配合sourcemap 反查到未压缩的代码行列</p><h3 id="new-Object-和Object-create-区别"><a href="#new-Object-和Object-create-区别" class="headerlink" title="new Object()和Object.create()区别"></a>new Object()和Object.create()区别</h3><p>1.{}等于new Object()。原型是Object.prototype</p><p>2.Object.create(null) 没有原型</p><p>3.Object.create({…}) 指定原型</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    sum<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    sum<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2 <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">===</span> obj1 <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> obj4 <span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 什么也没有</span><span class="token keyword">let</span> obj5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 有原型</span><span class="token keyword">let</span> obj6  <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 空对象。有原型</span>obj6<span class="token punctuation">.</span>__proto <span class="token operator">===</span> obj1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true ***</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6 <span class="token operator">===</span> obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组slice-和-splice-的区别："><a href="#数组slice-和-splice-的区别：" class="headerlink" title="数组slice 和 splice 的区别："></a>数组slice 和 splice 的区别：</h3><p>1.功能区别：slice切片 splice剪接</p><p>2.参数和返回值</p><p>3.是否是纯函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// slice</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span>endIndex<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// splice</span><span class="token comment" spellcheck="true">// 插入</span><span class="token keyword">let</span> spliceRes <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>spliceRes<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2,3] [1,'a',4]</span><span class="token comment" spellcheck="true">// 增加</span><span class="token keyword">let</span> spliceRes <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>spliceRes<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [] [1,'a',2,3,4]</span><span class="token comment" spellcheck="true">//删除</span><span class="token keyword">let</span> spliceRes <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>spliceRes<span class="token punctuation">,</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2,3] [1,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-20-30-map-parseInt-返回结果"><a href="#10-20-30-map-parseInt-返回结果" class="headerlink" title="[10,20,30].map(parseInt)返回结果:"></a>[10,20,30].map(parseInt)返回结果:</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 相当于</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 10</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2020/05/07/git/"/>
      <url>/2020/05/07/git/</url>
      
        <content type="html"><![CDATA[<h2 id="git总结"><a href="#git总结" class="headerlink" title="git总结"></a>git总结</h2><h3 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h3><ul><li><p>查看变更情况</p><pre class="line-numbers language-git"><code class="language-git">  git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将当前目录及其子目录下所有变更都加入到暂存区</p><pre class="line-numbers language-git"><code class="language-git">  git add .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>比较工作区和暂存区的所有差异</p><pre class="line-numbers language-git"><code class="language-git">  git diff <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>比较某文件工作区和暂存区的差异</p><pre class="line-numbers language-git"><code class="language-git">  git diff 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>比较暂存区和 HEAD 的所有差异</p><pre class="line-numbers language-git"><code class="language-git">  git diff --cached<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>比较某文件暂存区和 HEAD 的差异</p><pre class="line-numbers language-git"><code class="language-git">  git diff --cached 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建commit</p><pre class="line-numbers language-git"><code class="language-git">  git commit <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将暂存区和工作区所有文件恢复成和 HEAD 一样</p><pre class="line-numbers language-git"><code class="language-git">  git reset --hard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将未处理完的变更先保存到 stash 中</p><pre class="line-numbers language-git"><code class="language-git">  git stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>临时任务处理完后继续之前的工作</p><ul><li>apply 保留 stash</li><li>pop 不保留 stash<pre class="line-numbers language-git"><code class="language-git">git stash pop       git stash apply<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>查看所有 stash</p><pre class="line-numbers language-git"><code class="language-git">  git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>取回某次 stash 的变更</p><pre class="line-numbers language-git"><code class="language-git">  git stash pop stash@{数字n}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li><p>基于当前分支创建新分支</p><pre class="line-numbers language-git"><code class="language-git">  git branch 新分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>基于指定分支创建新分支</p><pre class="line-numbers language-git"><code class="language-git">  git branch 新分支 指定分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>基于某个 commit 创建分支</p><pre class="line-numbers language-git"><code class="language-git">  git branch 新分支 某个分支的commit id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安全删除本地某分支</p><pre class="line-numbers language-git"><code class="language-git">  git branch -d 本地分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>强行删除本地某分支</p><pre class="line-numbers language-git"><code class="language-git">  git branch -D 要删除的分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 A 分支合入到当前分支中且为 merge 创建 commit</p><pre class="line-numbers language-git"><code class="language-git">  git merge A分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 A 分支合入到 B 分支中且为 merge 创建 commit</p><pre class="line-numbers language-git"><code class="language-git">  git merge A分支 B分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将当前分支基于 B 分支做 rebase，以便将B分支合入到当前分支</p><pre class="line-numbers language-git"><code class="language-git">  git rebase B分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 A 分支基于 B 分支做 rebase，以便将 B 分支合入到 A 分支</p><pre class="line-numbers language-git"><code class="language-git">  git rebase B分支 A分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="变更历史"><a href="#变更历史" class="headerlink" title="变更历史"></a>变更历史</h3><ul><li><p>当前分支各个 commit 用一行显示</p><pre class="line-numbers language-git"><code class="language-git">  git log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示就近的 n 个 commit</p><pre class="line-numbers language-git"><code class="language-git">  git log -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>用图示显示所有分支的历史</p><pre class="line-numbers language-git"><code class="language-git">  git log --oneline --graph --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看涉及到某文件变更的所有 commit</p><pre class="line-numbers language-git"><code class="language-git">  git log 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>某文件各行最后修改对应的 commit 以及作者</p><pre class="line-numbers language-git"><code class="language-git">  git blame 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><ul><li><p>查看已有标签</p><pre class="line-numbers language-git"><code class="language-git">  git tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建标签</p><pre class="line-numbers language-git"><code class="language-git">  git tag v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建带备注标签</p><pre class="line-numbers language-git"><code class="language-git">  git tag -a v1.0 -m <span class="token string">'备注'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>给指定的 commit 打标签</p><pre class="line-numbers language-git"><code class="language-git">  git tag v1.0 commit id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>推送一个本地标签</p><pre class="line-numbers language-git"><code class="language-git">  git push origin v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>推送全部未推送过的本地标签</p><pre class="line-numbers language-git"><code class="language-git">  git push origin --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除一个本地标签</p><pre class="line-numbers language-git"><code class="language-git">  git tag -d v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="远端交互"><a href="#远端交互" class="headerlink" title="远端交互"></a>远端交互</h3><ul><li><p>查看所有远端仓库</p><pre class="line-numbers language-git"><code class="language-git">  git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加远端仓库</p><pre class="line-numbers language-git"><code class="language-git">  git remote add url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除远端仓库</p><pre class="line-numbers language-git"><code class="language-git">  git remote remove remote的名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重命名远端仓库</p><pre class="line-numbers language-git"><code class="language-git">  git remote rename 旧名称 新名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将远端所有分支和标签的变更都拉到本地</p><pre class="line-numbers language-git"><code class="language-git">  git fetch remote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>把远端分支的变更拉到本地，且 merge 到本地分支</p><pre class="line-numbers language-git"><code class="language-git">  git pull origin 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除远端分支</p><pre class="line-numbers language-git"><code class="language-git">  git push remote --delete 远端分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-219-存在重复元素2</title>
      <link href="/2020/02/28/leetcode-shu-zu-219-cun-zai-chong-fu-yuan-su-2/"/>
      <url>/2020/02/28/leetcode-shu-zu-219-cun-zai-chong-fu-yuan-su-2/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>    输入: nums = [1,2,3,1], k = 3    输出: true    示例 2:</code></pre><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h3><pre><code>   输入: nums = [1,0,1,1], k = 1   输出: true</code></pre><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3:"></a>示例3:</h3><pre><code>     输入: nums = [1,2,3,1,2,3], k = 2     输出: false</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> containsNearbyDuplicate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">-</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-217-存在重复元素</title>
      <link href="/2020/02/27/leetcode-shu-zu-217-cun-zai-chong-fu-yuan-su/"/>
      <url>/2020/02/27/leetcode-shu-zu-217-cun-zai-chong-fu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li>给定一个整数数组，判断是否存在重复元素。</li><li>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</li></ul><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><pre><code>    输入: [1,2,3,1]    输出: true</code></pre><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2:"></a>示例2:</h3><pre><code>    输入: [1,2,3,4]    输出: false</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>Set法：使用 Set 集合去重，如果长度不相等，则重复</li><li>散列表法：使用散列表存储出现过的值，如果再次出现，则重复</li><li>排序法：将数组排序，如果第 n 元素和第 n+1 元素相等，则重复</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>Set法</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> containsDuplicate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span>size <span class="token operator">!=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>散列表法</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> containsDuplicate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>lengtj<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>          <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排序法</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> containsDuplicate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>      nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">-</span>b<span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-119-杨辉三角2</title>
      <link href="/2020/02/26/leetcode-shu-zu-119-yang-hui-san-jiao-2/"/>
      <url>/2020/02/26/leetcode-shu-zu-119-yang-hui-san-jiao-2/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li>给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。  </li><li>在杨辉三角中，每个数是它左上方和右上方的数的和。</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> generate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numRows <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> subArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    subArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> result<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    subArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * O(K)空间复杂度    * @param {number} rowIndex    * @return {number[]}    */</span>    <span class="token keyword">var</span> getRow <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowIndex <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> triangle<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存当前结果</span>        triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 上行结果相邻数相加得出结果</span>        triangle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        triangle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> triangle<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 根据上一题解法    * @param {number} rowIndex    * @return {number[]}    */</span>    <span class="token keyword">var</span> getRow <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> triangle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> triangle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowIndex <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        triangle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        triangle<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        triangle<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> triangle<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底理解this、apply、call、bind</title>
      <link href="/2020/02/25/che-di-li-jie-this-apply-call-bind/"/>
      <url>/2020/02/25/che-di-li-jie-this-apply-call-bind/</url>
      
        <content type="html"><![CDATA[<h2 id="this、apply、call、bind"><a href="#this、apply、call、bind" class="headerlink" title="this、apply、call、bind"></a>this、apply、call、bind</h2><ul><li>这又是一个面试经典问题<del>/(ㄒoㄒ)/</del>也是 ES5中众多坑中的一个，在 ES6 中可能会极大避免 this 产生的错误，但是为了一些老代码的维护，最好还是了解一下 this 的指向和 call、apply、bind 三者的区别。</li></ul><h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><ul><li><p>在 ES5 中，其实 this 的指向，始终坚持一个原理：this 永远指向最后调用它的那个对象，来，跟着我朗读三遍：this 永远指向最后调用它的那个对象，this 永远指向最后调用它的那个对象，this 永远指向最后调用它的那个对象。记住这句话，this 你已经了解一半了。</p></li><li><p>下面我们来看一个最简单的例子：</p></li><li><p>例 1：</p><pre class="line-numbers language-js"><code class="language-js">      <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Cherry"</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// windowsName</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// inner: Window</span>      <span class="token punctuation">}</span>      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"outer:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// outer: Window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这个相信大家都知道为什么 log 的是 windowsName，因为根据刚刚的那句话“this 永远指向最后调用它的那个对象”，我们看最后调用 a 的地方 a();，前面没有调用的对象那么就是全局对象 window，这就相当于是 window.a()；注意，这里我们没有使用严格模式，如果使用严格模式的话，全局对象就是 undefined，那么就会报错 Uncaught TypeError: Cannot read property ‘name’ of undefined。</p></li></ul><ul><li><p>再看下这个例子：</p></li><li><p>例 2：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Cherry</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在这个例子中，函数 fn 是对象 a 调用的，所以打印的值就是 a 中的 name 的值。是不是有一点清晰了呢~</p></li><li><p>我们做一个小小的改动：</p></li><li><p>例 3：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Cherry</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  window<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这里打印 Cherry 的原因也是因为刚刚那句话“this 永远指向最后调用它的那个对象”，最后调用它的对象仍然是对象 a。</p></li><li><p>我们再来看一下这个例子：</p></li><li><p>例 4：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// name: "Cherry",</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// undefined</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  window<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这里为什么会打印 undefined 呢？这是因为正如刚刚所描述的那样，调用 fn 的是 a 对象，也就是说 fn 的内部的 this 是对象 a，而对象 a 中并没有对 name 进行定义，所以 log 的 this.name 的值是 undefined。</p></li><li><p>这个例子还是说明了：this 永远指向最后调用它的那个对象，因为最后调用 fn 的对象是 a，所以就算 a 中没有 name 这个属性，也不会继续向上一个对象寻找 this.name，而是直接输出 undefined。</p></li><li><p>再来看一个比较坑的例子：</p></li><li><p>例 5：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// name: "Cherry",</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// windowsName</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> f <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这里你可能会有疑问，为什么不是 Cherry，这是因为虽然将 a 对象的 fn 方法赋值给变量 f 了，但是没有调用，再接着跟我念这一句话：“this 永远指向最后调用它的那个对象”，由于刚刚的 f 并没有调用，所以 fn() 最后仍然是被 window 调用的。所以 this 指向的也就是 window。</p></li><li><p>由以上五个例子我们可以看出，this 的指向并不是在创建的时候就可以确定的，在 es5 中，永远是this 永远指向最后调用它的那个对象。</p></li><li><p>再来看一个例子：</p></li><li><p>例 6：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Cherry'</span><span class="token punctuation">;</span>      <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// windowsName</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>读到现在了应该能够理解这是为什么了吧(oﾟ▽ﾟ)o。</p></li></ul><h3 id="怎么改变-this-的指向"><a href="#怎么改变-this-的指向" class="headerlink" title="怎么改变 this 的指向"></a>怎么改变 this 的指向</h3><ul><li><p>改变 this 的指向我总结有以下几种方法：</p><ul><li>使用 ES6 的箭头函数</li><li>在函数内部使用 _this = this</li><li>使用 apply、call、bind</li><li>new 实例化一个对象</li></ul></li><li><p>例 7：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>      func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// this.func1 is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在不使用箭头函数的情况下，是会报错的，因为最后调用 setTimeout 的对象是 window，但是在 window 中并没有 func1 函数。</p></li><li><p>我们在改变 this 指向这一节将把这个例子作为 demo 进行改造。</p></li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul><li><p>众所周知，ES6 的箭头函数是可以避免 ES5 中使用 this 的坑的。箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</p></li><li><p>例 8 ：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>      func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// Cherry</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="在函数内部使用-this-this"><a href="#在函数内部使用-this-this" class="headerlink" title="在函数内部使用 _this = this"></a>在函数内部使用 _this = this</h3><ul><li><p>如果不使用 ES6，那么这种方式应该是最简单的不会出错的方式了，我们是先将调用这个函数的对象保存在变量 _this 中，然后在函数中都使用这个 _this，这样 _this 就不会改变了。</p></li><li><p>例 9：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>      func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              _this<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// Cherry</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这个例子中，在 func2 中，首先设置 var _this = this;，这里的 this 是调用 func2 的对象 a，为了防止在 func2 中的 setTimeout 被 window 调用而导致的在 setTimeout 中的 this 为 window。我们将 this(指向变量 a) 赋值给一个变量 _this，这样，在 func2 中我们使用 _this 就是指向对象 a 了。</p></li></ul><h3 id="使用-apply、call、bind"><a href="#使用-apply、call、bind" class="headerlink" title="使用 apply、call、bind"></a>使用 apply、call、bind</h3><ul><li>使用 apply、call、bind 函数也是可以改变 this 的指向的，原理稍后再讲，我们先来看一下是怎么实现的：</li></ul><h4 id="使用-apply"><a href="#使用-apply" class="headerlink" title="使用 apply"></a>使用 apply</h4><ul><li><p>例 10：</p><pre class="line-numbers language-js"><code class="language-js">      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Cherry</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用-call"><a href="#使用-call" class="headerlink" title="使用 call"></a>使用 call</h4><ul><li><p>例 11：</p><pre class="line-numbers language-js"><code class="language-js">      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Cherry</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用-bind"><a href="#使用-bind" class="headerlink" title="使用 bind"></a>使用 bind</h4><ul><li><p>例 12：</p><pre class="line-numbers language-js"><code class="language-js">      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Cherry</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="apply、call、bind-区别"><a href="#apply、call、bind-区别" class="headerlink" title="apply、call、bind 区别"></a>apply、call、bind 区别</h3><ul><li><p>刚刚我们已经介绍了 apply、call、bind 都是可以改变 this 的指向的，但是这三个函数稍有不同。</p></li><li><p>在 MDN 中定义 apply 如下；</p><blockquote><p>apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数</p></blockquote></li><li><p>语法：</p><blockquote><p>fun.apply(thisArg, [argsArray])</p></blockquote><ul><li>thisArg：在 fun 函数运行时指定的 this 值。需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动指向全局对象（浏览器中就是window对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象。</li><li>argsArray：一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 fun 函数。如果该参数的值为null 或 undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。浏览器兼容性请参阅本文底部内容。</li></ul></li></ul><h3 id="apply-和-call-的区别"><a href="#apply-和-call-的区别" class="headerlink" title="apply 和 call 的区别"></a>apply 和 call 的区别</h3><ul><li><p>其实 apply 和 call 基本类似，他们的区别只是传入的参数不同。</p></li><li><p>call 的语法为：</p><pre class="line-numbers language-js"><code class="language-js">  fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>所以 apply 和 call 的区别是 call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。</p></li><li><p>例 13：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  b<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例 14：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  b<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="bind-和-apply、call-区别"><a href="#bind-和-apply、call-区别" class="headerlink" title="bind 和 apply、call 区别"></a>bind 和 apply、call 区别</h3><ul><li><p>我们先来将刚刚的例子使用 bind 试一下</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们会发现并没有输出，这是为什么呢，我们来看一下 MDN 上的文档说明：</p><blockquote><p>bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</p></blockquote></li><li><p>所以我们可以看出，bind 是创建一个新的函数，我们必须要手动去调用：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="JS-中的函数调用"><a href="#JS-中的函数调用" class="headerlink" title="JS 中的函数调用"></a>JS 中的函数调用</h3><ul><li><p>看到留言说，很多童靴不理解为什么 例 6 的 innerFunction 和 例 7 的 this 是指向 window 的，所以我就来补充一下 JS 中的函数调用。</p></li><li><p>例 6：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Cherry'</span><span class="token punctuation">;</span>      <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// windowsName</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例 7：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>      func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// this.func1 is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数调用的方法一共有 4 种</p><ul><li>作为一个函数调用</li><li>函数作为方法调用</li><li>使用构造函数调用函数</li><li>作为函数方法调用函数（call、apply）</li></ul></li></ul><h4 id="作为一个函数调用"><a href="#作为一个函数调用" class="headerlink" title="作为一个函数调用"></a>作为一个函数调用</h4><ul><li><p>比如上面的 例 1：</p></li><li><p>例 1：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Cherry"</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// windowsName</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inner:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// inner: Window</span>  <span class="token punctuation">}</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"outer:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// outer: Window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这样一个最简单的函数，不属于任何一个对象，就是一个函数，这样的情况在 JavaScript 的在浏览器中的非严格模式默认是属于全局对象 window 的，在严格模式，就是 undefined。</p></li><li><p>但这是一个全局的函数，很容易产生命名冲突，所以不建议这样使用。</p></li></ul><h4 id="函数作为方法调用"><a href="#函数作为方法调用" class="headerlink" title="函数作为方法调用"></a>函数作为方法调用</h4><ul><li>所以说更多的情况是将函数作为对象的方法使用。比如例 2：</li><li>例 2：<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      fn <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Cherry</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>这里定义一个对象 a，对象 a 有一个属性（name）和一个方法（fn）。</li><li>然后对象 a 通过 . 方法调用了其中的 fn 方法。</li><li>然后我们一直记住的那句话“this 永远指向最后调用它的那个对象”，所以在 fn 中的 this 就是指向 a 的。</li></ul><h4 id="使用构造函数调用函数"><a href="#使用构造函数调用函数" class="headerlink" title="使用构造函数调用函数"></a>使用构造函数调用函数</h4><blockquote><p>如果函数调用前使用了 new 关键字, 则是调用了构造函数。<br>这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 构造函数:</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arg1<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName  <span class="token operator">=</span> arg2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>// This    creates a new object<br>var a = new myFunction(“Li”,”Cherry”);<br>a.lastName;                             // 返回 “Cherry”</p><pre><code>+ 这就有要说另一个面试经典问题：new 的过程了，(ಥ_ಥ)+ 这里就简单的来看一下 new 的过程吧：+ 伪代码表示：```jsvar a = new myFunction(&quot;Li&quot;,&quot;Cherry&quot;);new myFunction{    var obj = {};    obj.__proto__ = myFunction.prototype;    var result = myFunction.call(obj,&quot;Li&quot;,&quot;Cherry&quot;);    return typeof result === &#39;obj&#39;? result : obj;}</code></pre><ul><li>1.创建一个空对象 obj;</li><li>2.将新创建的空对象的隐式原型指向其构造函数的显示原型。</li><li>3.使用 call 改变 this 的指向</li><li>4.如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；如果返回值是一个新对象的话那么直接直接返回该对象。<ul><li>所以我们可以看到，在 new 的过程中，我们是使用 call 改变了 this 的指向。</li></ul></li></ul><h4 id="作为函数方法调用函数"><a href="#作为函数方法调用函数" class="headerlink" title="作为函数方法调用函数"></a>作为函数方法调用函数</h4><blockquote><p>在 JavaScript 中, 函数是对象。<br>JavaScript 函数有它的属性和方法。call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身<br>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。在 JavaScript 非严格?模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。</p></blockquote><ul><li><p>这个时候我们再来看例 6：</p></li><li><p>例 6：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Cherry'</span><span class="token punctuation">;</span>      <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// windowsName</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这里的 innerFunction() 的调用是不是属于第一种调用方式：作为一个函数调用（它就是作为一个函数调用的，没有挂载在任何对象上，所以对于没有挂载在任何对象上的函数，在非严格模式下 this 就是指向 window 的）</p></li><li><p>然后再看一下 例 7：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"windowsName"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>      name <span class="token punctuation">:</span> <span class="token string">"Cherry"</span><span class="token punctuation">,</span>      func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>      func2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// this.func1 is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这个简单一点的理解可以理解为“匿名函数的 this 永远指向 window”，你可以这样想，还是那句话this 永远指向最后调用它的那个对象，那么我们就来找最后调用匿名函数的对象，这就很尴尬了，因为匿名函数名字啊，笑哭，所以我们是没有办法被其他对象调用匿名函数的。所以说 匿名函数的 this 永远指向 window。<br>如果这个时候你要问，那</p></li><li><p>如果这个时候你要问，那匿名函数都是怎么定义的，首先，我们通常写的匿名函数都是自执行的，就是在匿名函数后面加 () 让其自执行。其次就是虽然匿名函数不能被其他对象调用，但是可以被其他函数调用啊，比如例 7 中的 setTimeout。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-118-杨辉三角</title>
      <link href="/2020/02/25/leetcode-shu-zu-118-yang-hui-san-jiao/"/>
      <url>/2020/02/25/leetcode-shu-zu-118-yang-hui-san-jiao/</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</li><li>在杨辉三角中，每个数是它左上方和右上方的数的和。</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><blockquote><p>输入: 5<br>输出:<br>[<br>     [1],<br>    [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br> [1,4,6,4,1]<br>]</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>判断如果不是该列数组的首位或者最后一位，则值为a[i-1][j-1] + a[i-1][j] ，否则值为1</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> generate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numRows <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> subArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    subArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> result<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    subArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>subArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-88-合并两个有序数组</title>
      <link href="/2020/02/24/leetcode-shu-zu-88-he-bing-liang-ge-you-xu-shu-zu/"/>
      <url>/2020/02/24/leetcode-shu-zu-88-he-bing-liang-ge-you-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</li><li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h3><pre><code>    输入:    nums1 = [1,2,3,0,0,0], m = 3    nums2 = [2,5,6],       n = 3    输出: [1,2,2,3,5,6]</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>暴力法：从前往后一个个对比，将 nums2 中的数逐个插入 nums1 中</li><li>排序法：合并两个数组再排序，API 直接完成</li><li>递减法：从后往前对比，将较大值放入 nums1 的空值位置</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li><p>暴力法</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token comment" spellcheck="true">/*** 暴力法* @param {number[]} nums1* @param {number} m* @param {number[]} nums2* @param {number} n* @return {void} Do not return anything, modify nums1 in-place instead.*/</span><span class="token keyword">var</span> merge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>      j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 去0</span>  nums1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 如果 nums1 没值，直接把 nums2 放入</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>      nums1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> nums1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">||</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 对比将小值插入 nums1 中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          nums1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          j<span class="token operator">++</span><span class="token punctuation">;</span>          m<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 当 i 等于 m 代表从 j 开始的 nums2 元素都比 nums1 大，直接插入</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>          nums1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>nums2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> nums1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排序法</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>m <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      nums1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> a <span class="token operator">-</span> b      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> nums1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>递减法</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token comment" spellcheck="true">/**  * 递减法  * @param {number[]} nums1  * @param {number} m  * @param {number[]} nums2  * @param {number} n  * @return {void} Do not return anything, modify nums1 in-place instead.  */</span>  <span class="token keyword">var</span> merge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> p <span class="token operator">=</span> m<span class="token operator">--</span> <span class="token operator">+</span> n<span class="token operator">--</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// nums1 总长度</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 对比有序数组中的最大值，结果为所有元素最大值，放入 nums1 数组最后</span>          nums1<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">?</span> nums1<span class="token punctuation">[</span>m<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// n 大于零，即有比原 nums1 所有元素小的值，直接将其放入 nums1</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          nums1<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>n<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> nums1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写数组map,filter等方法</title>
      <link href="/2020/02/22/shou-xie-shu-zu-map-filter-deng-fang-fa/"/>
      <url>/2020/02/22/shou-xie-shu-zu-map-filter-deng-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="本文自己动手实现数组常用方法，包括filter-map-some-reduce-every等方法"><a href="#本文自己动手实现数组常用方法，包括filter-map-some-reduce-every等方法" class="headerlink" title="本文自己动手实现数组常用方法，包括filter,map,some,reduce,every等方法"></a>本文自己动手实现数组常用方法，包括filter,map,some,reduce,every等方法</h2><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><ul><li><p>功能：过滤,filter()使用指定的函数测试所有元素，并创建一个包含所有通过测试的元素的新数组。</p></li><li><p>用法:</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [6,8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>实现原理：</p><pre class="line-numbers language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>my_filter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">my_filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [6,8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul><li>功能：映射,map()方法返回一个新数组，数组中的元素为原始数组元素调用函数处理的后值。</li><li>用法：<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现原理：<pre class="line-numbers language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>my_map <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> newArr  <span class="token punctuation">}</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">my_map</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">return</span> item<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3></li><li>功能：reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</li><li>用法：<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>curr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> prev<span class="token operator">+</span>curr  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>原理：<pre class="line-numbers language-js"><code class="language-js">   Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>my_reduce <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span>initVal<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          initVal <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>initVal<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> initVal  <span class="token punctuation">}</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">my_reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>curr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prev<span class="token operator">+</span>curr<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul><li>功能：find() 方法返回通过测试（函数内判断）的数组的第一个元素的值</li><li>用法：<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>原理：<pre class="line-numbers language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>my_find <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">my_find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><ul><li>功能：如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。</li><li>用法：<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span>  arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>原理：<pre class="line-numbers language-js"><code class="language-js">   Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>my_some <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">my_some</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><ul><li>功能：every方法用于检测数组所有元素是否都符合指定条件（通过函数提供）。只有都符合，返回true,只要有一个不符合，就返回false</li><li>用法：<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>原理：<pre class="line-numbers language-js"><code class="language-js">  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>my_every <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">my_every</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="flat-数组降维"><a href="#flat-数组降维" class="headerlink" title="flat:数组降维"></a>flat:数组降维</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 展平一级</span>    <span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 展开多级</span>    <span class="token keyword">function</span> <span class="token function">deepFlat</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>deep<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deep<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">deepFlat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>deep<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组乱序"><a href="#数组乱序" class="headerlink" title="数组乱序"></a>数组乱序</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 第一种</span>    <span class="token keyword">function</span> <span class="token function">mixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第二种</span>    <span class="token keyword">function</span> <span class="token function">mixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="请实现一个函数，找出这个家族中所有有多个儿子的人的名字（name），输出一个数组"><a href="#请实现一个函数，找出这个家族中所有有多个儿子的人的名字（name），输出一个数组" class="headerlink" title="请实现一个函数，找出这个家族中所有有多个儿子的人的名字（name），输出一个数组"></a>请实现一个函数，找出这个家族中所有有多个儿子的人的名字（name），输出一个数组</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 递归</span>    <span class="token keyword">function</span> <span class="token function">findMultiChildPerson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">tmp</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                    data<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token function">tmp</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token function">tmp</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>child<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">tmp</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'jack'</span><span class="token punctuation">,</span>    child<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'jack1'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'jack2'</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'jack2-1'</span><span class="token punctuation">,</span>            child<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'jack2-1-1'</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">'jack2-2'</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'jack3'</span><span class="token punctuation">,</span>        child<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'jack3-1'</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span>    <span class="token punctuation">}</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMultiChildPerson</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ['jack','jack2']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一个函数判断数据类型</title>
      <link href="/2020/02/22/shi-xian-yi-ge-han-shu-pan-duan-shu-ju-lei-xing/"/>
      <url>/2020/02/22/shi-xian-yi-ge-han-shu-pan-duan-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="实现一个函数判断数据类型"><a href="#实现一个函数判断数据类型" class="headerlink" title="实现一个函数判断数据类型"></a>实现一个函数判断数据类型</h2><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj<span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span>        Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'[object '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 调用</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> null</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> object</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> array</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> number</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> boolean</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> string</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token regex">/123/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> regexp</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> date</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装fetch请求函数</title>
      <link href="/2020/02/22/feng-zhuang-fetch-qing-qiu-han-shu/"/>
      <url>/2020/02/22/feng-zhuang-fetch-qing-qiu-han-shu/</url>
      
        <content type="html"><![CDATA[<ul><li>手动封装一个请求函数，可以设置最大请求次数，请求成功则不再请求，请求失败则继续请求直到超过最大次数(流利说)</li></ul><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">'fetch'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>body<span class="token punctuation">,</span>successCb<span class="token punctuation">,</span>errCb<span class="token punctuation">,</span>maxCount <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token function">successCb</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>maxCount <span class="token operator">&lt;</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">errCb</span><span class="token punctuation">(</span><span class="token string">'请求超时'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>body<span class="token punctuation">,</span>successCb<span class="token punctuation">,</span>errCb<span class="token punctuation">,</span><span class="token operator">--</span>maxCount<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用法</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>methos<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>headers<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组去重方法(史上最全?)</title>
      <link href="/2020/02/22/js-shu-zu-qu-chong-fang-fa/"/>
      <url>/2020/02/22/js-shu-zu-qu-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<ul><li>下面介绍下对象数组去重和普通数组去重</li></ul><h2 id="普通数组去重"><a href="#普通数组去重" class="headerlink" title="普通数组去重"></a>普通数组去重</h2><h3 id="第一种：利用ES6-Set去重"><a href="#第一种：利用ES6-Set去重" class="headerlink" title="第一种：利用ES6 Set去重"></a>第一种：利用ES6 Set去重</h3><ul><li><p>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> unique <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {}, {}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种：-对象法"><a href="#第二种：-对象法" class="headerlink" title="第二种： 对象法"></a>第二种： 对象法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时数组</span>    <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个空对象</span>    <span class="token comment" spellcheck="true">//将当前数组的元素值当作对象的属性，遍历数组，比对对象，如果对象的这个属性不存在则将当前数组元素复制到临时数组，并添加该属性且将属性值赋值为1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>json<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果对象没有该属性</span>            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            json<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加属性，将属性值赋值为1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="第三种：splice去重"><a href="#第三种：splice去重" class="headerlink" title="第三种：splice去重"></a>第三种：splice去重</h3><ul><li>双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//第一个等同于第二个，splice方法删除第二个</span>                arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, "true", 15, false, undefined, NaN, NaN, "NaN", "a", {…}, {…}]     //NaN和{}没有去重，两个null直接消失了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四种：利用indexOf去重"><a href="#第四种：利用indexOf去重" class="headerlink" title="第四种：利用indexOf去重"></a>第四种：利用indexOf去重</h3></li><li>新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, "true", true, 15, false, undefined, null, NaN, NaN, "NaN", 0, "a", {…}, {…}]  //NaN、{}没有去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="第五种：利用sort"><a href="#第五种：利用sort" class="headerlink" title="第五种：利用sort()"></a>第五种：利用sort()</h3><ul><li>利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> arrry<span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arrry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arrry<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [0, 1, 15, "NaN", NaN, NaN, {…}, {…}, "a", false, null, true, "true", undefined]      //NaN、{}没有去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="第六种：利用includes"><a href="#第六种：利用includes" class="headerlink" title="第六种：利用includes"></a>第六种：利用includes</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'type error!'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> array <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>array<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//includes 检测数组是否有某个值</span>                        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array    <span class="token punctuation">}</span>    <span class="token keyword">let</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {…}, {…}]     //{}没有去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第七种：利用hasOwnProperty"><a href="#第七种：利用hasOwnProperty" class="headerlink" title="第七种：利用hasOwnProperty"></a>第七种：利用hasOwnProperty</h3><ul><li>利用hasOwnProperty 判断是否存在对象属性<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//[1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {…}]   //所有的都去重了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="第八种：利用filter"><a href="#第八种：利用filter" class="headerlink" title="第八种：利用filter"></a>第八种：利用filter</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span>            <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, "true", true, 15, false, undefined, null, "NaN", 0, "a", {…}, {…}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第九种：利用递归去重"><a href="#第九种：利用递归去重" class="headerlink" title="第九种：利用递归去重"></a>第九种：利用递归去重</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> array<span class="token operator">=</span> arr<span class="token punctuation">;</span>        <span class="token keyword">var</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//排序后更加方便去重</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> array<span class="token punctuation">[</span>index<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">loop</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//递归loop，然后数组去重</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">loop</span><span class="token punctuation">(</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, "a", "true", true, 15, false, 1, {…}, null, NaN, NaN, "NaN", 0, "a", {…}, undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第十种：利用Map数据结构去重"><a href="#第十种：利用Map数据结构去重" class="headerlink" title="第十种：利用Map数据结构去重"></a>第十种：利用Map数据结构去重</h3><ul><li>创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">arrayNonRepeatfy</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 数组用于返回结果</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>map <span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果有该key值</span>    map <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     map <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 如果没有该key值</span>    array <span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">return</span> array <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, "a", "true", true, 15, false, 1, {…}, null, NaN, NaN, "NaN", 0, "a", {…}, undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="第十一种：利用reduce-includes"><a href="#第十一种：利用reduce-includes" class="headerlink" title="第十一种：利用reduce+includes"></a>第十一种：利用reduce+includes</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prev<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">?</span> prev <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>prev<span class="token punctuation">,</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token string">'true'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span>undefined<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">'NaN'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, "true", true, 15, false, undefined, null, NaN, "NaN", 0, "a", {…}, {…}]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第十二种：-…new-Set-arr"><a href="#第十二种：-…new-Set-arr" class="headerlink" title="第十二种：[…new Set(arr)]"></a>第十二种：[…new Set(arr)]</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="对象数组去重"><a href="#对象数组去重" class="headerlink" title="对象数组去重"></a>对象数组去重</h2><h3 id="第一种：reduce方法"><a href="#第一种：reduce方法" class="headerlink" title="第一种：reduce方法"></a>第一种：reduce方法</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"女"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//reduce方法有两个参数，第一个参数是一个callback，用于针对数组项的操作；第二个参数则是传入的初始值，这个初始值用于单个数组项的操作。</span>        objArray <span class="token operator">=</span> objArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这是针对数组项操作的函数，对于每个数组项，reduce方法都会将其调用一次</span>            <span class="token comment" spellcheck="true">//可使用最多四个参数来声明回调函数（第一个参数：通过上一次调用回调函数获得的值;第二个参数：当前数组元素的值；第三个参数：当前数组元素的数字索引；第四个参数：包含该元素的数组对象）</span>            <span class="token comment" spellcheck="true">//这里只使用了两个参数，所以item和next分别代表上一次调用回调函数后的值和objArray项值</span>            hash<span class="token punctuation">[</span>next<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token operator">?</span><span class="token string">''</span><span class="token punctuation">:</span>hash<span class="token punctuation">[</span>next<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;&amp;</span>item<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与func3逻辑相似 </span>            <span class="token keyword">return</span> item<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始值是一个空对象，使用reduce方法返回的是空对象通过叠加执行之后的结果</span>        <span class="token keyword">return</span> objArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种：临时对象方法"><a href="#第二种：临时对象方法" class="headerlink" title="第二种：临时对象方法"></a>第二种：临时对象方法</h3><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"女"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">func4</span><span class="token punctuation">(</span>objArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去重后返回的结果数组</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时对象</span>        <span class="token comment" spellcheck="true">//将对象数组中每一项的name值作为属性，若temp不拥有此属性时则为temp添加此属性且将其值赋为true，并将这一项push到结果数组中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>objArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">var</span> myname <span class="token operator">=</span> objArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>myname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果temp中已经存在此属性名，则说明遇到重复项</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不继续执行接下来的代码，跳转至循环开头</span>            <span class="token punctuation">}</span>              temp<span class="token punctuation">[</span>myname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为temp添加此属性（myname）且将其值赋为true</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>objArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将这一项复制到结果数组result中去</span>        <span class="token punctuation">}</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-35-搜索插入位置</title>
      <link href="/2020/02/21/leetcode-shu-zu-35-sou-suo-cha-ru-wei-zhi/"/>
      <url>/2020/02/21/leetcode-shu-zu-35-sou-suo-cha-ru-wei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a>搜索插入位置</h2><h3 id="题目描述（难度：简单）"><a href="#题目描述（难度：简单）" class="headerlink" title="题目描述（难度：简单）"></a>题目描述（难度：简单）</h3><ul><li><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p></li><li><p>你可以假设数组中无重复元素。</p></li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><pre><code>    输入: [1,3,5,6], 5    输出: 2</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><pre><code>    输入: [1,3,5,6], 2    输出: 1</code></pre><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h3><pre><code>    输入: [1,3,5,6], 7    输出: 4</code></pre><h3 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h3><pre><code>    输入: [1,3,5,6], 0    输出: 0</code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>暴力法：由于数组有序，从0开始遍历，找到一个小于或等于目标值的索引，直接返回该索引，适用于数量少</li><li>二分法：由于数组有序，将数组用中间值分为大小区间；用目标值与中间值比较，如果大于该区间，则将中间值取为大区间的起点，重新计算中间值比较；最终当区间只有一个数的时候，比其大则返回其索引+1</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 暴力法 * @param {number[]} nums * @param {number} target * @return {number} */</span><span class="token keyword">var</span> searchInsert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 判断小于或等于当前，即返回当前位置索引</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 二分法 * @param {number[]} nums * @param {number} target * @return {number} */</span><span class="token keyword">var</span> searchInsert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 二分法递归</span>    <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 递归 */</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">===</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            right <span class="token operator">=</span> right <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            left <span class="token operator">=</span> left <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-27-移除元素</title>
      <link href="/2020/02/20/leetcode-shu-zu-27-yi-chu-yuan-su/"/>
      <url>/2020/02/20/leetcode-shu-zu-27-yi-chu-yuan-su/</url>
      
        <content type="html"><![CDATA[<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</li><li>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</li><li>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</li></ul><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><pre><code>    给定 nums = [3,2,2,3], val = 3,    函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。    你不需要考虑数组中超出新长度后面的元素。</code></pre><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><pre><code>    给定 nums = [0,1,2,2,3,0,4,2], val = 2,    函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。    注意这五个元素可为任意顺序。    你不需要考虑数组中超出新长度后面的元素。</code></pre><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>1.暴力法：判断元素是否等于目标值，如果是，则用JavaScript内置函数splice删除该元素，最后返回数组长度</li><li>2.迁移法：从前往后遍历，建立一个索引值，将不等于目标值的元素按新索引值赋予给数组，返回新索引值</li></ul><h4 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h4><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">/**     * JavaScript暴力法     * @param {number[]} nums     * @param {number} val     * @return {number}     */</span>    <span class="token comment" spellcheck="true">// 数组从后向前遍历</span>    <span class="token keyword">var</span> removeElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 思考：为什么从后往前移动</span>        <span class="token comment" spellcheck="true">// 提示：数组的变化</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 删除原数组元素</span>                nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数组从前向后遍历</span>    <span class="token keyword">var</span> removeElement <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 删除原数组元素</span>                nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                i<span class="token operator">--</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迁移法"><a href="#迁移法" class="headerlink" title="迁移法"></a>迁移法</h4><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> removeElement <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                index<span class="token operator">++</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-26-删除排序数组中的重复项</title>
      <link href="/2020/02/20/leetcode-shu-zu-26-shan-chu-pai-xu-shu-zu-zhong-de-chong-fu-xiang/"/>
      <url>/2020/02/20/leetcode-shu-zu-26-shan-chu-pai-xu-shu-zu-zhong-de-chong-fu-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a>26. 删除排序数组中的重复项</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</li><li>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。</code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><pre><code>给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>从后向前遍历数组，发现相同的项，就删除</li></ul><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> removeDuplicates <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析 1"></a>复杂度分析 1</h3><ul><li>时间复杂度：O(n).共执行了 n 次</li><li>空间复杂度：O(1)</li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>1.定义一个变量count。初始值为0，用来记录数量</li><li>2.遍历数组，判断如果当前项和下一项不同，就用count当作数组索引，当前项为值，count每次加1</li><li>3.最后在愿数组中得出结果</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码 2"></a>代码 2</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @return {number} */</span><span class="token keyword">var</span> removeDuplicates <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           nums<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析 2"></a>复杂度分析 2</h3><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组-1-两数之和</title>
      <link href="/2020/02/19/leetcode-shu-zu-1-liang-shu-zhi-he/"/>
      <url>/2020/02/19/leetcode-shu-zu-1-liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><pre><code>    给定 nums = [2, 7, 11, 15], target = 9    因为 nums[0] + nums[1] = 2 + 7 = 9    所以返回 [0, 1]</code></pre><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><ul><li>暴力法</li></ul><h3 id="详解-1"><a href="#详解-1" class="headerlink" title="详解 1"></a>详解 1</h3><ul><li>1.遍历每个元素 x</li><li>2.并查找是否存在一个值与 target - x 相等的目标元素。</li></ul><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法 1"></a>解法 1</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} target * @return {number[]} */</span><span class="token keyword">const</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析 1"></a>复杂度分析 1</h3><ul><li>时间复杂度： O( n^2 )</li><li>空间复杂度：O(1)</li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><ul><li>利用Map</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param {number[]} nums * @param {number} target * @return {number[]} */</span><span class="token keyword">const</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">let</span> mapObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">let</span> res <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>mapObj<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token punctuation">[</span>mapObj<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：O(n)。只遍历了包含有 n 个元素的列表一次</li><li>空间复杂度：O(n)。上述解法中，申请了大小为  的空间，空间复杂度跟数字的个数 n 线性相关</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise处理异常</title>
      <link href="/2020/02/19/promise-chu-li-yi-chang/"/>
      <url>/2020/02/19/promise-chu-li-yi-chang/</url>
      
        <content type="html"><![CDATA[<h2 id="promise如何进行异常处理"><a href="#promise如何进行异常处理" class="headerlink" title="promise如何进行异常处理"></a>promise如何进行异常处理</h2><ul><li><p>参照promise的文档我们可以在reject回调和catch中处理异常。但是promise规定如果一个错误在reject函数中被处理，那么promise将从异常常态中恢复过来。这意味着接下来的then方法将接收到一个resolve回调。大多数时候我们希望发生错误的时候，promise处理当前的异常并中断后续的then操作。</p></li><li><p>我们先来看一个使用reject处理异常的例子</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> promiseStart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'promise is rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  promiseStart  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'promise is resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected1:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果这里不抛出error，这个error将被吞掉，catch无法捕获异常</span>      <span class="token comment" spellcheck="true">// 但是如果抛出error，这个error会被下一个then的reject回调处理，这不是我们想要的</span>      <span class="token keyword">throw</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved:'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected2:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catched:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/*   输出：  rejected: promise is rejected  rejected: promise is rejected  catched: promise is rejected  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在这个例子中reject回调处理了异常，但是它并不能中断后续then操作。第二个then中的reject被触发了。</p></li><li><p>而正确的做法是，不要使用reject！让错误直接到catch中捕获。</p></li></ul><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> promiseStart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'promise is rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    promiseStart    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'promise is resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved:'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catched:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*     输出：    catched: promise is rejected    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解和使用Promise.all和Promise.race</title>
      <link href="/2020/02/19/li-jie-he-shi-yong-promise-all-he-promise-race/"/>
      <url>/2020/02/19/li-jie-he-shi-yong-promise-all-he-promise-race/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Pomise-all的使用"><a href="#一、Pomise-all的使用" class="headerlink" title="一、Pomise.all的使用"></a>一、Pomise.all的使用</h2><ul><li><p>Promise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。</p></li><li><p>具体代码如下：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">//['成功了', 'success']</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 失败了，打出 '失败'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Promse.all在处理多个异步处理时非常有用，比如说一个页面上需要等两个或多个ajax的数据回来以后才正常显示，在此之前只显示loading图标。</p></li><li><p>代码模拟：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> wake <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time <span class="token operator">/</span> <span class="token number">1000</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒后醒来`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token function">wake</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token function">wake</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// [ '3秒后醒来', '2秒后醒来' ]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>需要特别注意的是，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，即p1的结果在前，即便p1的结果获取的比p2要晚。这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用Promise.all毫无疑问可以解决这个问题。</p></li></ul><h3 id="二、Promise-race的使用"><a href="#二、Promise-race的使用" class="headerlink" title="二、Promise.race的使用"></a>二、Promise.race的使用</h3><ul><li><p>顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 打开的是 'failed'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise.all并发限制</title>
      <link href="/2020/02/19/promise-all-bing-fa-xian-zhi/"/>
      <url>/2020/02/19/promise-all-bing-fa-xian-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="下面通过3篇讲解promise-all并发限制"><a href="#下面通过3篇讲解promise-all并发限制" class="headerlink" title="下面通过3篇讲解promise.all并发限制"></a>下面通过3篇讲解promise.all并发限制</h1><h2 id="Promise-all并发限制"><a href="#Promise-all并发限制" class="headerlink" title="Promise.all并发限制"></a>Promise.all并发限制</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><p>通常，我们在需要保证代码在多个异步处理之后执行，会用到：</p><pre class="line-numbers language-js"><code class="language-js">  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fun<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Promise.all可以保证，promises数组中所有promise对象都达到resolve状态，才执行then回调。</p></li><li><p>这时候考虑一个场景：如果你的promises数组中每个对象都是http请求，或者说每个对象包含了复杂的调用处理。而这样的对象有几十万个。</p></li><li><p>那么会出现的情况是，你在瞬间发出几十万http请求（tcp连接数不足可能造成等待），或者堆积了无数调用栈导致内存溢出。</p></li><li><p>这时候，我们就需要考虑对Promise.all做并发限制。</p></li><li><p>Promise.all并发限制指的是，每个时刻并发执行的promise数量是固定的，最终的执行结果还是保持与原来的Promise.all一致。</p></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><p>我们知道，promise并不是因为调用Promise.all才执行，而是在实例化promise对象的时候就执行了，在理解这一点的基础上，要实现并发限制，只能从promise实例化上下手。</p></li><li><p>换句话说，就是把生成promises数组的控制权，交给并发控制逻辑。</p></li><li><p>这里我并不打算一步步实现这个这个功能，npm中有很多实现这个功能的第三方包，比如async-pool、es6-promise-pool、p-limit，这里我直接拿async-pool的代码来分析一下实现原理。</p></li><li><p>代码很简单，去掉不必要的代码，加上自己的注释，大概内容如下：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span>poolLimit<span class="token punctuation">,</span> array<span class="token punctuation">,</span> iteratorFn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> enqueue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 边界处理，array为空数组</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 每调一次enqueue，初始化一个promise</span>          <span class="token keyword">const</span> item <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 放入promises数组</span>          ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// promise执行完毕，从executing数组中删除</span>          <span class="token keyword">const</span> e <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> executing<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>executing<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 插入executing数字，表示正在执行的promise</span>          executing<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 使用Promise.rece，每当executing数组中promise数量低于poolLimit，就实例化新的promise并执行</span>          <span class="token keyword">let</span> r <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>length <span class="token operator">>=</span> poolLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>              r <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 递归，直到遍历完array</span>          <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>因为是promise加上递归，所以在代码注释上不太好标注执行顺序，但是大概的逻辑可以总结为：</p><ul><li>1.从array第1个元素开始，初始化promise对象，同时用一个executing数组保存正在执行的promise</li><li>2.不断初始化promise，直到达到poolLimt</li><li>3.使用Promise.race，获得executing中promise的执行情况，当有一个promise执行完毕，继续初始化promise并放入executing中</li><li>4.所有promise都执行完了，调用Promise.all返回</li></ul></li><li><p>使用方式就是：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">const</span> timeout <span class="token operator">=</span> i <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>results <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题:"></a>面试题:</h2><ul><li>有 8 个图片资源的 url，已经存储在数组 urls 中（即urls = [‘<a href="http://example.com/1.jpg’" target="_blank" rel="noopener">http://example.com/1.jpg’</a>, …., ‘<a href="http://example.com/8.jpg’]），而且已经有一个函数" target="_blank" rel="noopener">http://example.com/8.jpg’]），而且已经有一个函数</a> function loadImg，输入一个 url 链接，返回一个 Promise，该 Promise 在图片下载完成的时候 resolve，下载失败则 reject。但是我们要求，任意时刻，同时下载的链接数量不可以超过 3 个。请写一段代码实现这个需求，要求尽可能快速地将所有图片下载完成。</li><li>已有代码如下：<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'https://www.kkkk1000.com/images/getImgData/getImgDatadata.jpg'</span><span class="token punctuation">,</span>   <span class="token string">'https://www.kkkk1000.com/images/getImgData/gray.gif'</span><span class="token punctuation">,</span>   <span class="token string">'https://www.kkkk1000.com/images/getImgData/Particle.gif'</span><span class="token punctuation">,</span>   <span class="token string">'https://www.kkkk1000.com/images/getImgData/arithmetic.png'</span><span class="token punctuation">,</span>   <span class="token string">'https://www.kkkk1000.com/images/getImgData/arithmetic2.gif'</span><span class="token punctuation">,</span>   <span class="token string">'https://www.kkkk1000.com/images/getImgData/getImgDataError.jpg'</span><span class="token punctuation">,</span>   <span class="token string">'https://www.kkkk1000.com/images/getImgData/arithmetic.gif'</span><span class="token punctuation">,</span>   <span class="token string">'https://www.kkkk1000.com/images/wxQrCode2.png'</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">loadImg</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'一张图片加载完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          img<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject          img<span class="token punctuation">.</span>src <span class="token operator">=</span> url      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ul><li><p>用 Promise.race来实现，先并发请求3个图片资源，这样可以得到 3 个 Promise实例，组成一个数组promises ，然后不断的调用 Promise.race 来返回最快改变状态的 Promise，然后从数组（promises ）中删掉这个 Promise 对象实例，再加入一个新的 Promise实例，直到全部的 url 被取完。</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token comment" spellcheck="true">//省略代码</span>  <span class="token keyword">function</span> <span class="token function">limitLoad</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 对数组做一个拷贝</span>      <span class="token keyword">const</span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span>      <span class="token keyword">let</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//并发请求到最大数</span>      promises <span class="token operator">=</span> sequence<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 这里返回的 index 是任务在 promises 的脚标，</span>          <span class="token comment" spellcheck="true">//用于在 Promise.race 之后找到完成的任务脚标</span>          <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> index          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sequence<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  promises<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>sequence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                      <span class="token keyword">return</span> res                  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">limitLoad</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> loadImg<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参考</p><ul><li><a href="https://blog.csdn.net/tonghonglei/article/details/88054116" target="_blank" rel="noopener">https://blog.csdn.net/tonghonglei/article/details/88054116</a></li><li><a href="https://segmentfault.com/a/1190000016389127" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016389127</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
